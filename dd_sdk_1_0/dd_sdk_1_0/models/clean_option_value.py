# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class CleanOptionValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'throttle': 'int',
        'schedule': 'CleaningSchedule',
        'frequency': 'int',
        'tier_type': 'TierType',
        'cloud_unit_name': 'str'
    }

    attribute_map = {
        'throttle': 'throttle',
        'schedule': 'schedule',
        'frequency': 'frequency',
        'tier_type': 'tier_type',
        'cloud_unit_name': 'cloud_unit_name'
    }

    def __init__(self, throttle=None, schedule=None, frequency=None, tier_type=None, cloud_unit_name=None, _configuration=None):  # noqa: E501
        """CleanOptionValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._throttle = None
        self._schedule = None
        self._frequency = None
        self._tier_type = None
        self._cloud_unit_name = None
        self.discriminator = None

        if throttle is not None:
            self.throttle = throttle
        if schedule is not None:
            self.schedule = schedule
        if frequency is not None:
            self.frequency = frequency
        self.tier_type = tier_type
        if cloud_unit_name is not None:
            self.cloud_unit_name = cloud_unit_name

    @property
    def throttle(self):
        """Gets the throttle of this CleanOptionValue.  # noqa: E501


        :return: The throttle of this CleanOptionValue.  # noqa: E501
        :rtype: int
        """
        return self._throttle

    @throttle.setter
    def throttle(self, throttle):
        """Sets the throttle of this CleanOptionValue.


        :param throttle: The throttle of this CleanOptionValue.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                throttle is not None and throttle < 0):  # noqa: E501
            raise ValueError("Invalid value for `throttle`, must be a value greater than or equal to `0`")  # noqa: E501

        self._throttle = throttle

    @property
    def schedule(self):
        """Gets the schedule of this CleanOptionValue.  # noqa: E501


        :return: The schedule of this CleanOptionValue.  # noqa: E501
        :rtype: CleaningSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CleanOptionValue.


        :param schedule: The schedule of this CleanOptionValue.  # noqa: E501
        :type: CleaningSchedule
        """

        self._schedule = schedule

    @property
    def frequency(self):
        """Gets the frequency of this CleanOptionValue.  # noqa: E501


        :return: The frequency of this CleanOptionValue.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this CleanOptionValue.


        :param frequency: The frequency of this CleanOptionValue.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                frequency is not None and frequency < 0):  # noqa: E501
            raise ValueError("Invalid value for `frequency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._frequency = frequency

    @property
    def tier_type(self):
        """Gets the tier_type of this CleanOptionValue.  # noqa: E501


        :return: The tier_type of this CleanOptionValue.  # noqa: E501
        :rtype: TierType
        """
        return self._tier_type

    @tier_type.setter
    def tier_type(self, tier_type):
        """Sets the tier_type of this CleanOptionValue.


        :param tier_type: The tier_type of this CleanOptionValue.  # noqa: E501
        :type: TierType
        """
        if self._configuration.client_side_validation and tier_type is None:
            raise ValueError("Invalid value for `tier_type`, must not be `None`")  # noqa: E501

        self._tier_type = tier_type

    @property
    def cloud_unit_name(self):
        """Gets the cloud_unit_name of this CleanOptionValue.  # noqa: E501


        :return: The cloud_unit_name of this CleanOptionValue.  # noqa: E501
        :rtype: str
        """
        return self._cloud_unit_name

    @cloud_unit_name.setter
    def cloud_unit_name(self, cloud_unit_name):
        """Sets the cloud_unit_name of this CleanOptionValue.


        :param cloud_unit_name: The cloud_unit_name of this CleanOptionValue.  # noqa: E501
        :type: str
        """

        self._cloud_unit_name = cloud_unit_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CleanOptionValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CleanOptionValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CleanOptionValue):
            return True

        return self.to_dict() != other.to_dict()
