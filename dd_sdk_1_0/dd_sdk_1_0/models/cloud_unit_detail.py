# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class CloudUnitDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'profile_name': 'str',
        'state': 'CloudUnitState',
        'provider_name': 'ProviderName',
        'capacity_usage_details': 'CapacityUsageDetails',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'profile_name': 'profile_name',
        'state': 'state',
        'provider_name': 'provider_name',
        'capacity_usage_details': 'capacity_usage_details',
        'link': 'link'
    }

    def __init__(self, id=None, name=None, profile_name=None, state=None, provider_name=None, capacity_usage_details=None, link=None, _configuration=None):  # noqa: E501
        """CloudUnitDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._profile_name = None
        self._state = None
        self._provider_name = None
        self._capacity_usage_details = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.profile_name = profile_name
        self.state = state
        self.provider_name = provider_name
        if capacity_usage_details is not None:
            self.capacity_usage_details = capacity_usage_details
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this CloudUnitDetail.  # noqa: E501


        :return: The id of this CloudUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudUnitDetail.


        :param id: The id of this CloudUnitDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this CloudUnitDetail.  # noqa: E501


        :return: The name of this CloudUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudUnitDetail.


        :param name: The name of this CloudUnitDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def profile_name(self):
        """Gets the profile_name of this CloudUnitDetail.  # noqa: E501


        :return: The profile_name of this CloudUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this CloudUnitDetail.


        :param profile_name: The profile_name of this CloudUnitDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and profile_name is None:
            raise ValueError("Invalid value for `profile_name`, must not be `None`")  # noqa: E501

        self._profile_name = profile_name

    @property
    def state(self):
        """Gets the state of this CloudUnitDetail.  # noqa: E501


        :return: The state of this CloudUnitDetail.  # noqa: E501
        :rtype: CloudUnitState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CloudUnitDetail.


        :param state: The state of this CloudUnitDetail.  # noqa: E501
        :type: CloudUnitState
        """
        if self._configuration.client_side_validation and state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def provider_name(self):
        """Gets the provider_name of this CloudUnitDetail.  # noqa: E501


        :return: The provider_name of this CloudUnitDetail.  # noqa: E501
        :rtype: ProviderName
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this CloudUnitDetail.


        :param provider_name: The provider_name of this CloudUnitDetail.  # noqa: E501
        :type: ProviderName
        """
        if self._configuration.client_side_validation and provider_name is None:
            raise ValueError("Invalid value for `provider_name`, must not be `None`")  # noqa: E501

        self._provider_name = provider_name

    @property
    def capacity_usage_details(self):
        """Gets the capacity_usage_details of this CloudUnitDetail.  # noqa: E501

        Current capacity usage data for the cloud unit]  # noqa: E501

        :return: The capacity_usage_details of this CloudUnitDetail.  # noqa: E501
        :rtype: CapacityUsageDetails
        """
        return self._capacity_usage_details

    @capacity_usage_details.setter
    def capacity_usage_details(self, capacity_usage_details):
        """Sets the capacity_usage_details of this CloudUnitDetail.

        Current capacity usage data for the cloud unit]  # noqa: E501

        :param capacity_usage_details: The capacity_usage_details of this CloudUnitDetail.  # noqa: E501
        :type: CapacityUsageDetails
        """

        self._capacity_usage_details = capacity_usage_details

    @property
    def link(self):
        """Gets the link of this CloudUnitDetail.  # noqa: E501


        :return: The link of this CloudUnitDetail.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this CloudUnitDetail.


        :param link: The link of this CloudUnitDetail.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudUnitDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudUnitDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudUnitDetail):
            return True

        return self.to_dict() != other.to_dict()
