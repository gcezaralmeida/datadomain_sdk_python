# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class NetworkInfoDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'address': 'str',
        'netmask': 'str',
        'dhcp': 'bool',
        'enabled': 'bool',
        'up_state': 'bool',
        'has_link': 'bool',
        'booting': 'bool',
        'virtual': 'bool',
        'primary': 'bool',
        'mtu': 'int',
        'link_speed': 'int',
        'link_duplex': 'int',
        'link_auto_nego': 'bool',
        'master_id': 'str',
        'updelay': 'int',
        'downdelay': 'int',
        'txqueuelen': 'int',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'address': 'address',
        'netmask': 'netmask',
        'dhcp': 'dhcp',
        'enabled': 'enabled',
        'up_state': 'up_state',
        'has_link': 'has_link',
        'booting': 'booting',
        'virtual': 'virtual',
        'primary': 'primary',
        'mtu': 'mtu',
        'link_speed': 'link_speed',
        'link_duplex': 'link_duplex',
        'link_auto_nego': 'link_auto_nego',
        'master_id': 'master_id',
        'updelay': 'updelay',
        'downdelay': 'downdelay',
        'txqueuelen': 'txqueuelen',
        'link': 'link'
    }

    def __init__(self, id=None, name=None, address=None, netmask=None, dhcp=None, enabled=None, up_state=None, has_link=None, booting=None, virtual=None, primary=None, mtu=None, link_speed=None, link_duplex=None, link_auto_nego=None, master_id=None, updelay=None, downdelay=None, txqueuelen=None, link=None, _configuration=None):  # noqa: E501
        """NetworkInfoDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._address = None
        self._netmask = None
        self._dhcp = None
        self._enabled = None
        self._up_state = None
        self._has_link = None
        self._booting = None
        self._virtual = None
        self._primary = None
        self._mtu = None
        self._link_speed = None
        self._link_duplex = None
        self._link_auto_nego = None
        self._master_id = None
        self._updelay = None
        self._downdelay = None
        self._txqueuelen = None
        self._link = None
        self.discriminator = None

        self.id = id
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if netmask is not None:
            self.netmask = netmask
        if dhcp is not None:
            self.dhcp = dhcp
        if enabled is not None:
            self.enabled = enabled
        if up_state is not None:
            self.up_state = up_state
        if has_link is not None:
            self.has_link = has_link
        if booting is not None:
            self.booting = booting
        if virtual is not None:
            self.virtual = virtual
        if primary is not None:
            self.primary = primary
        if mtu is not None:
            self.mtu = mtu
        if link_speed is not None:
            self.link_speed = link_speed
        if link_duplex is not None:
            self.link_duplex = link_duplex
        if link_auto_nego is not None:
            self.link_auto_nego = link_auto_nego
        if master_id is not None:
            self.master_id = master_id
        if updelay is not None:
            self.updelay = updelay
        if downdelay is not None:
            self.downdelay = downdelay
        if txqueuelen is not None:
            self.txqueuelen = txqueuelen
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this NetworkInfoDetail.  # noqa: E501


        :return: The id of this NetworkInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkInfoDetail.


        :param id: The id of this NetworkInfoDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this NetworkInfoDetail.  # noqa: E501


        :return: The name of this NetworkInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkInfoDetail.


        :param name: The name of this NetworkInfoDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this NetworkInfoDetail.  # noqa: E501


        :return: The address of this NetworkInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this NetworkInfoDetail.


        :param address: The address of this NetworkInfoDetail.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def netmask(self):
        """Gets the netmask of this NetworkInfoDetail.  # noqa: E501


        :return: The netmask of this NetworkInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this NetworkInfoDetail.


        :param netmask: The netmask of this NetworkInfoDetail.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def dhcp(self):
        """Gets the dhcp of this NetworkInfoDetail.  # noqa: E501


        :return: The dhcp of this NetworkInfoDetail.  # noqa: E501
        :rtype: bool
        """
        return self._dhcp

    @dhcp.setter
    def dhcp(self, dhcp):
        """Sets the dhcp of this NetworkInfoDetail.


        :param dhcp: The dhcp of this NetworkInfoDetail.  # noqa: E501
        :type: bool
        """

        self._dhcp = dhcp

    @property
    def enabled(self):
        """Gets the enabled of this NetworkInfoDetail.  # noqa: E501


        :return: The enabled of this NetworkInfoDetail.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NetworkInfoDetail.


        :param enabled: The enabled of this NetworkInfoDetail.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def up_state(self):
        """Gets the up_state of this NetworkInfoDetail.  # noqa: E501


        :return: The up_state of this NetworkInfoDetail.  # noqa: E501
        :rtype: bool
        """
        return self._up_state

    @up_state.setter
    def up_state(self, up_state):
        """Sets the up_state of this NetworkInfoDetail.


        :param up_state: The up_state of this NetworkInfoDetail.  # noqa: E501
        :type: bool
        """

        self._up_state = up_state

    @property
    def has_link(self):
        """Gets the has_link of this NetworkInfoDetail.  # noqa: E501


        :return: The has_link of this NetworkInfoDetail.  # noqa: E501
        :rtype: bool
        """
        return self._has_link

    @has_link.setter
    def has_link(self, has_link):
        """Sets the has_link of this NetworkInfoDetail.


        :param has_link: The has_link of this NetworkInfoDetail.  # noqa: E501
        :type: bool
        """

        self._has_link = has_link

    @property
    def booting(self):
        """Gets the booting of this NetworkInfoDetail.  # noqa: E501


        :return: The booting of this NetworkInfoDetail.  # noqa: E501
        :rtype: bool
        """
        return self._booting

    @booting.setter
    def booting(self, booting):
        """Sets the booting of this NetworkInfoDetail.


        :param booting: The booting of this NetworkInfoDetail.  # noqa: E501
        :type: bool
        """

        self._booting = booting

    @property
    def virtual(self):
        """Gets the virtual of this NetworkInfoDetail.  # noqa: E501


        :return: The virtual of this NetworkInfoDetail.  # noqa: E501
        :rtype: bool
        """
        return self._virtual

    @virtual.setter
    def virtual(self, virtual):
        """Sets the virtual of this NetworkInfoDetail.


        :param virtual: The virtual of this NetworkInfoDetail.  # noqa: E501
        :type: bool
        """

        self._virtual = virtual

    @property
    def primary(self):
        """Gets the primary of this NetworkInfoDetail.  # noqa: E501


        :return: The primary of this NetworkInfoDetail.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this NetworkInfoDetail.


        :param primary: The primary of this NetworkInfoDetail.  # noqa: E501
        :type: bool
        """

        self._primary = primary

    @property
    def mtu(self):
        """Gets the mtu of this NetworkInfoDetail.  # noqa: E501


        :return: The mtu of this NetworkInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NetworkInfoDetail.


        :param mtu: The mtu of this NetworkInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                mtu is not None and mtu < 0):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mtu = mtu

    @property
    def link_speed(self):
        """Gets the link_speed of this NetworkInfoDetail.  # noqa: E501


        :return: The link_speed of this NetworkInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """Sets the link_speed of this NetworkInfoDetail.


        :param link_speed: The link_speed of this NetworkInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                link_speed is not None and link_speed < 0):  # noqa: E501
            raise ValueError("Invalid value for `link_speed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._link_speed = link_speed

    @property
    def link_duplex(self):
        """Gets the link_duplex of this NetworkInfoDetail.  # noqa: E501


        :return: The link_duplex of this NetworkInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._link_duplex

    @link_duplex.setter
    def link_duplex(self, link_duplex):
        """Sets the link_duplex of this NetworkInfoDetail.


        :param link_duplex: The link_duplex of this NetworkInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                link_duplex is not None and link_duplex < 0):  # noqa: E501
            raise ValueError("Invalid value for `link_duplex`, must be a value greater than or equal to `0`")  # noqa: E501

        self._link_duplex = link_duplex

    @property
    def link_auto_nego(self):
        """Gets the link_auto_nego of this NetworkInfoDetail.  # noqa: E501


        :return: The link_auto_nego of this NetworkInfoDetail.  # noqa: E501
        :rtype: bool
        """
        return self._link_auto_nego

    @link_auto_nego.setter
    def link_auto_nego(self, link_auto_nego):
        """Sets the link_auto_nego of this NetworkInfoDetail.


        :param link_auto_nego: The link_auto_nego of this NetworkInfoDetail.  # noqa: E501
        :type: bool
        """

        self._link_auto_nego = link_auto_nego

    @property
    def master_id(self):
        """Gets the master_id of this NetworkInfoDetail.  # noqa: E501


        :return: The master_id of this NetworkInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._master_id

    @master_id.setter
    def master_id(self, master_id):
        """Sets the master_id of this NetworkInfoDetail.


        :param master_id: The master_id of this NetworkInfoDetail.  # noqa: E501
        :type: str
        """

        self._master_id = master_id

    @property
    def updelay(self):
        """Gets the updelay of this NetworkInfoDetail.  # noqa: E501


        :return: The updelay of this NetworkInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._updelay

    @updelay.setter
    def updelay(self, updelay):
        """Sets the updelay of this NetworkInfoDetail.


        :param updelay: The updelay of this NetworkInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                updelay is not None and updelay < 0):  # noqa: E501
            raise ValueError("Invalid value for `updelay`, must be a value greater than or equal to `0`")  # noqa: E501

        self._updelay = updelay

    @property
    def downdelay(self):
        """Gets the downdelay of this NetworkInfoDetail.  # noqa: E501


        :return: The downdelay of this NetworkInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._downdelay

    @downdelay.setter
    def downdelay(self, downdelay):
        """Sets the downdelay of this NetworkInfoDetail.


        :param downdelay: The downdelay of this NetworkInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                downdelay is not None and downdelay < 0):  # noqa: E501
            raise ValueError("Invalid value for `downdelay`, must be a value greater than or equal to `0`")  # noqa: E501

        self._downdelay = downdelay

    @property
    def txqueuelen(self):
        """Gets the txqueuelen of this NetworkInfoDetail.  # noqa: E501


        :return: The txqueuelen of this NetworkInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._txqueuelen

    @txqueuelen.setter
    def txqueuelen(self, txqueuelen):
        """Sets the txqueuelen of this NetworkInfoDetail.


        :param txqueuelen: The txqueuelen of this NetworkInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                txqueuelen is not None and txqueuelen < 0):  # noqa: E501
            raise ValueError("Invalid value for `txqueuelen`, must be a value greater than or equal to `0`")  # noqa: E501

        self._txqueuelen = txqueuelen

    @property
    def link(self):
        """Gets the link of this NetworkInfoDetail.  # noqa: E501


        :return: The link of this NetworkInfoDetail.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this NetworkInfoDetail.


        :param link: The link of this NetworkInfoDetail.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkInfoDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInfoDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkInfoDetail):
            return True

        return self.to_dict() != other.to_dict()
