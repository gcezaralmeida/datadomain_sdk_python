# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FileReplicationHistoricalStatsDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'int',
        'precomp_replicated_bytes': 'int',
        'network_bytes': 'int',
        'compression_ratio': 'float',
        'completed_files': 'int',
        'failed_replication_jobs': 'int',
        'percent_failed': 'int'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'precomp_replicated_bytes': 'precomp_replicated_bytes',
        'network_bytes': 'network_bytes',
        'compression_ratio': 'compression_ratio',
        'completed_files': 'completed_files',
        'failed_replication_jobs': 'failed_replication_jobs',
        'percent_failed': 'percent_failed'
    }

    def __init__(self, timestamp=None, precomp_replicated_bytes=None, network_bytes=None, compression_ratio=None, completed_files=None, failed_replication_jobs=None, percent_failed=None, _configuration=None):  # noqa: E501
        """FileReplicationHistoricalStatsDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._timestamp = None
        self._precomp_replicated_bytes = None
        self._network_bytes = None
        self._compression_ratio = None
        self._completed_files = None
        self._failed_replication_jobs = None
        self._percent_failed = None
        self.discriminator = None

        self.timestamp = timestamp
        self.precomp_replicated_bytes = precomp_replicated_bytes
        self.network_bytes = network_bytes
        self.compression_ratio = compression_ratio
        self.completed_files = completed_files
        self.failed_replication_jobs = failed_replication_jobs
        self.percent_failed = percent_failed

    @property
    def timestamp(self):
        """Gets the timestamp of this FileReplicationHistoricalStatsDetails.  # noqa: E501


        :return: The timestamp of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FileReplicationHistoricalStatsDetails.


        :param timestamp: The timestamp of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                timestamp is not None and timestamp < 0):  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must be a value greater than or equal to `0`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def precomp_replicated_bytes(self):
        """Gets the precomp_replicated_bytes of this FileReplicationHistoricalStatsDetails.  # noqa: E501


        :return: The precomp_replicated_bytes of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._precomp_replicated_bytes

    @precomp_replicated_bytes.setter
    def precomp_replicated_bytes(self, precomp_replicated_bytes):
        """Sets the precomp_replicated_bytes of this FileReplicationHistoricalStatsDetails.


        :param precomp_replicated_bytes: The precomp_replicated_bytes of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and precomp_replicated_bytes is None:
            raise ValueError("Invalid value for `precomp_replicated_bytes`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                precomp_replicated_bytes is not None and precomp_replicated_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `precomp_replicated_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._precomp_replicated_bytes = precomp_replicated_bytes

    @property
    def network_bytes(self):
        """Gets the network_bytes of this FileReplicationHistoricalStatsDetails.  # noqa: E501


        :return: The network_bytes of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._network_bytes

    @network_bytes.setter
    def network_bytes(self, network_bytes):
        """Sets the network_bytes of this FileReplicationHistoricalStatsDetails.


        :param network_bytes: The network_bytes of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and network_bytes is None:
            raise ValueError("Invalid value for `network_bytes`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                network_bytes is not None and network_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `network_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._network_bytes = network_bytes

    @property
    def compression_ratio(self):
        """Gets the compression_ratio of this FileReplicationHistoricalStatsDetails.  # noqa: E501


        :return: The compression_ratio of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :rtype: float
        """
        return self._compression_ratio

    @compression_ratio.setter
    def compression_ratio(self, compression_ratio):
        """Sets the compression_ratio of this FileReplicationHistoricalStatsDetails.


        :param compression_ratio: The compression_ratio of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and compression_ratio is None:
            raise ValueError("Invalid value for `compression_ratio`, must not be `None`")  # noqa: E501

        self._compression_ratio = compression_ratio

    @property
    def completed_files(self):
        """Gets the completed_files of this FileReplicationHistoricalStatsDetails.  # noqa: E501


        :return: The completed_files of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._completed_files

    @completed_files.setter
    def completed_files(self, completed_files):
        """Sets the completed_files of this FileReplicationHistoricalStatsDetails.


        :param completed_files: The completed_files of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and completed_files is None:
            raise ValueError("Invalid value for `completed_files`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                completed_files is not None and completed_files < 0):  # noqa: E501
            raise ValueError("Invalid value for `completed_files`, must be a value greater than or equal to `0`")  # noqa: E501

        self._completed_files = completed_files

    @property
    def failed_replication_jobs(self):
        """Gets the failed_replication_jobs of this FileReplicationHistoricalStatsDetails.  # noqa: E501


        :return: The failed_replication_jobs of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._failed_replication_jobs

    @failed_replication_jobs.setter
    def failed_replication_jobs(self, failed_replication_jobs):
        """Sets the failed_replication_jobs of this FileReplicationHistoricalStatsDetails.


        :param failed_replication_jobs: The failed_replication_jobs of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and failed_replication_jobs is None:
            raise ValueError("Invalid value for `failed_replication_jobs`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                failed_replication_jobs is not None and failed_replication_jobs < 0):  # noqa: E501
            raise ValueError("Invalid value for `failed_replication_jobs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._failed_replication_jobs = failed_replication_jobs

    @property
    def percent_failed(self):
        """Gets the percent_failed of this FileReplicationHistoricalStatsDetails.  # noqa: E501


        :return: The percent_failed of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._percent_failed

    @percent_failed.setter
    def percent_failed(self, percent_failed):
        """Sets the percent_failed of this FileReplicationHistoricalStatsDetails.


        :param percent_failed: The percent_failed of this FileReplicationHistoricalStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and percent_failed is None:
            raise ValueError("Invalid value for `percent_failed`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                percent_failed is not None and percent_failed < 0):  # noqa: E501
            raise ValueError("Invalid value for `percent_failed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._percent_failed = percent_failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileReplicationHistoricalStatsDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileReplicationHistoricalStatsDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileReplicationHistoricalStatsDetails):
            return True

        return self.to_dict() != other.to_dict()
