# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class SystemInfoDetailVer2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'version': 'str',
        'version_history': 'list[VersionHistoryInfo]',
        'serialno': 'str',
        'model': 'str',
        'uptime': 'str',
        'uptime_secs': 'int',
        'admin_email': 'str',
        'admin_host': 'str',
        'mem_size': 'int',
        'time_zone': 'str',
        'physical_capacity': 'Capacity',
        'logical_capacity': 'Capacity',
        'compression_factor': 'float',
        'capacity_usage_details': 'list[CapacityUsageDetails]',
        'license': 'list[LicenseInfo]',
        'location': 'str',
        'uuid': 'str',
        'current_epoch': 'int',
        'partitions': 'Partitions',
        'storage_policy': 'StoragePolicy',
        'compute_policy': 'ComputePolicy',
        'adopted_node_id': 'int',
        'cluster_deploy': 'ClusterInfo',
        'cluster_adopt': 'ClusterInfo',
        'pphrase_info': 'PphraseInfo',
        'controller_type': 'ClusterType',
        'cluster_id': 'str',
        'power_action_info': 'list[PowerActionInfo]',
        'headswap_action_info': 'HeadswapResultInfo',
        'disaster_recovery_config_info': 'list[DrConfigInfo]',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'version': 'version',
        'version_history': 'version_history',
        'serialno': 'serialno',
        'model': 'model',
        'uptime': 'uptime',
        'uptime_secs': 'uptime_secs',
        'admin_email': 'admin_email',
        'admin_host': 'admin_host',
        'mem_size': 'mem_size',
        'time_zone': 'time_zone',
        'physical_capacity': 'physical_capacity',
        'logical_capacity': 'logical_capacity',
        'compression_factor': 'compression_factor',
        'capacity_usage_details': 'capacity_usage_details',
        'license': 'license',
        'location': 'location',
        'uuid': 'uuid',
        'current_epoch': 'current_epoch',
        'partitions': 'partitions',
        'storage_policy': 'storage_policy',
        'compute_policy': 'compute_policy',
        'adopted_node_id': 'adopted_node_id',
        'cluster_deploy': 'cluster_deploy',
        'cluster_adopt': 'cluster_adopt',
        'pphrase_info': 'pphrase_info',
        'controller_type': 'controller_type',
        'cluster_id': 'cluster_id',
        'power_action_info': 'power_action_info',
        'headswap_action_info': 'headswap_action_info',
        'disaster_recovery_config_info': 'disaster_recovery_config_info',
        'link': 'link'
    }

    def __init__(self, name=None, type=None, version=None, version_history=None, serialno=None, model=None, uptime=None, uptime_secs=None, admin_email=None, admin_host=None, mem_size=None, time_zone=None, physical_capacity=None, logical_capacity=None, compression_factor=None, capacity_usage_details=None, license=None, location=None, uuid=None, current_epoch=None, partitions=None, storage_policy=None, compute_policy=None, adopted_node_id=None, cluster_deploy=None, cluster_adopt=None, pphrase_info=None, controller_type=None, cluster_id=None, power_action_info=None, headswap_action_info=None, disaster_recovery_config_info=None, link=None, _configuration=None):  # noqa: E501
        """SystemInfoDetailVer2 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._type = None
        self._version = None
        self._version_history = None
        self._serialno = None
        self._model = None
        self._uptime = None
        self._uptime_secs = None
        self._admin_email = None
        self._admin_host = None
        self._mem_size = None
        self._time_zone = None
        self._physical_capacity = None
        self._logical_capacity = None
        self._compression_factor = None
        self._capacity_usage_details = None
        self._license = None
        self._location = None
        self._uuid = None
        self._current_epoch = None
        self._partitions = None
        self._storage_policy = None
        self._compute_policy = None
        self._adopted_node_id = None
        self._cluster_deploy = None
        self._cluster_adopt = None
        self._pphrase_info = None
        self._controller_type = None
        self._cluster_id = None
        self._power_action_info = None
        self._headswap_action_info = None
        self._disaster_recovery_config_info = None
        self._link = None
        self.discriminator = None

        self.name = name
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if version_history is not None:
            self.version_history = version_history
        if serialno is not None:
            self.serialno = serialno
        if model is not None:
            self.model = model
        if uptime is not None:
            self.uptime = uptime
        if uptime_secs is not None:
            self.uptime_secs = uptime_secs
        if admin_email is not None:
            self.admin_email = admin_email
        if admin_host is not None:
            self.admin_host = admin_host
        if mem_size is not None:
            self.mem_size = mem_size
        if time_zone is not None:
            self.time_zone = time_zone
        if physical_capacity is not None:
            self.physical_capacity = physical_capacity
        if logical_capacity is not None:
            self.logical_capacity = logical_capacity
        if compression_factor is not None:
            self.compression_factor = compression_factor
        if capacity_usage_details is not None:
            self.capacity_usage_details = capacity_usage_details
        if license is not None:
            self.license = license
        if location is not None:
            self.location = location
        if uuid is not None:
            self.uuid = uuid
        if current_epoch is not None:
            self.current_epoch = current_epoch
        if partitions is not None:
            self.partitions = partitions
        if storage_policy is not None:
            self.storage_policy = storage_policy
        if compute_policy is not None:
            self.compute_policy = compute_policy
        if adopted_node_id is not None:
            self.adopted_node_id = adopted_node_id
        if cluster_deploy is not None:
            self.cluster_deploy = cluster_deploy
        if cluster_adopt is not None:
            self.cluster_adopt = cluster_adopt
        if pphrase_info is not None:
            self.pphrase_info = pphrase_info
        if controller_type is not None:
            self.controller_type = controller_type
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if power_action_info is not None:
            self.power_action_info = power_action_info
        if headswap_action_info is not None:
            self.headswap_action_info = headswap_action_info
        if disaster_recovery_config_info is not None:
            self.disaster_recovery_config_info = disaster_recovery_config_info
        if link is not None:
            self.link = link

    @property
    def name(self):
        """Gets the name of this SystemInfoDetailVer2.  # noqa: E501


        :return: The name of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemInfoDetailVer2.


        :param name: The name of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this SystemInfoDetailVer2.  # noqa: E501


        :return: The type of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemInfoDetailVer2.


        :param type: The type of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this SystemInfoDetailVer2.  # noqa: E501


        :return: The version of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInfoDetailVer2.


        :param version: The version of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def version_history(self):
        """Gets the version_history of this SystemInfoDetailVer2.  # noqa: E501

        List of historical versions  # noqa: E501

        :return: The version_history of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: list[VersionHistoryInfo]
        """
        return self._version_history

    @version_history.setter
    def version_history(self, version_history):
        """Sets the version_history of this SystemInfoDetailVer2.

        List of historical versions  # noqa: E501

        :param version_history: The version_history of this SystemInfoDetailVer2.  # noqa: E501
        :type: list[VersionHistoryInfo]
        """

        self._version_history = version_history

    @property
    def serialno(self):
        """Gets the serialno of this SystemInfoDetailVer2.  # noqa: E501


        :return: The serialno of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._serialno

    @serialno.setter
    def serialno(self, serialno):
        """Sets the serialno of this SystemInfoDetailVer2.


        :param serialno: The serialno of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._serialno = serialno

    @property
    def model(self):
        """Gets the model of this SystemInfoDetailVer2.  # noqa: E501


        :return: The model of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SystemInfoDetailVer2.


        :param model: The model of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def uptime(self):
        """Gets the uptime of this SystemInfoDetailVer2.  # noqa: E501


        :return: The uptime of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this SystemInfoDetailVer2.


        :param uptime: The uptime of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._uptime = uptime

    @property
    def uptime_secs(self):
        """Gets the uptime_secs of this SystemInfoDetailVer2.  # noqa: E501


        :return: The uptime_secs of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: int
        """
        return self._uptime_secs

    @uptime_secs.setter
    def uptime_secs(self, uptime_secs):
        """Sets the uptime_secs of this SystemInfoDetailVer2.


        :param uptime_secs: The uptime_secs of this SystemInfoDetailVer2.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                uptime_secs is not None and uptime_secs < 0):  # noqa: E501
            raise ValueError("Invalid value for `uptime_secs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._uptime_secs = uptime_secs

    @property
    def admin_email(self):
        """Gets the admin_email of this SystemInfoDetailVer2.  # noqa: E501


        :return: The admin_email of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._admin_email

    @admin_email.setter
    def admin_email(self, admin_email):
        """Sets the admin_email of this SystemInfoDetailVer2.


        :param admin_email: The admin_email of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._admin_email = admin_email

    @property
    def admin_host(self):
        """Gets the admin_host of this SystemInfoDetailVer2.  # noqa: E501


        :return: The admin_host of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._admin_host

    @admin_host.setter
    def admin_host(self, admin_host):
        """Sets the admin_host of this SystemInfoDetailVer2.


        :param admin_host: The admin_host of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._admin_host = admin_host

    @property
    def mem_size(self):
        """Gets the mem_size of this SystemInfoDetailVer2.  # noqa: E501


        :return: The mem_size of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: int
        """
        return self._mem_size

    @mem_size.setter
    def mem_size(self, mem_size):
        """Sets the mem_size of this SystemInfoDetailVer2.


        :param mem_size: The mem_size of this SystemInfoDetailVer2.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                mem_size is not None and mem_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `mem_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mem_size = mem_size

    @property
    def time_zone(self):
        """Gets the time_zone of this SystemInfoDetailVer2.  # noqa: E501


        :return: The time_zone of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this SystemInfoDetailVer2.


        :param time_zone: The time_zone of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def physical_capacity(self):
        """Gets the physical_capacity of this SystemInfoDetailVer2.  # noqa: E501


        :return: The physical_capacity of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: Capacity
        """
        return self._physical_capacity

    @physical_capacity.setter
    def physical_capacity(self, physical_capacity):
        """Sets the physical_capacity of this SystemInfoDetailVer2.


        :param physical_capacity: The physical_capacity of this SystemInfoDetailVer2.  # noqa: E501
        :type: Capacity
        """

        self._physical_capacity = physical_capacity

    @property
    def logical_capacity(self):
        """Gets the logical_capacity of this SystemInfoDetailVer2.  # noqa: E501


        :return: The logical_capacity of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: Capacity
        """
        return self._logical_capacity

    @logical_capacity.setter
    def logical_capacity(self, logical_capacity):
        """Sets the logical_capacity of this SystemInfoDetailVer2.


        :param logical_capacity: The logical_capacity of this SystemInfoDetailVer2.  # noqa: E501
        :type: Capacity
        """

        self._logical_capacity = logical_capacity

    @property
    def compression_factor(self):
        """Gets the compression_factor of this SystemInfoDetailVer2.  # noqa: E501


        :return: The compression_factor of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: float
        """
        return self._compression_factor

    @compression_factor.setter
    def compression_factor(self, compression_factor):
        """Sets the compression_factor of this SystemInfoDetailVer2.


        :param compression_factor: The compression_factor of this SystemInfoDetailVer2.  # noqa: E501
        :type: float
        """

        self._compression_factor = compression_factor

    @property
    def capacity_usage_details(self):
        """Gets the capacity_usage_details of this SystemInfoDetailVer2.  # noqa: E501

        include tier information  # noqa: E501

        :return: The capacity_usage_details of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: list[CapacityUsageDetails]
        """
        return self._capacity_usage_details

    @capacity_usage_details.setter
    def capacity_usage_details(self, capacity_usage_details):
        """Sets the capacity_usage_details of this SystemInfoDetailVer2.

        include tier information  # noqa: E501

        :param capacity_usage_details: The capacity_usage_details of this SystemInfoDetailVer2.  # noqa: E501
        :type: list[CapacityUsageDetails]
        """

        self._capacity_usage_details = capacity_usage_details

    @property
    def license(self):
        """Gets the license of this SystemInfoDetailVer2.  # noqa: E501


        :return: The license of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: list[LicenseInfo]
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this SystemInfoDetailVer2.


        :param license: The license of this SystemInfoDetailVer2.  # noqa: E501
        :type: list[LicenseInfo]
        """

        self._license = license

    @property
    def location(self):
        """Gets the location of this SystemInfoDetailVer2.  # noqa: E501


        :return: The location of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SystemInfoDetailVer2.


        :param location: The location of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def uuid(self):
        """Gets the uuid of this SystemInfoDetailVer2.  # noqa: E501


        :return: The uuid of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SystemInfoDetailVer2.


        :param uuid: The uuid of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def current_epoch(self):
        """Gets the current_epoch of this SystemInfoDetailVer2.  # noqa: E501


        :return: The current_epoch of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: int
        """
        return self._current_epoch

    @current_epoch.setter
    def current_epoch(self, current_epoch):
        """Sets the current_epoch of this SystemInfoDetailVer2.


        :param current_epoch: The current_epoch of this SystemInfoDetailVer2.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                current_epoch is not None and current_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `current_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current_epoch = current_epoch

    @property
    def partitions(self):
        """Gets the partitions of this SystemInfoDetailVer2.  # noqa: E501


        :return: The partitions of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: Partitions
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this SystemInfoDetailVer2.


        :param partitions: The partitions of this SystemInfoDetailVer2.  # noqa: E501
        :type: Partitions
        """

        self._partitions = partitions

    @property
    def storage_policy(self):
        """Gets the storage_policy of this SystemInfoDetailVer2.  # noqa: E501


        :return: The storage_policy of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: StoragePolicy
        """
        return self._storage_policy

    @storage_policy.setter
    def storage_policy(self, storage_policy):
        """Sets the storage_policy of this SystemInfoDetailVer2.


        :param storage_policy: The storage_policy of this SystemInfoDetailVer2.  # noqa: E501
        :type: StoragePolicy
        """

        self._storage_policy = storage_policy

    @property
    def compute_policy(self):
        """Gets the compute_policy of this SystemInfoDetailVer2.  # noqa: E501


        :return: The compute_policy of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: ComputePolicy
        """
        return self._compute_policy

    @compute_policy.setter
    def compute_policy(self, compute_policy):
        """Sets the compute_policy of this SystemInfoDetailVer2.


        :param compute_policy: The compute_policy of this SystemInfoDetailVer2.  # noqa: E501
        :type: ComputePolicy
        """

        self._compute_policy = compute_policy

    @property
    def adopted_node_id(self):
        """Gets the adopted_node_id of this SystemInfoDetailVer2.  # noqa: E501


        :return: The adopted_node_id of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: int
        """
        return self._adopted_node_id

    @adopted_node_id.setter
    def adopted_node_id(self, adopted_node_id):
        """Sets the adopted_node_id of this SystemInfoDetailVer2.


        :param adopted_node_id: The adopted_node_id of this SystemInfoDetailVer2.  # noqa: E501
        :type: int
        """

        self._adopted_node_id = adopted_node_id

    @property
    def cluster_deploy(self):
        """Gets the cluster_deploy of this SystemInfoDetailVer2.  # noqa: E501

        cluster deploy information  # noqa: E501

        :return: The cluster_deploy of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: ClusterInfo
        """
        return self._cluster_deploy

    @cluster_deploy.setter
    def cluster_deploy(self, cluster_deploy):
        """Sets the cluster_deploy of this SystemInfoDetailVer2.

        cluster deploy information  # noqa: E501

        :param cluster_deploy: The cluster_deploy of this SystemInfoDetailVer2.  # noqa: E501
        :type: ClusterInfo
        """

        self._cluster_deploy = cluster_deploy

    @property
    def cluster_adopt(self):
        """Gets the cluster_adopt of this SystemInfoDetailVer2.  # noqa: E501

        cluster adopt information  # noqa: E501

        :return: The cluster_adopt of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: ClusterInfo
        """
        return self._cluster_adopt

    @cluster_adopt.setter
    def cluster_adopt(self, cluster_adopt):
        """Sets the cluster_adopt of this SystemInfoDetailVer2.

        cluster adopt information  # noqa: E501

        :param cluster_adopt: The cluster_adopt of this SystemInfoDetailVer2.  # noqa: E501
        :type: ClusterInfo
        """

        self._cluster_adopt = cluster_adopt

    @property
    def pphrase_info(self):
        """Gets the pphrase_info of this SystemInfoDetailVer2.  # noqa: E501


        :return: The pphrase_info of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: PphraseInfo
        """
        return self._pphrase_info

    @pphrase_info.setter
    def pphrase_info(self, pphrase_info):
        """Sets the pphrase_info of this SystemInfoDetailVer2.


        :param pphrase_info: The pphrase_info of this SystemInfoDetailVer2.  # noqa: E501
        :type: PphraseInfo
        """

        self._pphrase_info = pphrase_info

    @property
    def controller_type(self):
        """Gets the controller_type of this SystemInfoDetailVer2.  # noqa: E501


        :return: The controller_type of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: ClusterType
        """
        return self._controller_type

    @controller_type.setter
    def controller_type(self, controller_type):
        """Sets the controller_type of this SystemInfoDetailVer2.


        :param controller_type: The controller_type of this SystemInfoDetailVer2.  # noqa: E501
        :type: ClusterType
        """

        self._controller_type = controller_type

    @property
    def cluster_id(self):
        """Gets the cluster_id of this SystemInfoDetailVer2.  # noqa: E501


        :return: The cluster_id of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this SystemInfoDetailVer2.


        :param cluster_id: The cluster_id of this SystemInfoDetailVer2.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def power_action_info(self):
        """Gets the power_action_info of this SystemInfoDetailVer2.  # noqa: E501


        :return: The power_action_info of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: list[PowerActionInfo]
        """
        return self._power_action_info

    @power_action_info.setter
    def power_action_info(self, power_action_info):
        """Sets the power_action_info of this SystemInfoDetailVer2.


        :param power_action_info: The power_action_info of this SystemInfoDetailVer2.  # noqa: E501
        :type: list[PowerActionInfo]
        """

        self._power_action_info = power_action_info

    @property
    def headswap_action_info(self):
        """Gets the headswap_action_info of this SystemInfoDetailVer2.  # noqa: E501


        :return: The headswap_action_info of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: HeadswapResultInfo
        """
        return self._headswap_action_info

    @headswap_action_info.setter
    def headswap_action_info(self, headswap_action_info):
        """Sets the headswap_action_info of this SystemInfoDetailVer2.


        :param headswap_action_info: The headswap_action_info of this SystemInfoDetailVer2.  # noqa: E501
        :type: HeadswapResultInfo
        """

        self._headswap_action_info = headswap_action_info

    @property
    def disaster_recovery_config_info(self):
        """Gets the disaster_recovery_config_info of this SystemInfoDetailVer2.  # noqa: E501

        Disaster recovery configuration information  # noqa: E501

        :return: The disaster_recovery_config_info of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: list[DrConfigInfo]
        """
        return self._disaster_recovery_config_info

    @disaster_recovery_config_info.setter
    def disaster_recovery_config_info(self, disaster_recovery_config_info):
        """Sets the disaster_recovery_config_info of this SystemInfoDetailVer2.

        Disaster recovery configuration information  # noqa: E501

        :param disaster_recovery_config_info: The disaster_recovery_config_info of this SystemInfoDetailVer2.  # noqa: E501
        :type: list[DrConfigInfo]
        """

        self._disaster_recovery_config_info = disaster_recovery_config_info

    @property
    def link(self):
        """Gets the link of this SystemInfoDetailVer2.  # noqa: E501


        :return: The link of this SystemInfoDetailVer2.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this SystemInfoDetailVer2.


        :param link: The link of this SystemInfoDetailVer2.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInfoDetailVer2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInfoDetailVer2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemInfoDetailVer2):
            return True

        return self.to_dict() != other.to_dict()
