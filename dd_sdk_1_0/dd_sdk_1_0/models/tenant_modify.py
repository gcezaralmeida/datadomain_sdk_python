# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class TenantModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation': 'TenantModifyOperation',
        'name': 'str',
        'tenant_unit_names': 'list[str]'
    }

    attribute_map = {
        'operation': 'operation',
        'name': 'name',
        'tenant_unit_names': 'tenant_unit_names'
    }

    def __init__(self, operation=None, name=None, tenant_unit_names=None, _configuration=None):  # noqa: E501
        """TenantModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._operation = None
        self._name = None
        self._tenant_unit_names = None
        self.discriminator = None

        self.operation = operation
        if name is not None:
            self.name = name
        if tenant_unit_names is not None:
            self.tenant_unit_names = tenant_unit_names

    @property
    def operation(self):
        """Gets the operation of this TenantModify.  # noqa: E501


        :return: The operation of this TenantModify.  # noqa: E501
        :rtype: TenantModifyOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this TenantModify.


        :param operation: The operation of this TenantModify.  # noqa: E501
        :type: TenantModifyOperation
        """
        if self._configuration.client_side_validation and operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def name(self):
        """Gets the name of this TenantModify.  # noqa: E501

        new Tenant name; used with \"rename\" operation  # noqa: E501

        :return: The name of this TenantModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TenantModify.

        new Tenant name; used with \"rename\" operation  # noqa: E501

        :param name: The name of this TenantModify.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tenant_unit_names(self):
        """Gets the tenant_unit_names of this TenantModify.  # noqa: E501

        list of Tenant Unit names for assign/unassign operations  # noqa: E501

        :return: The tenant_unit_names of this TenantModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._tenant_unit_names

    @tenant_unit_names.setter
    def tenant_unit_names(self, tenant_unit_names):
        """Sets the tenant_unit_names of this TenantModify.

        list of Tenant Unit names for assign/unassign operations  # noqa: E501

        :param tenant_unit_names: The tenant_unit_names of this TenantModify.  # noqa: E501
        :type: list[str]
        """

        self._tenant_unit_names = tenant_unit_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TenantModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TenantModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TenantModify):
            return True

        return self.to_dict() != other.to_dict()
