# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class CleaningDatesInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_epoch': 'int',
        'end_epoch': 'int',
        'success_epoch': 'int'
    }

    attribute_map = {
        'start_epoch': 'start_epoch',
        'end_epoch': 'end_epoch',
        'success_epoch': 'success_epoch'
    }

    def __init__(self, start_epoch=None, end_epoch=None, success_epoch=None, _configuration=None):  # noqa: E501
        """CleaningDatesInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start_epoch = None
        self._end_epoch = None
        self._success_epoch = None
        self.discriminator = None

        if start_epoch is not None:
            self.start_epoch = start_epoch
        if end_epoch is not None:
            self.end_epoch = end_epoch
        if success_epoch is not None:
            self.success_epoch = success_epoch

    @property
    def start_epoch(self):
        """Gets the start_epoch of this CleaningDatesInfo.  # noqa: E501


        :return: The start_epoch of this CleaningDatesInfo.  # noqa: E501
        :rtype: int
        """
        return self._start_epoch

    @start_epoch.setter
    def start_epoch(self, start_epoch):
        """Sets the start_epoch of this CleaningDatesInfo.


        :param start_epoch: The start_epoch of this CleaningDatesInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                start_epoch is not None and start_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `start_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_epoch = start_epoch

    @property
    def end_epoch(self):
        """Gets the end_epoch of this CleaningDatesInfo.  # noqa: E501


        :return: The end_epoch of this CleaningDatesInfo.  # noqa: E501
        :rtype: int
        """
        return self._end_epoch

    @end_epoch.setter
    def end_epoch(self, end_epoch):
        """Sets the end_epoch of this CleaningDatesInfo.


        :param end_epoch: The end_epoch of this CleaningDatesInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                end_epoch is not None and end_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `end_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_epoch = end_epoch

    @property
    def success_epoch(self):
        """Gets the success_epoch of this CleaningDatesInfo.  # noqa: E501


        :return: The success_epoch of this CleaningDatesInfo.  # noqa: E501
        :rtype: int
        """
        return self._success_epoch

    @success_epoch.setter
    def success_epoch(self, success_epoch):
        """Sets the success_epoch of this CleaningDatesInfo.


        :param success_epoch: The success_epoch of this CleaningDatesInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                success_epoch is not None and success_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `success_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._success_epoch = success_epoch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CleaningDatesInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CleaningDatesInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CleaningDatesInfo):
            return True

        return self.to_dict() != other.to_dict()
