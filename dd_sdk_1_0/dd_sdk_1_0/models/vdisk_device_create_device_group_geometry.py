# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class VdiskDeviceCreateDeviceGroupGeometry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pool_name': 'str',
        'devgrp_guid': 'str',
        'devgrp_name': 'str',
        'device_geometry': 'list[VdiskDeviceCreateDeviceGroupSize]',
        'initiator_list': 'InitiatorList'
    }

    attribute_map = {
        'pool_name': 'pool_name',
        'devgrp_guid': 'devgrp_guid',
        'devgrp_name': 'devgrp_name',
        'device_geometry': 'device_geometry',
        'initiator_list': 'initiator_list'
    }

    def __init__(self, pool_name=None, devgrp_guid=None, devgrp_name=None, device_geometry=None, initiator_list=None, _configuration=None):  # noqa: E501
        """VdiskDeviceCreateDeviceGroupGeometry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._pool_name = None
        self._devgrp_guid = None
        self._devgrp_name = None
        self._device_geometry = None
        self._initiator_list = None
        self.discriminator = None

        if pool_name is not None:
            self.pool_name = pool_name
        if devgrp_guid is not None:
            self.devgrp_guid = devgrp_guid
        if devgrp_name is not None:
            self.devgrp_name = devgrp_name
        self.device_geometry = device_geometry
        if initiator_list is not None:
            self.initiator_list = initiator_list

    @property
    def pool_name(self):
        """Gets the pool_name of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501


        :return: The pool_name of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this VdiskDeviceCreateDeviceGroupGeometry.


        :param pool_name: The pool_name of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def devgrp_guid(self):
        """Gets the devgrp_guid of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501


        :return: The devgrp_guid of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :rtype: str
        """
        return self._devgrp_guid

    @devgrp_guid.setter
    def devgrp_guid(self, devgrp_guid):
        """Sets the devgrp_guid of this VdiskDeviceCreateDeviceGroupGeometry.


        :param devgrp_guid: The devgrp_guid of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :type: str
        """

        self._devgrp_guid = devgrp_guid

    @property
    def devgrp_name(self):
        """Gets the devgrp_name of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501


        :return: The devgrp_name of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :rtype: str
        """
        return self._devgrp_name

    @devgrp_name.setter
    def devgrp_name(self, devgrp_name):
        """Sets the devgrp_name of this VdiskDeviceCreateDeviceGroupGeometry.


        :param devgrp_name: The devgrp_name of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :type: str
        """

        self._devgrp_name = devgrp_name

    @property
    def device_geometry(self):
        """Gets the device_geometry of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501


        :return: The device_geometry of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :rtype: list[VdiskDeviceCreateDeviceGroupSize]
        """
        return self._device_geometry

    @device_geometry.setter
    def device_geometry(self, device_geometry):
        """Sets the device_geometry of this VdiskDeviceCreateDeviceGroupGeometry.


        :param device_geometry: The device_geometry of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :type: list[VdiskDeviceCreateDeviceGroupSize]
        """
        if self._configuration.client_side_validation and device_geometry is None:
            raise ValueError("Invalid value for `device_geometry`, must not be `None`")  # noqa: E501

        self._device_geometry = device_geometry

    @property
    def initiator_list(self):
        """Gets the initiator_list of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501


        :return: The initiator_list of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :rtype: InitiatorList
        """
        return self._initiator_list

    @initiator_list.setter
    def initiator_list(self, initiator_list):
        """Sets the initiator_list of this VdiskDeviceCreateDeviceGroupGeometry.


        :param initiator_list: The initiator_list of this VdiskDeviceCreateDeviceGroupGeometry.  # noqa: E501
        :type: InitiatorList
        """

        self._initiator_list = initiator_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VdiskDeviceCreateDeviceGroupGeometry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VdiskDeviceCreateDeviceGroupGeometry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VdiskDeviceCreateDeviceGroupGeometry):
            return True

        return self.to_dict() != other.to_dict()
