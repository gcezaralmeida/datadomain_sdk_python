# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class AlibabaCloudRegion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CN_QINGDAO = "oss_cn_qingdao"
    CN_BEIJING = "oss_cn_beijing"
    CN_ZHANGJIAKOU = "oss_cn_zhangjiakou"
    CN_HUHEHAOTE = "oss_cn_huhehaote"
    CN_HANGZHOU = "oss_cn_hangzhou"
    CN_SHANGHAI = "oss_cn_shanghai"
    CN_SHENZHEN = "oss_cn_shenzhen"
    CN_HONGKONG = "oss_cn_hongkong"
    AP_SOUTHEAST_1 = "oss_ap_southeast_1"
    AP_SOUTHEAST_2 = "oss_ap_southeast_2"
    AP_SOUTHEAST_3 = "oss_ap_southeast_3"
    AP_SOUTHEAST_5 = "oss_ap_southeast_5"
    AP_SOUTH_1 = "oss_ap_south_1"
    AP_NORTHEAST_1 = "oss_ap_northeast_1"
    US_WEST_1 = "oss_us_west_1"
    US_EAST_1 = "oss_us_east_1"
    EU_CENTRAL_1 = "oss_eu_central_1"
    ME_EAST_1 = "oss_me_east_1"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """AlibabaCloudRegion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlibabaCloudRegion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlibabaCloudRegion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlibabaCloudRegion):
            return True

        return self.to_dict() != other.to_dict()
