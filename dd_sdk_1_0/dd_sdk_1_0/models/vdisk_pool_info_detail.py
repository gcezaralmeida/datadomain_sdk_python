# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class VdiskPoolInfoDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'guid': 'str',
        'name': 'str',
        'user': 'str',
        'tenant_unit': 'str',
        'quota_config': 'QuotaConfig',
        'logical_capacity': 'Capacity',
        'device_count': 'int',
        'devgrp_count': 'int',
        '_property': 'list[KeyValuePair]',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'id': 'id',
        'guid': 'guid',
        'name': 'name',
        'user': 'user',
        'tenant_unit': 'tenant_unit',
        'quota_config': 'quota_config',
        'logical_capacity': 'logical_capacity',
        'device_count': 'device_count',
        'devgrp_count': 'devgrp_count',
        '_property': 'property',
        'link': 'link'
    }

    def __init__(self, id=None, guid=None, name=None, user=None, tenant_unit=None, quota_config=None, logical_capacity=None, device_count=None, devgrp_count=None, _property=None, link=None, _configuration=None):  # noqa: E501
        """VdiskPoolInfoDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._guid = None
        self._name = None
        self._user = None
        self._tenant_unit = None
        self._quota_config = None
        self._logical_capacity = None
        self._device_count = None
        self._devgrp_count = None
        self.__property = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.guid = guid
        if name is not None:
            self.name = name
        if user is not None:
            self.user = user
        if tenant_unit is not None:
            self.tenant_unit = tenant_unit
        if quota_config is not None:
            self.quota_config = quota_config
        if logical_capacity is not None:
            self.logical_capacity = logical_capacity
        if device_count is not None:
            self.device_count = device_count
        if devgrp_count is not None:
            self.devgrp_count = devgrp_count
        if _property is not None:
            self._property = _property
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this VdiskPoolInfoDetail.  # noqa: E501

        urlencoded GUID  # noqa: E501

        :return: The id of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VdiskPoolInfoDetail.

        urlencoded GUID  # noqa: E501

        :param id: The id of this VdiskPoolInfoDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def guid(self):
        """Gets the guid of this VdiskPoolInfoDetail.  # noqa: E501


        :return: The guid of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this VdiskPoolInfoDetail.


        :param guid: The guid of this VdiskPoolInfoDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")  # noqa: E501

        self._guid = guid

    @property
    def name(self):
        """Gets the name of this VdiskPoolInfoDetail.  # noqa: E501


        :return: The name of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VdiskPoolInfoDetail.


        :param name: The name of this VdiskPoolInfoDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user(self):
        """Gets the user of this VdiskPoolInfoDetail.  # noqa: E501

        assigend user of this pool  # noqa: E501

        :return: The user of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this VdiskPoolInfoDetail.

        assigend user of this pool  # noqa: E501

        :param user: The user of this VdiskPoolInfoDetail.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def tenant_unit(self):
        """Gets the tenant_unit of this VdiskPoolInfoDetail.  # noqa: E501


        :return: The tenant_unit of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._tenant_unit

    @tenant_unit.setter
    def tenant_unit(self, tenant_unit):
        """Sets the tenant_unit of this VdiskPoolInfoDetail.


        :param tenant_unit: The tenant_unit of this VdiskPoolInfoDetail.  # noqa: E501
        :type: str
        """

        self._tenant_unit = tenant_unit

    @property
    def quota_config(self):
        """Gets the quota_config of this VdiskPoolInfoDetail.  # noqa: E501


        :return: The quota_config of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: QuotaConfig
        """
        return self._quota_config

    @quota_config.setter
    def quota_config(self, quota_config):
        """Sets the quota_config of this VdiskPoolInfoDetail.


        :param quota_config: The quota_config of this VdiskPoolInfoDetail.  # noqa: E501
        :type: QuotaConfig
        """

        self._quota_config = quota_config

    @property
    def logical_capacity(self):
        """Gets the logical_capacity of this VdiskPoolInfoDetail.  # noqa: E501


        :return: The logical_capacity of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: Capacity
        """
        return self._logical_capacity

    @logical_capacity.setter
    def logical_capacity(self, logical_capacity):
        """Sets the logical_capacity of this VdiskPoolInfoDetail.


        :param logical_capacity: The logical_capacity of this VdiskPoolInfoDetail.  # noqa: E501
        :type: Capacity
        """

        self._logical_capacity = logical_capacity

    @property
    def device_count(self):
        """Gets the device_count of this VdiskPoolInfoDetail.  # noqa: E501


        :return: The device_count of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this VdiskPoolInfoDetail.


        :param device_count: The device_count of this VdiskPoolInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                device_count is not None and device_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `device_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._device_count = device_count

    @property
    def devgrp_count(self):
        """Gets the devgrp_count of this VdiskPoolInfoDetail.  # noqa: E501

        device gourp count  # noqa: E501

        :return: The devgrp_count of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._devgrp_count

    @devgrp_count.setter
    def devgrp_count(self, devgrp_count):
        """Sets the devgrp_count of this VdiskPoolInfoDetail.

        device gourp count  # noqa: E501

        :param devgrp_count: The devgrp_count of this VdiskPoolInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                devgrp_count is not None and devgrp_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `devgrp_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._devgrp_count = devgrp_count

    @property
    def _property(self):
        """Gets the _property of this VdiskPoolInfoDetail.  # noqa: E501


        :return: The _property of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this VdiskPoolInfoDetail.


        :param _property: The _property of this VdiskPoolInfoDetail.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self.__property = _property

    @property
    def link(self):
        """Gets the link of this VdiskPoolInfoDetail.  # noqa: E501


        :return: The link of this VdiskPoolInfoDetail.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this VdiskPoolInfoDetail.


        :param link: The link of this VdiskPoolInfoDetail.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VdiskPoolInfoDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VdiskPoolInfoDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VdiskPoolInfoDetail):
            return True

        return self.to_dict() != other.to_dict()
