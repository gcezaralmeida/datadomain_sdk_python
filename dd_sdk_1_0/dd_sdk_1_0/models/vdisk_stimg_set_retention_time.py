# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class VdiskStimgSetRetentionTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_absolute_time': 'bool',
        'retention_time': 'int'
    }

    attribute_map = {
        'use_absolute_time': 'use_absolute_time',
        'retention_time': 'retention_time'
    }

    def __init__(self, use_absolute_time=None, retention_time=None, _configuration=None):  # noqa: E501
        """VdiskStimgSetRetentionTime - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._use_absolute_time = None
        self._retention_time = None
        self.discriminator = None

        if use_absolute_time is not None:
            self.use_absolute_time = use_absolute_time
        self.retention_time = retention_time

    @property
    def use_absolute_time(self):
        """Gets the use_absolute_time of this VdiskStimgSetRetentionTime.  # noqa: E501


        :return: The use_absolute_time of this VdiskStimgSetRetentionTime.  # noqa: E501
        :rtype: bool
        """
        return self._use_absolute_time

    @use_absolute_time.setter
    def use_absolute_time(self, use_absolute_time):
        """Sets the use_absolute_time of this VdiskStimgSetRetentionTime.


        :param use_absolute_time: The use_absolute_time of this VdiskStimgSetRetentionTime.  # noqa: E501
        :type: bool
        """

        self._use_absolute_time = use_absolute_time

    @property
    def retention_time(self):
        """Gets the retention_time of this VdiskStimgSetRetentionTime.  # noqa: E501


        :return: The retention_time of this VdiskStimgSetRetentionTime.  # noqa: E501
        :rtype: int
        """
        return self._retention_time

    @retention_time.setter
    def retention_time(self, retention_time):
        """Sets the retention_time of this VdiskStimgSetRetentionTime.


        :param retention_time: The retention_time of this VdiskStimgSetRetentionTime.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and retention_time is None:
            raise ValueError("Invalid value for `retention_time`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                retention_time is not None and retention_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `retention_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retention_time = retention_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VdiskStimgSetRetentionTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VdiskStimgSetRetentionTime):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VdiskStimgSetRetentionTime):
            return True

        return self.to_dict() != other.to_dict()
