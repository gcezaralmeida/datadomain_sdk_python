# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class KeyManagerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_manager_server': 'HostStr',
        'key_manager_port': 'PortNumber',
        'key_manager_fips_mode': 'KeyManagerFipsMode',
        'key_manager_key_class': 'str',
        'key_manager_server_type': 'KeyManagerServerType',
        'key_manager_kmip_user': 'str',
        'key_rotation_policy': 'KeyManagerKeyRotationPolicy'
    }

    attribute_map = {
        'key_manager_server': 'key_manager_server',
        'key_manager_port': 'key_manager_port',
        'key_manager_fips_mode': 'key_manager_fips_mode',
        'key_manager_key_class': 'key_manager_key_class',
        'key_manager_server_type': 'key_manager_server_type',
        'key_manager_kmip_user': 'key_manager_kmip_user',
        'key_rotation_policy': 'key_rotation_policy'
    }

    def __init__(self, key_manager_server=None, key_manager_port=None, key_manager_fips_mode=None, key_manager_key_class=None, key_manager_server_type=None, key_manager_kmip_user=None, key_rotation_policy=None, _configuration=None):  # noqa: E501
        """KeyManagerInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key_manager_server = None
        self._key_manager_port = None
        self._key_manager_fips_mode = None
        self._key_manager_key_class = None
        self._key_manager_server_type = None
        self._key_manager_kmip_user = None
        self._key_rotation_policy = None
        self.discriminator = None

        if key_manager_server is not None:
            self.key_manager_server = key_manager_server
        if key_manager_port is not None:
            self.key_manager_port = key_manager_port
        if key_manager_fips_mode is not None:
            self.key_manager_fips_mode = key_manager_fips_mode
        if key_manager_key_class is not None:
            self.key_manager_key_class = key_manager_key_class
        if key_manager_server_type is not None:
            self.key_manager_server_type = key_manager_server_type
        if key_manager_kmip_user is not None:
            self.key_manager_kmip_user = key_manager_kmip_user
        if key_rotation_policy is not None:
            self.key_rotation_policy = key_rotation_policy

    @property
    def key_manager_server(self):
        """Gets the key_manager_server of this KeyManagerInfo.  # noqa: E501


        :return: The key_manager_server of this KeyManagerInfo.  # noqa: E501
        :rtype: HostStr
        """
        return self._key_manager_server

    @key_manager_server.setter
    def key_manager_server(self, key_manager_server):
        """Sets the key_manager_server of this KeyManagerInfo.


        :param key_manager_server: The key_manager_server of this KeyManagerInfo.  # noqa: E501
        :type: HostStr
        """

        self._key_manager_server = key_manager_server

    @property
    def key_manager_port(self):
        """Gets the key_manager_port of this KeyManagerInfo.  # noqa: E501


        :return: The key_manager_port of this KeyManagerInfo.  # noqa: E501
        :rtype: PortNumber
        """
        return self._key_manager_port

    @key_manager_port.setter
    def key_manager_port(self, key_manager_port):
        """Sets the key_manager_port of this KeyManagerInfo.


        :param key_manager_port: The key_manager_port of this KeyManagerInfo.  # noqa: E501
        :type: PortNumber
        """

        self._key_manager_port = key_manager_port

    @property
    def key_manager_fips_mode(self):
        """Gets the key_manager_fips_mode of this KeyManagerInfo.  # noqa: E501


        :return: The key_manager_fips_mode of this KeyManagerInfo.  # noqa: E501
        :rtype: KeyManagerFipsMode
        """
        return self._key_manager_fips_mode

    @key_manager_fips_mode.setter
    def key_manager_fips_mode(self, key_manager_fips_mode):
        """Sets the key_manager_fips_mode of this KeyManagerInfo.


        :param key_manager_fips_mode: The key_manager_fips_mode of this KeyManagerInfo.  # noqa: E501
        :type: KeyManagerFipsMode
        """

        self._key_manager_fips_mode = key_manager_fips_mode

    @property
    def key_manager_key_class(self):
        """Gets the key_manager_key_class of this KeyManagerInfo.  # noqa: E501


        :return: The key_manager_key_class of this KeyManagerInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_manager_key_class

    @key_manager_key_class.setter
    def key_manager_key_class(self, key_manager_key_class):
        """Sets the key_manager_key_class of this KeyManagerInfo.


        :param key_manager_key_class: The key_manager_key_class of this KeyManagerInfo.  # noqa: E501
        :type: str
        """

        self._key_manager_key_class = key_manager_key_class

    @property
    def key_manager_server_type(self):
        """Gets the key_manager_server_type of this KeyManagerInfo.  # noqa: E501


        :return: The key_manager_server_type of this KeyManagerInfo.  # noqa: E501
        :rtype: KeyManagerServerType
        """
        return self._key_manager_server_type

    @key_manager_server_type.setter
    def key_manager_server_type(self, key_manager_server_type):
        """Sets the key_manager_server_type of this KeyManagerInfo.


        :param key_manager_server_type: The key_manager_server_type of this KeyManagerInfo.  # noqa: E501
        :type: KeyManagerServerType
        """

        self._key_manager_server_type = key_manager_server_type

    @property
    def key_manager_kmip_user(self):
        """Gets the key_manager_kmip_user of this KeyManagerInfo.  # noqa: E501


        :return: The key_manager_kmip_user of this KeyManagerInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_manager_kmip_user

    @key_manager_kmip_user.setter
    def key_manager_kmip_user(self, key_manager_kmip_user):
        """Sets the key_manager_kmip_user of this KeyManagerInfo.


        :param key_manager_kmip_user: The key_manager_kmip_user of this KeyManagerInfo.  # noqa: E501
        :type: str
        """

        self._key_manager_kmip_user = key_manager_kmip_user

    @property
    def key_rotation_policy(self):
        """Gets the key_rotation_policy of this KeyManagerInfo.  # noqa: E501


        :return: The key_rotation_policy of this KeyManagerInfo.  # noqa: E501
        :rtype: KeyManagerKeyRotationPolicy
        """
        return self._key_rotation_policy

    @key_rotation_policy.setter
    def key_rotation_policy(self, key_rotation_policy):
        """Sets the key_rotation_policy of this KeyManagerInfo.


        :param key_rotation_policy: The key_rotation_policy of this KeyManagerInfo.  # noqa: E501
        :type: KeyManagerKeyRotationPolicy
        """

        self._key_rotation_policy = key_rotation_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyManagerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyManagerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeyManagerInfo):
            return True

        return self.to_dict() != other.to_dict()
