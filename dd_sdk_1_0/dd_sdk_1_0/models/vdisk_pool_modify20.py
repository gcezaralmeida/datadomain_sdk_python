# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class VdiskPoolModify20(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation': 'VdiskPoolModifyOps',
        'pool_rename_request': 'VdiskPoolRename',
        'user_rename_request': 'VdiskPoolUserRename',
        'tenant_unit_set_clear_request': 'VdiskPoolTenantUnitSetClear',
        'quota_config_request': 'VdiskPoolQuotaConfig',
        'kvm_set_clear_request': 'VdiskPoolKvmSetClear'
    }

    attribute_map = {
        'operation': 'operation',
        'pool_rename_request': 'pool_rename_request',
        'user_rename_request': 'user_rename_request',
        'tenant_unit_set_clear_request': 'tenant_unit_set_clear_request',
        'quota_config_request': 'quota_config_request',
        'kvm_set_clear_request': 'kvm_set_clear_request'
    }

    def __init__(self, operation=None, pool_rename_request=None, user_rename_request=None, tenant_unit_set_clear_request=None, quota_config_request=None, kvm_set_clear_request=None, _configuration=None):  # noqa: E501
        """VdiskPoolModify20 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._operation = None
        self._pool_rename_request = None
        self._user_rename_request = None
        self._tenant_unit_set_clear_request = None
        self._quota_config_request = None
        self._kvm_set_clear_request = None
        self.discriminator = None

        self.operation = operation
        if pool_rename_request is not None:
            self.pool_rename_request = pool_rename_request
        if user_rename_request is not None:
            self.user_rename_request = user_rename_request
        if tenant_unit_set_clear_request is not None:
            self.tenant_unit_set_clear_request = tenant_unit_set_clear_request
        if quota_config_request is not None:
            self.quota_config_request = quota_config_request
        if kvm_set_clear_request is not None:
            self.kvm_set_clear_request = kvm_set_clear_request

    @property
    def operation(self):
        """Gets the operation of this VdiskPoolModify20.  # noqa: E501


        :return: The operation of this VdiskPoolModify20.  # noqa: E501
        :rtype: VdiskPoolModifyOps
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this VdiskPoolModify20.


        :param operation: The operation of this VdiskPoolModify20.  # noqa: E501
        :type: VdiskPoolModifyOps
        """
        if self._configuration.client_side_validation and operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def pool_rename_request(self):
        """Gets the pool_rename_request of this VdiskPoolModify20.  # noqa: E501


        :return: The pool_rename_request of this VdiskPoolModify20.  # noqa: E501
        :rtype: VdiskPoolRename
        """
        return self._pool_rename_request

    @pool_rename_request.setter
    def pool_rename_request(self, pool_rename_request):
        """Sets the pool_rename_request of this VdiskPoolModify20.


        :param pool_rename_request: The pool_rename_request of this VdiskPoolModify20.  # noqa: E501
        :type: VdiskPoolRename
        """

        self._pool_rename_request = pool_rename_request

    @property
    def user_rename_request(self):
        """Gets the user_rename_request of this VdiskPoolModify20.  # noqa: E501


        :return: The user_rename_request of this VdiskPoolModify20.  # noqa: E501
        :rtype: VdiskPoolUserRename
        """
        return self._user_rename_request

    @user_rename_request.setter
    def user_rename_request(self, user_rename_request):
        """Sets the user_rename_request of this VdiskPoolModify20.


        :param user_rename_request: The user_rename_request of this VdiskPoolModify20.  # noqa: E501
        :type: VdiskPoolUserRename
        """

        self._user_rename_request = user_rename_request

    @property
    def tenant_unit_set_clear_request(self):
        """Gets the tenant_unit_set_clear_request of this VdiskPoolModify20.  # noqa: E501


        :return: The tenant_unit_set_clear_request of this VdiskPoolModify20.  # noqa: E501
        :rtype: VdiskPoolTenantUnitSetClear
        """
        return self._tenant_unit_set_clear_request

    @tenant_unit_set_clear_request.setter
    def tenant_unit_set_clear_request(self, tenant_unit_set_clear_request):
        """Sets the tenant_unit_set_clear_request of this VdiskPoolModify20.


        :param tenant_unit_set_clear_request: The tenant_unit_set_clear_request of this VdiskPoolModify20.  # noqa: E501
        :type: VdiskPoolTenantUnitSetClear
        """

        self._tenant_unit_set_clear_request = tenant_unit_set_clear_request

    @property
    def quota_config_request(self):
        """Gets the quota_config_request of this VdiskPoolModify20.  # noqa: E501


        :return: The quota_config_request of this VdiskPoolModify20.  # noqa: E501
        :rtype: VdiskPoolQuotaConfig
        """
        return self._quota_config_request

    @quota_config_request.setter
    def quota_config_request(self, quota_config_request):
        """Sets the quota_config_request of this VdiskPoolModify20.


        :param quota_config_request: The quota_config_request of this VdiskPoolModify20.  # noqa: E501
        :type: VdiskPoolQuotaConfig
        """

        self._quota_config_request = quota_config_request

    @property
    def kvm_set_clear_request(self):
        """Gets the kvm_set_clear_request of this VdiskPoolModify20.  # noqa: E501


        :return: The kvm_set_clear_request of this VdiskPoolModify20.  # noqa: E501
        :rtype: VdiskPoolKvmSetClear
        """
        return self._kvm_set_clear_request

    @kvm_set_clear_request.setter
    def kvm_set_clear_request(self, kvm_set_clear_request):
        """Sets the kvm_set_clear_request of this VdiskPoolModify20.


        :param kvm_set_clear_request: The kvm_set_clear_request of this VdiskPoolModify20.  # noqa: E501
        :type: VdiskPoolKvmSetClear
        """

        self._kvm_set_clear_request = kvm_set_clear_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VdiskPoolModify20, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VdiskPoolModify20):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VdiskPoolModify20):
            return True

        return self.to_dict() != other.to_dict()
