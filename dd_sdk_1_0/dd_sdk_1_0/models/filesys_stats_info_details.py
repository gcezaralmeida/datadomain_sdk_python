# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FilesysStatsInfoDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pre_comp_size': 'int',
        'post_comp_size': 'int',
        'global_comp_factor': 'int',
        'local_comp_factor': 'int',
        'total_comp_factor': 'int',
        'percentage': 'int'
    }

    attribute_map = {
        'pre_comp_size': 'pre_comp_size',
        'post_comp_size': 'post_comp_size',
        'global_comp_factor': 'global_comp_factor',
        'local_comp_factor': 'local_comp_factor',
        'total_comp_factor': 'total_comp_factor',
        'percentage': 'percentage'
    }

    def __init__(self, pre_comp_size=None, post_comp_size=None, global_comp_factor=None, local_comp_factor=None, total_comp_factor=None, percentage=None, _configuration=None):  # noqa: E501
        """FilesysStatsInfoDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._pre_comp_size = None
        self._post_comp_size = None
        self._global_comp_factor = None
        self._local_comp_factor = None
        self._total_comp_factor = None
        self._percentage = None
        self.discriminator = None

        if pre_comp_size is not None:
            self.pre_comp_size = pre_comp_size
        if post_comp_size is not None:
            self.post_comp_size = post_comp_size
        if global_comp_factor is not None:
            self.global_comp_factor = global_comp_factor
        if local_comp_factor is not None:
            self.local_comp_factor = local_comp_factor
        if total_comp_factor is not None:
            self.total_comp_factor = total_comp_factor
        if percentage is not None:
            self.percentage = percentage

    @property
    def pre_comp_size(self):
        """Gets the pre_comp_size of this FilesysStatsInfoDetails.  # noqa: E501


        :return: The pre_comp_size of this FilesysStatsInfoDetails.  # noqa: E501
        :rtype: int
        """
        return self._pre_comp_size

    @pre_comp_size.setter
    def pre_comp_size(self, pre_comp_size):
        """Sets the pre_comp_size of this FilesysStatsInfoDetails.


        :param pre_comp_size: The pre_comp_size of this FilesysStatsInfoDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                pre_comp_size is not None and pre_comp_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `pre_comp_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pre_comp_size = pre_comp_size

    @property
    def post_comp_size(self):
        """Gets the post_comp_size of this FilesysStatsInfoDetails.  # noqa: E501


        :return: The post_comp_size of this FilesysStatsInfoDetails.  # noqa: E501
        :rtype: int
        """
        return self._post_comp_size

    @post_comp_size.setter
    def post_comp_size(self, post_comp_size):
        """Sets the post_comp_size of this FilesysStatsInfoDetails.


        :param post_comp_size: The post_comp_size of this FilesysStatsInfoDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                post_comp_size is not None and post_comp_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `post_comp_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._post_comp_size = post_comp_size

    @property
    def global_comp_factor(self):
        """Gets the global_comp_factor of this FilesysStatsInfoDetails.  # noqa: E501


        :return: The global_comp_factor of this FilesysStatsInfoDetails.  # noqa: E501
        :rtype: int
        """
        return self._global_comp_factor

    @global_comp_factor.setter
    def global_comp_factor(self, global_comp_factor):
        """Sets the global_comp_factor of this FilesysStatsInfoDetails.


        :param global_comp_factor: The global_comp_factor of this FilesysStatsInfoDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                global_comp_factor is not None and global_comp_factor < 0):  # noqa: E501
            raise ValueError("Invalid value for `global_comp_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._global_comp_factor = global_comp_factor

    @property
    def local_comp_factor(self):
        """Gets the local_comp_factor of this FilesysStatsInfoDetails.  # noqa: E501


        :return: The local_comp_factor of this FilesysStatsInfoDetails.  # noqa: E501
        :rtype: int
        """
        return self._local_comp_factor

    @local_comp_factor.setter
    def local_comp_factor(self, local_comp_factor):
        """Sets the local_comp_factor of this FilesysStatsInfoDetails.


        :param local_comp_factor: The local_comp_factor of this FilesysStatsInfoDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                local_comp_factor is not None and local_comp_factor < 0):  # noqa: E501
            raise ValueError("Invalid value for `local_comp_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._local_comp_factor = local_comp_factor

    @property
    def total_comp_factor(self):
        """Gets the total_comp_factor of this FilesysStatsInfoDetails.  # noqa: E501


        :return: The total_comp_factor of this FilesysStatsInfoDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_comp_factor

    @total_comp_factor.setter
    def total_comp_factor(self, total_comp_factor):
        """Sets the total_comp_factor of this FilesysStatsInfoDetails.


        :param total_comp_factor: The total_comp_factor of this FilesysStatsInfoDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                total_comp_factor is not None and total_comp_factor < 0):  # noqa: E501
            raise ValueError("Invalid value for `total_comp_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_comp_factor = total_comp_factor

    @property
    def percentage(self):
        """Gets the percentage of this FilesysStatsInfoDetails.  # noqa: E501


        :return: The percentage of this FilesysStatsInfoDetails.  # noqa: E501
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this FilesysStatsInfoDetails.


        :param percentage: The percentage of this FilesysStatsInfoDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                percentage is not None and percentage < 0):  # noqa: E501
            raise ValueError("Invalid value for `percentage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._percentage = percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesysStatsInfoDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesysStatsInfoDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilesysStatsInfoDetails):
            return True

        return self.to_dict() != other.to_dict()
