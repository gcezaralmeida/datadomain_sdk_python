# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class UpgradeScheduleProgressInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_name': 'str',
        'upgrade_status': 'str',
        'schedule_name': 'str',
        'schedule_id': 'int',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'package_name': 'package_name',
        'upgrade_status': 'upgrade_status',
        'schedule_name': 'schedule_name',
        'schedule_id': 'schedule_id',
        'link': 'link'
    }

    def __init__(self, package_name=None, upgrade_status=None, schedule_name=None, schedule_id=None, link=None, _configuration=None):  # noqa: E501
        """UpgradeScheduleProgressInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._package_name = None
        self._upgrade_status = None
        self._schedule_name = None
        self._schedule_id = None
        self._link = None
        self.discriminator = None

        self.package_name = package_name
        self.upgrade_status = upgrade_status
        self.schedule_name = schedule_name
        self.schedule_id = schedule_id
        if link is not None:
            self.link = link

    @property
    def package_name(self):
        """Gets the package_name of this UpgradeScheduleProgressInfo.  # noqa: E501


        :return: The package_name of this UpgradeScheduleProgressInfo.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this UpgradeScheduleProgressInfo.


        :param package_name: The package_name of this UpgradeScheduleProgressInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")  # noqa: E501

        self._package_name = package_name

    @property
    def upgrade_status(self):
        """Gets the upgrade_status of this UpgradeScheduleProgressInfo.  # noqa: E501


        :return: The upgrade_status of this UpgradeScheduleProgressInfo.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_status

    @upgrade_status.setter
    def upgrade_status(self, upgrade_status):
        """Sets the upgrade_status of this UpgradeScheduleProgressInfo.


        :param upgrade_status: The upgrade_status of this UpgradeScheduleProgressInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and upgrade_status is None:
            raise ValueError("Invalid value for `upgrade_status`, must not be `None`")  # noqa: E501

        self._upgrade_status = upgrade_status

    @property
    def schedule_name(self):
        """Gets the schedule_name of this UpgradeScheduleProgressInfo.  # noqa: E501


        :return: The schedule_name of this UpgradeScheduleProgressInfo.  # noqa: E501
        :rtype: str
        """
        return self._schedule_name

    @schedule_name.setter
    def schedule_name(self, schedule_name):
        """Sets the schedule_name of this UpgradeScheduleProgressInfo.


        :param schedule_name: The schedule_name of this UpgradeScheduleProgressInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schedule_name is None:
            raise ValueError("Invalid value for `schedule_name`, must not be `None`")  # noqa: E501

        self._schedule_name = schedule_name

    @property
    def schedule_id(self):
        """Gets the schedule_id of this UpgradeScheduleProgressInfo.  # noqa: E501


        :return: The schedule_id of this UpgradeScheduleProgressInfo.  # noqa: E501
        :rtype: int
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this UpgradeScheduleProgressInfo.


        :param schedule_id: The schedule_id of this UpgradeScheduleProgressInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and schedule_id is None:
            raise ValueError("Invalid value for `schedule_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                schedule_id is not None and schedule_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `schedule_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._schedule_id = schedule_id

    @property
    def link(self):
        """Gets the link of this UpgradeScheduleProgressInfo.  # noqa: E501


        :return: The link of this UpgradeScheduleProgressInfo.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this UpgradeScheduleProgressInfo.


        :param link: The link of this UpgradeScheduleProgressInfo.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeScheduleProgressInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeScheduleProgressInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpgradeScheduleProgressInfo):
            return True

        return self.to_dict() != other.to_dict()
