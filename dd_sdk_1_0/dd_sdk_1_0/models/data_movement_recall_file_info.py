# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class DataMovementRecallFileInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'file': 'str',
        'status': 'DataMovementRecallFileStatus',
        'physical_bytes': 'int',
        'logical_bytes': 'int',
        'queued_time': 'int',
        'start_time': 'int',
        'end_time': 'int',
        'unit_name': 'str',
        'logical_file_size': 'int',
        'link': 'RestLinkRep'
    }

    attribute_map = {
        'id': 'id',
        'file': 'file',
        'status': 'status',
        'physical_bytes': 'physical_bytes',
        'logical_bytes': 'logical_bytes',
        'queued_time': 'queued_time',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'unit_name': 'unit_name',
        'logical_file_size': 'logical_file_size',
        'link': 'link'
    }

    def __init__(self, id=None, file=None, status=None, physical_bytes=None, logical_bytes=None, queued_time=None, start_time=None, end_time=None, unit_name=None, logical_file_size=None, link=None, _configuration=None):  # noqa: E501
        """DataMovementRecallFileInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._file = None
        self._status = None
        self._physical_bytes = None
        self._logical_bytes = None
        self._queued_time = None
        self._start_time = None
        self._end_time = None
        self._unit_name = None
        self._logical_file_size = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.file = file
        if status is not None:
            self.status = status
        if physical_bytes is not None:
            self.physical_bytes = physical_bytes
        if logical_bytes is not None:
            self.logical_bytes = logical_bytes
        if queued_time is not None:
            self.queued_time = queued_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if unit_name is not None:
            self.unit_name = unit_name
        if logical_file_size is not None:
            self.logical_file_size = logical_file_size
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The id of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataMovementRecallFileInfo.


        :param id: The id of this DataMovementRecallFileInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def file(self):
        """Gets the file of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The file of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this DataMovementRecallFileInfo.


        :param file: The file of this DataMovementRecallFileInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def status(self):
        """Gets the status of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The status of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: DataMovementRecallFileStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataMovementRecallFileInfo.


        :param status: The status of this DataMovementRecallFileInfo.  # noqa: E501
        :type: DataMovementRecallFileStatus
        """

        self._status = status

    @property
    def physical_bytes(self):
        """Gets the physical_bytes of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The physical_bytes of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._physical_bytes

    @physical_bytes.setter
    def physical_bytes(self, physical_bytes):
        """Sets the physical_bytes of this DataMovementRecallFileInfo.


        :param physical_bytes: The physical_bytes of this DataMovementRecallFileInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                physical_bytes is not None and physical_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `physical_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._physical_bytes = physical_bytes

    @property
    def logical_bytes(self):
        """Gets the logical_bytes of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The logical_bytes of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._logical_bytes

    @logical_bytes.setter
    def logical_bytes(self, logical_bytes):
        """Sets the logical_bytes of this DataMovementRecallFileInfo.


        :param logical_bytes: The logical_bytes of this DataMovementRecallFileInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_bytes is not None and logical_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_bytes = logical_bytes

    @property
    def queued_time(self):
        """Gets the queued_time of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The queued_time of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._queued_time

    @queued_time.setter
    def queued_time(self, queued_time):
        """Sets the queued_time of this DataMovementRecallFileInfo.


        :param queued_time: The queued_time of this DataMovementRecallFileInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                queued_time is not None and queued_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `queued_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._queued_time = queued_time

    @property
    def start_time(self):
        """Gets the start_time of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The start_time of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DataMovementRecallFileInfo.


        :param start_time: The start_time of this DataMovementRecallFileInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                start_time is not None and start_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The end_time of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DataMovementRecallFileInfo.


        :param end_time: The end_time of this DataMovementRecallFileInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                end_time is not None and end_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_time = end_time

    @property
    def unit_name(self):
        """Gets the unit_name of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The unit_name of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this DataMovementRecallFileInfo.


        :param unit_name: The unit_name of this DataMovementRecallFileInfo.  # noqa: E501
        :type: str
        """

        self._unit_name = unit_name

    @property
    def logical_file_size(self):
        """Gets the logical_file_size of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The logical_file_size of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._logical_file_size

    @logical_file_size.setter
    def logical_file_size(self, logical_file_size):
        """Sets the logical_file_size of this DataMovementRecallFileInfo.


        :param logical_file_size: The logical_file_size of this DataMovementRecallFileInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_file_size is not None and logical_file_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_file_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_file_size = logical_file_size

    @property
    def link(self):
        """Gets the link of this DataMovementRecallFileInfo.  # noqa: E501


        :return: The link of this DataMovementRecallFileInfo.  # noqa: E501
        :rtype: RestLinkRep
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this DataMovementRecallFileInfo.


        :param link: The link of this DataMovementRecallFileInfo.  # noqa: E501
        :type: RestLinkRep
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataMovementRecallFileInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataMovementRecallFileInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataMovementRecallFileInfo):
            return True

        return self.to_dict() != other.to_dict()
