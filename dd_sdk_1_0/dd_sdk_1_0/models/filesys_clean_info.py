# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FilesysCleanInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cleaning_status': 'CleaningStatusInfo',
        'cleaning_dates': 'CleaningDatesInfo',
        'is_aborted': 'bool',
        'abort_reason': 'str',
        'throttle': 'int',
        'schedule': 'CleaningSchedule',
        'operation_status': 'str'
    }

    attribute_map = {
        'cleaning_status': 'cleaning_status',
        'cleaning_dates': 'cleaning_dates',
        'is_aborted': 'is_aborted',
        'abort_reason': 'abort_reason',
        'throttle': 'throttle',
        'schedule': 'schedule',
        'operation_status': 'operation_status'
    }

    def __init__(self, cleaning_status=None, cleaning_dates=None, is_aborted=None, abort_reason=None, throttle=None, schedule=None, operation_status=None, _configuration=None):  # noqa: E501
        """FilesysCleanInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cleaning_status = None
        self._cleaning_dates = None
        self._is_aborted = None
        self._abort_reason = None
        self._throttle = None
        self._schedule = None
        self._operation_status = None
        self.discriminator = None

        if cleaning_status is not None:
            self.cleaning_status = cleaning_status
        if cleaning_dates is not None:
            self.cleaning_dates = cleaning_dates
        if is_aborted is not None:
            self.is_aborted = is_aborted
        if abort_reason is not None:
            self.abort_reason = abort_reason
        if throttle is not None:
            self.throttle = throttle
        if schedule is not None:
            self.schedule = schedule
        if operation_status is not None:
            self.operation_status = operation_status

    @property
    def cleaning_status(self):
        """Gets the cleaning_status of this FilesysCleanInfo.  # noqa: E501


        :return: The cleaning_status of this FilesysCleanInfo.  # noqa: E501
        :rtype: CleaningStatusInfo
        """
        return self._cleaning_status

    @cleaning_status.setter
    def cleaning_status(self, cleaning_status):
        """Sets the cleaning_status of this FilesysCleanInfo.


        :param cleaning_status: The cleaning_status of this FilesysCleanInfo.  # noqa: E501
        :type: CleaningStatusInfo
        """

        self._cleaning_status = cleaning_status

    @property
    def cleaning_dates(self):
        """Gets the cleaning_dates of this FilesysCleanInfo.  # noqa: E501


        :return: The cleaning_dates of this FilesysCleanInfo.  # noqa: E501
        :rtype: CleaningDatesInfo
        """
        return self._cleaning_dates

    @cleaning_dates.setter
    def cleaning_dates(self, cleaning_dates):
        """Sets the cleaning_dates of this FilesysCleanInfo.


        :param cleaning_dates: The cleaning_dates of this FilesysCleanInfo.  # noqa: E501
        :type: CleaningDatesInfo
        """

        self._cleaning_dates = cleaning_dates

    @property
    def is_aborted(self):
        """Gets the is_aborted of this FilesysCleanInfo.  # noqa: E501


        :return: The is_aborted of this FilesysCleanInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_aborted

    @is_aborted.setter
    def is_aborted(self, is_aborted):
        """Sets the is_aborted of this FilesysCleanInfo.


        :param is_aborted: The is_aborted of this FilesysCleanInfo.  # noqa: E501
        :type: bool
        """

        self._is_aborted = is_aborted

    @property
    def abort_reason(self):
        """Gets the abort_reason of this FilesysCleanInfo.  # noqa: E501


        :return: The abort_reason of this FilesysCleanInfo.  # noqa: E501
        :rtype: str
        """
        return self._abort_reason

    @abort_reason.setter
    def abort_reason(self, abort_reason):
        """Sets the abort_reason of this FilesysCleanInfo.


        :param abort_reason: The abort_reason of this FilesysCleanInfo.  # noqa: E501
        :type: str
        """

        self._abort_reason = abort_reason

    @property
    def throttle(self):
        """Gets the throttle of this FilesysCleanInfo.  # noqa: E501


        :return: The throttle of this FilesysCleanInfo.  # noqa: E501
        :rtype: int
        """
        return self._throttle

    @throttle.setter
    def throttle(self, throttle):
        """Sets the throttle of this FilesysCleanInfo.


        :param throttle: The throttle of this FilesysCleanInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                throttle is not None and throttle < 0):  # noqa: E501
            raise ValueError("Invalid value for `throttle`, must be a value greater than or equal to `0`")  # noqa: E501

        self._throttle = throttle

    @property
    def schedule(self):
        """Gets the schedule of this FilesysCleanInfo.  # noqa: E501


        :return: The schedule of this FilesysCleanInfo.  # noqa: E501
        :rtype: CleaningSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this FilesysCleanInfo.


        :param schedule: The schedule of this FilesysCleanInfo.  # noqa: E501
        :type: CleaningSchedule
        """

        self._schedule = schedule

    @property
    def operation_status(self):
        """Gets the operation_status of this FilesysCleanInfo.  # noqa: E501


        :return: The operation_status of this FilesysCleanInfo.  # noqa: E501
        :rtype: str
        """
        return self._operation_status

    @operation_status.setter
    def operation_status(self, operation_status):
        """Sets the operation_status of this FilesysCleanInfo.


        :param operation_status: The operation_status of this FilesysCleanInfo.  # noqa: E501
        :type: str
        """

        self._operation_status = operation_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesysCleanInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesysCleanInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilesysCleanInfo):
            return True

        return self.to_dict() != other.to_dict()
