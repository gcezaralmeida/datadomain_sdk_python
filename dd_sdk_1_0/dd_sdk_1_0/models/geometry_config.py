# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class GeometryConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_heads': 'int',
        'num_cylinders': 'int',
        'sectors_per_track': 'int'
    }

    attribute_map = {
        'num_heads': 'num_heads',
        'num_cylinders': 'num_cylinders',
        'sectors_per_track': 'sectors_per_track'
    }

    def __init__(self, num_heads=None, num_cylinders=None, sectors_per_track=None, _configuration=None):  # noqa: E501
        """GeometryConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._num_heads = None
        self._num_cylinders = None
        self._sectors_per_track = None
        self.discriminator = None

        self.num_heads = num_heads
        self.num_cylinders = num_cylinders
        self.sectors_per_track = sectors_per_track

    @property
    def num_heads(self):
        """Gets the num_heads of this GeometryConfig.  # noqa: E501


        :return: The num_heads of this GeometryConfig.  # noqa: E501
        :rtype: int
        """
        return self._num_heads

    @num_heads.setter
    def num_heads(self, num_heads):
        """Sets the num_heads of this GeometryConfig.


        :param num_heads: The num_heads of this GeometryConfig.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and num_heads is None:
            raise ValueError("Invalid value for `num_heads`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                num_heads is not None and num_heads < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_heads`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_heads = num_heads

    @property
    def num_cylinders(self):
        """Gets the num_cylinders of this GeometryConfig.  # noqa: E501


        :return: The num_cylinders of this GeometryConfig.  # noqa: E501
        :rtype: int
        """
        return self._num_cylinders

    @num_cylinders.setter
    def num_cylinders(self, num_cylinders):
        """Sets the num_cylinders of this GeometryConfig.


        :param num_cylinders: The num_cylinders of this GeometryConfig.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and num_cylinders is None:
            raise ValueError("Invalid value for `num_cylinders`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                num_cylinders is not None and num_cylinders < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_cylinders`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_cylinders = num_cylinders

    @property
    def sectors_per_track(self):
        """Gets the sectors_per_track of this GeometryConfig.  # noqa: E501


        :return: The sectors_per_track of this GeometryConfig.  # noqa: E501
        :rtype: int
        """
        return self._sectors_per_track

    @sectors_per_track.setter
    def sectors_per_track(self, sectors_per_track):
        """Sets the sectors_per_track of this GeometryConfig.


        :param sectors_per_track: The sectors_per_track of this GeometryConfig.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and sectors_per_track is None:
            raise ValueError("Invalid value for `sectors_per_track`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                sectors_per_track is not None and sectors_per_track < 0):  # noqa: E501
            raise ValueError("Invalid value for `sectors_per_track`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sectors_per_track = sectors_per_track

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeometryConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeometryConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeometryConfig):
            return True

        return self.to_dict() != other.to_dict()
