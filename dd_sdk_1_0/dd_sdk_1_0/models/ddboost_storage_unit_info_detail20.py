# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class DdboostStorageUnitInfoDetail20(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'del_status': 'DdboostStorageUnitDeleteStatus',
        'data_availability': 'DataAvailability',
        'num_affected_nodes': 'int',
        'data_access_ip': 'str',
        'quota_enabled': 'bool',
        'pre_comp': 'int',
        'status': 'str',
        'report_physical_size': 'int',
        'user': 'str',
        'tenant_unit': 'str',
        'logical_capacity': 'Capacity',
        'quota_config': 'QuotaConfig',
        'stream_limit_config': 'StreamLimitConfig',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'del_status': 'del_status',
        'data_availability': 'data_availability',
        'num_affected_nodes': 'num_affected_nodes',
        'data_access_ip': 'data_access_ip',
        'quota_enabled': 'quota_enabled',
        'pre_comp': 'pre_comp',
        'status': 'status',
        'report_physical_size': 'report_physical_size',
        'user': 'user',
        'tenant_unit': 'tenant_unit',
        'logical_capacity': 'logical_capacity',
        'quota_config': 'quota_config',
        'stream_limit_config': 'stream_limit_config',
        'link': 'link'
    }

    def __init__(self, id=None, name=None, del_status=None, data_availability=None, num_affected_nodes=None, data_access_ip=None, quota_enabled=None, pre_comp=None, status=None, report_physical_size=None, user=None, tenant_unit=None, logical_capacity=None, quota_config=None, stream_limit_config=None, link=None, _configuration=None):  # noqa: E501
        """DdboostStorageUnitInfoDetail20 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._del_status = None
        self._data_availability = None
        self._num_affected_nodes = None
        self._data_access_ip = None
        self._quota_enabled = None
        self._pre_comp = None
        self._status = None
        self._report_physical_size = None
        self._user = None
        self._tenant_unit = None
        self._logical_capacity = None
        self._quota_config = None
        self._stream_limit_config = None
        self._link = None
        self.discriminator = None

        self.id = id
        if name is not None:
            self.name = name
        if del_status is not None:
            self.del_status = del_status
        self.data_availability = data_availability
        if num_affected_nodes is not None:
            self.num_affected_nodes = num_affected_nodes
        self.data_access_ip = data_access_ip
        self.quota_enabled = quota_enabled
        if pre_comp is not None:
            self.pre_comp = pre_comp
        if status is not None:
            self.status = status
        if report_physical_size is not None:
            self.report_physical_size = report_physical_size
        if user is not None:
            self.user = user
        if tenant_unit is not None:
            self.tenant_unit = tenant_unit
        if logical_capacity is not None:
            self.logical_capacity = logical_capacity
        if quota_config is not None:
            self.quota_config = quota_config
        if stream_limit_config is not None:
            self.stream_limit_config = stream_limit_config
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this DdboostStorageUnitInfoDetail20.  # noqa: E501

        urlencoded Name  # noqa: E501

        :return: The id of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DdboostStorageUnitInfoDetail20.

        urlencoded Name  # noqa: E501

        :param id: The id of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The name of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DdboostStorageUnitInfoDetail20.


        :param name: The name of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def del_status(self):
        """Gets the del_status of this DdboostStorageUnitInfoDetail20.  # noqa: E501

        0: not deleted; 1: deleted  # noqa: E501

        :return: The del_status of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: DdboostStorageUnitDeleteStatus
        """
        return self._del_status

    @del_status.setter
    def del_status(self, del_status):
        """Sets the del_status of this DdboostStorageUnitInfoDetail20.

        0: not deleted; 1: deleted  # noqa: E501

        :param del_status: The del_status of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: DdboostStorageUnitDeleteStatus
        """

        self._del_status = del_status

    @property
    def data_availability(self):
        """Gets the data_availability of this DdboostStorageUnitInfoDetail20.  # noqa: E501

        Possible values: full, partial, none  # noqa: E501

        :return: The data_availability of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: DataAvailability
        """
        return self._data_availability

    @data_availability.setter
    def data_availability(self, data_availability):
        """Sets the data_availability of this DdboostStorageUnitInfoDetail20.

        Possible values: full, partial, none  # noqa: E501

        :param data_availability: The data_availability of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: DataAvailability
        """
        if self._configuration.client_side_validation and data_availability is None:
            raise ValueError("Invalid value for `data_availability`, must not be `None`")  # noqa: E501

        self._data_availability = data_availability

    @property
    def num_affected_nodes(self):
        """Gets the num_affected_nodes of this DdboostStorageUnitInfoDetail20.  # noqa: E501

        Number of nodes affected  # noqa: E501

        :return: The num_affected_nodes of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: int
        """
        return self._num_affected_nodes

    @num_affected_nodes.setter
    def num_affected_nodes(self, num_affected_nodes):
        """Sets the num_affected_nodes of this DdboostStorageUnitInfoDetail20.

        Number of nodes affected  # noqa: E501

        :param num_affected_nodes: The num_affected_nodes of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                num_affected_nodes is not None and num_affected_nodes < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_affected_nodes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_affected_nodes = num_affected_nodes

    @property
    def data_access_ip(self):
        """Gets the data_access_ip of this DdboostStorageUnitInfoDetail20.  # noqa: E501

        Data access IP address  # noqa: E501

        :return: The data_access_ip of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: str
        """
        return self._data_access_ip

    @data_access_ip.setter
    def data_access_ip(self, data_access_ip):
        """Sets the data_access_ip of this DdboostStorageUnitInfoDetail20.

        Data access IP address  # noqa: E501

        :param data_access_ip: The data_access_ip of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and data_access_ip is None:
            raise ValueError("Invalid value for `data_access_ip`, must not be `None`")  # noqa: E501

        self._data_access_ip = data_access_ip

    @property
    def quota_enabled(self):
        """Gets the quota_enabled of this DdboostStorageUnitInfoDetail20.  # noqa: E501

        true: if quota is enabled  # noqa: E501

        :return: The quota_enabled of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: bool
        """
        return self._quota_enabled

    @quota_enabled.setter
    def quota_enabled(self, quota_enabled):
        """Sets the quota_enabled of this DdboostStorageUnitInfoDetail20.

        true: if quota is enabled  # noqa: E501

        :param quota_enabled: The quota_enabled of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and quota_enabled is None:
            raise ValueError("Invalid value for `quota_enabled`, must not be `None`")  # noqa: E501

        self._quota_enabled = quota_enabled

    @property
    def pre_comp(self):
        """Gets the pre_comp of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The pre_comp of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: int
        """
        return self._pre_comp

    @pre_comp.setter
    def pre_comp(self, pre_comp):
        """Sets the pre_comp of this DdboostStorageUnitInfoDetail20.


        :param pre_comp: The pre_comp of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                pre_comp is not None and pre_comp < 0):  # noqa: E501
            raise ValueError("Invalid value for `pre_comp`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pre_comp = pre_comp

    @property
    def status(self):
        """Gets the status of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The status of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DdboostStorageUnitInfoDetail20.


        :param status: The status of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def report_physical_size(self):
        """Gets the report_physical_size of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The report_physical_size of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: int
        """
        return self._report_physical_size

    @report_physical_size.setter
    def report_physical_size(self, report_physical_size):
        """Sets the report_physical_size of this DdboostStorageUnitInfoDetail20.


        :param report_physical_size: The report_physical_size of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                report_physical_size is not None and report_physical_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `report_physical_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._report_physical_size = report_physical_size

    @property
    def user(self):
        """Gets the user of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The user of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DdboostStorageUnitInfoDetail20.


        :param user: The user of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def tenant_unit(self):
        """Gets the tenant_unit of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The tenant_unit of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: str
        """
        return self._tenant_unit

    @tenant_unit.setter
    def tenant_unit(self, tenant_unit):
        """Sets the tenant_unit of this DdboostStorageUnitInfoDetail20.


        :param tenant_unit: The tenant_unit of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: str
        """

        self._tenant_unit = tenant_unit

    @property
    def logical_capacity(self):
        """Gets the logical_capacity of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The logical_capacity of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: Capacity
        """
        return self._logical_capacity

    @logical_capacity.setter
    def logical_capacity(self, logical_capacity):
        """Sets the logical_capacity of this DdboostStorageUnitInfoDetail20.


        :param logical_capacity: The logical_capacity of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: Capacity
        """

        self._logical_capacity = logical_capacity

    @property
    def quota_config(self):
        """Gets the quota_config of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The quota_config of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: QuotaConfig
        """
        return self._quota_config

    @quota_config.setter
    def quota_config(self, quota_config):
        """Sets the quota_config of this DdboostStorageUnitInfoDetail20.


        :param quota_config: The quota_config of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: QuotaConfig
        """

        self._quota_config = quota_config

    @property
    def stream_limit_config(self):
        """Gets the stream_limit_config of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The stream_limit_config of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: StreamLimitConfig
        """
        return self._stream_limit_config

    @stream_limit_config.setter
    def stream_limit_config(self, stream_limit_config):
        """Sets the stream_limit_config of this DdboostStorageUnitInfoDetail20.


        :param stream_limit_config: The stream_limit_config of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: StreamLimitConfig
        """

        self._stream_limit_config = stream_limit_config

    @property
    def link(self):
        """Gets the link of this DdboostStorageUnitInfoDetail20.  # noqa: E501


        :return: The link of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this DdboostStorageUnitInfoDetail20.


        :param link: The link of this DdboostStorageUnitInfoDetail20.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DdboostStorageUnitInfoDetail20, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DdboostStorageUnitInfoDetail20):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DdboostStorageUnitInfoDetail20):
            return True

        return self.to_dict() != other.to_dict()
