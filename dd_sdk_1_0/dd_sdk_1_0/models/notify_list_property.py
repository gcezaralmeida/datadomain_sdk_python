# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class NotifyListProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_severity_pairs': 'list[ClassSeverityPair]',
        'tenant_unit': 'str',
        'tenant_unit_uuid': 'str',
        'tenant': 'str',
        'emails': 'list[str]'
    }

    attribute_map = {
        'class_severity_pairs': 'class_severity_pairs',
        'tenant_unit': 'tenant_unit',
        'tenant_unit_uuid': 'tenant_unit_uuid',
        'tenant': 'tenant',
        'emails': 'emails'
    }

    def __init__(self, class_severity_pairs=None, tenant_unit=None, tenant_unit_uuid=None, tenant=None, emails=None, _configuration=None):  # noqa: E501
        """NotifyListProperty - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._class_severity_pairs = None
        self._tenant_unit = None
        self._tenant_unit_uuid = None
        self._tenant = None
        self._emails = None
        self.discriminator = None

        if class_severity_pairs is not None:
            self.class_severity_pairs = class_severity_pairs
        if tenant_unit is not None:
            self.tenant_unit = tenant_unit
        if tenant_unit_uuid is not None:
            self.tenant_unit_uuid = tenant_unit_uuid
        if tenant is not None:
            self.tenant = tenant
        if emails is not None:
            self.emails = emails

    @property
    def class_severity_pairs(self):
        """Gets the class_severity_pairs of this NotifyListProperty.  # noqa: E501


        :return: The class_severity_pairs of this NotifyListProperty.  # noqa: E501
        :rtype: list[ClassSeverityPair]
        """
        return self._class_severity_pairs

    @class_severity_pairs.setter
    def class_severity_pairs(self, class_severity_pairs):
        """Sets the class_severity_pairs of this NotifyListProperty.


        :param class_severity_pairs: The class_severity_pairs of this NotifyListProperty.  # noqa: E501
        :type: list[ClassSeverityPair]
        """

        self._class_severity_pairs = class_severity_pairs

    @property
    def tenant_unit(self):
        """Gets the tenant_unit of this NotifyListProperty.  # noqa: E501


        :return: The tenant_unit of this NotifyListProperty.  # noqa: E501
        :rtype: str
        """
        return self._tenant_unit

    @tenant_unit.setter
    def tenant_unit(self, tenant_unit):
        """Sets the tenant_unit of this NotifyListProperty.


        :param tenant_unit: The tenant_unit of this NotifyListProperty.  # noqa: E501
        :type: str
        """

        self._tenant_unit = tenant_unit

    @property
    def tenant_unit_uuid(self):
        """Gets the tenant_unit_uuid of this NotifyListProperty.  # noqa: E501


        :return: The tenant_unit_uuid of this NotifyListProperty.  # noqa: E501
        :rtype: str
        """
        return self._tenant_unit_uuid

    @tenant_unit_uuid.setter
    def tenant_unit_uuid(self, tenant_unit_uuid):
        """Sets the tenant_unit_uuid of this NotifyListProperty.


        :param tenant_unit_uuid: The tenant_unit_uuid of this NotifyListProperty.  # noqa: E501
        :type: str
        """

        self._tenant_unit_uuid = tenant_unit_uuid

    @property
    def tenant(self):
        """Gets the tenant of this NotifyListProperty.  # noqa: E501


        :return: The tenant of this NotifyListProperty.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this NotifyListProperty.


        :param tenant: The tenant of this NotifyListProperty.  # noqa: E501
        :type: str
        """

        self._tenant = tenant

    @property
    def emails(self):
        """Gets the emails of this NotifyListProperty.  # noqa: E501


        :return: The emails of this NotifyListProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this NotifyListProperty.


        :param emails: The emails of this NotifyListProperty.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotifyListProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotifyListProperty):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotifyListProperty):
            return True

        return self.to_dict() != other.to_dict()
