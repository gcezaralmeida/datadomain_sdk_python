# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class CloudProfileCreate20(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'cloud_provider': 'CloudProvider20',
        'proxy': 'ProxyDetails',
        'cloud_keys': 'CloudKeys',
        'aws': 'AwsInfoCreate20',
        'azure': 'AzureInfoCreate20',
        'ecs': 'EcsInfoCreate20',
        's3_flexible': 'S3FlexibleInfoCreate20',
        'alibabacloud': 'AlibabaCloudInfoCreate20'
    }

    attribute_map = {
        'name': 'name',
        'cloud_provider': 'cloud_provider',
        'proxy': 'proxy',
        'cloud_keys': 'cloud_keys',
        'aws': 'aws',
        'azure': 'azure',
        'ecs': 'ecs',
        's3_flexible': 's3_flexible',
        'alibabacloud': 'alibabacloud'
    }

    def __init__(self, name=None, cloud_provider=None, proxy=None, cloud_keys=None, aws=None, azure=None, ecs=None, s3_flexible=None, alibabacloud=None, _configuration=None):  # noqa: E501
        """CloudProfileCreate20 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._cloud_provider = None
        self._proxy = None
        self._cloud_keys = None
        self._aws = None
        self._azure = None
        self._ecs = None
        self._s3_flexible = None
        self._alibabacloud = None
        self.discriminator = None

        self.name = name
        self.cloud_provider = cloud_provider
        if proxy is not None:
            self.proxy = proxy
        if cloud_keys is not None:
            self.cloud_keys = cloud_keys
        if aws is not None:
            self.aws = aws
        if azure is not None:
            self.azure = azure
        if ecs is not None:
            self.ecs = ecs
        if s3_flexible is not None:
            self.s3_flexible = s3_flexible
        if alibabacloud is not None:
            self.alibabacloud = alibabacloud

    @property
    def name(self):
        """Gets the name of this CloudProfileCreate20.  # noqa: E501

        Name is required for the creation.  # noqa: E501

        :return: The name of this CloudProfileCreate20.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudProfileCreate20.

        Name is required for the creation.  # noqa: E501

        :param name: The name of this CloudProfileCreate20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this CloudProfileCreate20.  # noqa: E501


        :return: The cloud_provider of this CloudProfileCreate20.  # noqa: E501
        :rtype: CloudProvider20
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this CloudProfileCreate20.


        :param cloud_provider: The cloud_provider of this CloudProfileCreate20.  # noqa: E501
        :type: CloudProvider20
        """
        if self._configuration.client_side_validation and cloud_provider is None:
            raise ValueError("Invalid value for `cloud_provider`, must not be `None`")  # noqa: E501

        self._cloud_provider = cloud_provider

    @property
    def proxy(self):
        """Gets the proxy of this CloudProfileCreate20.  # noqa: E501


        :return: The proxy of this CloudProfileCreate20.  # noqa: E501
        :rtype: ProxyDetails
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this CloudProfileCreate20.


        :param proxy: The proxy of this CloudProfileCreate20.  # noqa: E501
        :type: ProxyDetails
        """

        self._proxy = proxy

    @property
    def cloud_keys(self):
        """Gets the cloud_keys of this CloudProfileCreate20.  # noqa: E501


        :return: The cloud_keys of this CloudProfileCreate20.  # noqa: E501
        :rtype: CloudKeys
        """
        return self._cloud_keys

    @cloud_keys.setter
    def cloud_keys(self, cloud_keys):
        """Sets the cloud_keys of this CloudProfileCreate20.


        :param cloud_keys: The cloud_keys of this CloudProfileCreate20.  # noqa: E501
        :type: CloudKeys
        """

        self._cloud_keys = cloud_keys

    @property
    def aws(self):
        """Gets the aws of this CloudProfileCreate20.  # noqa: E501


        :return: The aws of this CloudProfileCreate20.  # noqa: E501
        :rtype: AwsInfoCreate20
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this CloudProfileCreate20.


        :param aws: The aws of this CloudProfileCreate20.  # noqa: E501
        :type: AwsInfoCreate20
        """

        self._aws = aws

    @property
    def azure(self):
        """Gets the azure of this CloudProfileCreate20.  # noqa: E501


        :return: The azure of this CloudProfileCreate20.  # noqa: E501
        :rtype: AzureInfoCreate20
        """
        return self._azure

    @azure.setter
    def azure(self, azure):
        """Sets the azure of this CloudProfileCreate20.


        :param azure: The azure of this CloudProfileCreate20.  # noqa: E501
        :type: AzureInfoCreate20
        """

        self._azure = azure

    @property
    def ecs(self):
        """Gets the ecs of this CloudProfileCreate20.  # noqa: E501


        :return: The ecs of this CloudProfileCreate20.  # noqa: E501
        :rtype: EcsInfoCreate20
        """
        return self._ecs

    @ecs.setter
    def ecs(self, ecs):
        """Sets the ecs of this CloudProfileCreate20.


        :param ecs: The ecs of this CloudProfileCreate20.  # noqa: E501
        :type: EcsInfoCreate20
        """

        self._ecs = ecs

    @property
    def s3_flexible(self):
        """Gets the s3_flexible of this CloudProfileCreate20.  # noqa: E501


        :return: The s3_flexible of this CloudProfileCreate20.  # noqa: E501
        :rtype: S3FlexibleInfoCreate20
        """
        return self._s3_flexible

    @s3_flexible.setter
    def s3_flexible(self, s3_flexible):
        """Sets the s3_flexible of this CloudProfileCreate20.


        :param s3_flexible: The s3_flexible of this CloudProfileCreate20.  # noqa: E501
        :type: S3FlexibleInfoCreate20
        """

        self._s3_flexible = s3_flexible

    @property
    def alibabacloud(self):
        """Gets the alibabacloud of this CloudProfileCreate20.  # noqa: E501


        :return: The alibabacloud of this CloudProfileCreate20.  # noqa: E501
        :rtype: AlibabaCloudInfoCreate20
        """
        return self._alibabacloud

    @alibabacloud.setter
    def alibabacloud(self, alibabacloud):
        """Sets the alibabacloud of this CloudProfileCreate20.


        :param alibabacloud: The alibabacloud of this CloudProfileCreate20.  # noqa: E501
        :type: AlibabaCloudInfoCreate20
        """

        self._alibabacloud = alibabacloud

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudProfileCreate20, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudProfileCreate20):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudProfileCreate20):
            return True

        return self.to_dict() != other.to_dict()
