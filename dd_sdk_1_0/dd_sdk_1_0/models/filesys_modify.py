# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FilesysModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation': 'FilesysModifyOps',
        'write_zeros': 'bool',
        'options': 'list[Option]',
        'clean_option_value': 'CleanOptionValue'
    }

    attribute_map = {
        'operation': 'operation',
        'write_zeros': 'write_zeros',
        'options': 'options',
        'clean_option_value': 'clean_option_value'
    }

    def __init__(self, operation=None, write_zeros=None, options=None, clean_option_value=None, _configuration=None):  # noqa: E501
        """FilesysModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._operation = None
        self._write_zeros = None
        self._options = None
        self._clean_option_value = None
        self.discriminator = None

        self.operation = operation
        if write_zeros is not None:
            self.write_zeros = write_zeros
        if options is not None:
            self.options = options
        if clean_option_value is not None:
            self.clean_option_value = clean_option_value

    @property
    def operation(self):
        """Gets the operation of this FilesysModify.  # noqa: E501


        :return: The operation of this FilesysModify.  # noqa: E501
        :rtype: FilesysModifyOps
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this FilesysModify.


        :param operation: The operation of this FilesysModify.  # noqa: E501
        :type: FilesysModifyOps
        """
        if self._configuration.client_side_validation and operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def write_zeros(self):
        """Gets the write_zeros of this FilesysModify.  # noqa: E501


        :return: The write_zeros of this FilesysModify.  # noqa: E501
        :rtype: bool
        """
        return self._write_zeros

    @write_zeros.setter
    def write_zeros(self, write_zeros):
        """Sets the write_zeros of this FilesysModify.


        :param write_zeros: The write_zeros of this FilesysModify.  # noqa: E501
        :type: bool
        """

        self._write_zeros = write_zeros

    @property
    def options(self):
        """Gets the options of this FilesysModify.  # noqa: E501


        :return: The options of this FilesysModify.  # noqa: E501
        :rtype: list[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FilesysModify.


        :param options: The options of this FilesysModify.  # noqa: E501
        :type: list[Option]
        """

        self._options = options

    @property
    def clean_option_value(self):
        """Gets the clean_option_value of this FilesysModify.  # noqa: E501


        :return: The clean_option_value of this FilesysModify.  # noqa: E501
        :rtype: CleanOptionValue
        """
        return self._clean_option_value

    @clean_option_value.setter
    def clean_option_value(self, clean_option_value):
        """Sets the clean_option_value of this FilesysModify.


        :param clean_option_value: The clean_option_value of this FilesysModify.  # noqa: E501
        :type: CleanOptionValue
        """

        self._clean_option_value = clean_option_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesysModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesysModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilesysModify):
            return True

        return self.to_dict() != other.to_dict()
