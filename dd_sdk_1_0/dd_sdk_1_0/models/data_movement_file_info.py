# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class DataMovementFileInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'file': 'str',
        'file_size': 'int',
        'precomp_bytes_moved': 'int',
        'destination_cloud_unit': 'str',
        'elapsed_time': 'int',
        'link': 'RestLinkRep'
    }

    attribute_map = {
        'id': 'id',
        'file': 'file',
        'file_size': 'file_size',
        'precomp_bytes_moved': 'precomp_bytes_moved',
        'destination_cloud_unit': 'destination_cloud_unit',
        'elapsed_time': 'elapsed_time',
        'link': 'link'
    }

    def __init__(self, id=None, file=None, file_size=None, precomp_bytes_moved=None, destination_cloud_unit=None, elapsed_time=None, link=None, _configuration=None):  # noqa: E501
        """DataMovementFileInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._file = None
        self._file_size = None
        self._precomp_bytes_moved = None
        self._destination_cloud_unit = None
        self._elapsed_time = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.file = file
        if file_size is not None:
            self.file_size = file_size
        if precomp_bytes_moved is not None:
            self.precomp_bytes_moved = precomp_bytes_moved
        if destination_cloud_unit is not None:
            self.destination_cloud_unit = destination_cloud_unit
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this DataMovementFileInfo.  # noqa: E501


        :return: The id of this DataMovementFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataMovementFileInfo.


        :param id: The id of this DataMovementFileInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def file(self):
        """Gets the file of this DataMovementFileInfo.  # noqa: E501


        :return: The file of this DataMovementFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this DataMovementFileInfo.


        :param file: The file of this DataMovementFileInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def file_size(self):
        """Gets the file_size of this DataMovementFileInfo.  # noqa: E501


        :return: The file_size of this DataMovementFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this DataMovementFileInfo.


        :param file_size: The file_size of this DataMovementFileInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                file_size is not None and file_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `file_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._file_size = file_size

    @property
    def precomp_bytes_moved(self):
        """Gets the precomp_bytes_moved of this DataMovementFileInfo.  # noqa: E501


        :return: The precomp_bytes_moved of this DataMovementFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._precomp_bytes_moved

    @precomp_bytes_moved.setter
    def precomp_bytes_moved(self, precomp_bytes_moved):
        """Sets the precomp_bytes_moved of this DataMovementFileInfo.


        :param precomp_bytes_moved: The precomp_bytes_moved of this DataMovementFileInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                precomp_bytes_moved is not None and precomp_bytes_moved < 0):  # noqa: E501
            raise ValueError("Invalid value for `precomp_bytes_moved`, must be a value greater than or equal to `0`")  # noqa: E501

        self._precomp_bytes_moved = precomp_bytes_moved

    @property
    def destination_cloud_unit(self):
        """Gets the destination_cloud_unit of this DataMovementFileInfo.  # noqa: E501


        :return: The destination_cloud_unit of this DataMovementFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._destination_cloud_unit

    @destination_cloud_unit.setter
    def destination_cloud_unit(self, destination_cloud_unit):
        """Sets the destination_cloud_unit of this DataMovementFileInfo.


        :param destination_cloud_unit: The destination_cloud_unit of this DataMovementFileInfo.  # noqa: E501
        :type: str
        """

        self._destination_cloud_unit = destination_cloud_unit

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this DataMovementFileInfo.  # noqa: E501


        :return: The elapsed_time of this DataMovementFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this DataMovementFileInfo.


        :param elapsed_time: The elapsed_time of this DataMovementFileInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                elapsed_time is not None and elapsed_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `elapsed_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._elapsed_time = elapsed_time

    @property
    def link(self):
        """Gets the link of this DataMovementFileInfo.  # noqa: E501


        :return: The link of this DataMovementFileInfo.  # noqa: E501
        :rtype: RestLinkRep
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this DataMovementFileInfo.


        :param link: The link of this DataMovementFileInfo.  # noqa: E501
        :type: RestLinkRep
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataMovementFileInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataMovementFileInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataMovementFileInfo):
            return True

        return self.to_dict() != other.to_dict()
