# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class KeysInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'cp_name': 'str',
        'key_id': 'str',
        'key_muid': 'str',
        'key_state': 'str',
        'key_size_post_comp': 'int',
        'key_status': 'list[str]',
        'key_plugin': 'str',
        'key_create_epoch': 'int',
        'key_start_epoch': 'int',
        'key_end_epoch': 'int',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'id': 'id',
        'cp_name': 'cp_name',
        'key_id': 'key_id',
        'key_muid': 'key_muid',
        'key_state': 'key_state',
        'key_size_post_comp': 'key_size_post_comp',
        'key_status': 'key_status',
        'key_plugin': 'key_plugin',
        'key_create_epoch': 'key_create_epoch',
        'key_start_epoch': 'key_start_epoch',
        'key_end_epoch': 'key_end_epoch',
        'link': 'link'
    }

    def __init__(self, id=None, cp_name=None, key_id=None, key_muid=None, key_state=None, key_size_post_comp=None, key_status=None, key_plugin=None, key_create_epoch=None, key_start_epoch=None, key_end_epoch=None, link=None, _configuration=None):  # noqa: E501
        """KeysInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._cp_name = None
        self._key_id = None
        self._key_muid = None
        self._key_state = None
        self._key_size_post_comp = None
        self._key_status = None
        self._key_plugin = None
        self._key_create_epoch = None
        self._key_start_epoch = None
        self._key_end_epoch = None
        self._link = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if cp_name is not None:
            self.cp_name = cp_name
        if key_id is not None:
            self.key_id = key_id
        if key_muid is not None:
            self.key_muid = key_muid
        if key_state is not None:
            self.key_state = key_state
        if key_size_post_comp is not None:
            self.key_size_post_comp = key_size_post_comp
        if key_status is not None:
            self.key_status = key_status
        if key_plugin is not None:
            self.key_plugin = key_plugin
        if key_create_epoch is not None:
            self.key_create_epoch = key_create_epoch
        if key_start_epoch is not None:
            self.key_start_epoch = key_start_epoch
        if key_end_epoch is not None:
            self.key_end_epoch = key_end_epoch
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this KeysInfo.  # noqa: E501


        :return: The id of this KeysInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KeysInfo.


        :param id: The id of this KeysInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def cp_name(self):
        """Gets the cp_name of this KeysInfo.  # noqa: E501


        :return: The cp_name of this KeysInfo.  # noqa: E501
        :rtype: str
        """
        return self._cp_name

    @cp_name.setter
    def cp_name(self, cp_name):
        """Sets the cp_name of this KeysInfo.


        :param cp_name: The cp_name of this KeysInfo.  # noqa: E501
        :type: str
        """

        self._cp_name = cp_name

    @property
    def key_id(self):
        """Gets the key_id of this KeysInfo.  # noqa: E501


        :return: The key_id of this KeysInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this KeysInfo.


        :param key_id: The key_id of this KeysInfo.  # noqa: E501
        :type: str
        """

        self._key_id = key_id

    @property
    def key_muid(self):
        """Gets the key_muid of this KeysInfo.  # noqa: E501


        :return: The key_muid of this KeysInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_muid

    @key_muid.setter
    def key_muid(self, key_muid):
        """Sets the key_muid of this KeysInfo.


        :param key_muid: The key_muid of this KeysInfo.  # noqa: E501
        :type: str
        """

        self._key_muid = key_muid

    @property
    def key_state(self):
        """Gets the key_state of this KeysInfo.  # noqa: E501


        :return: The key_state of this KeysInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_state

    @key_state.setter
    def key_state(self, key_state):
        """Sets the key_state of this KeysInfo.


        :param key_state: The key_state of this KeysInfo.  # noqa: E501
        :type: str
        """

        self._key_state = key_state

    @property
    def key_size_post_comp(self):
        """Gets the key_size_post_comp of this KeysInfo.  # noqa: E501


        :return: The key_size_post_comp of this KeysInfo.  # noqa: E501
        :rtype: int
        """
        return self._key_size_post_comp

    @key_size_post_comp.setter
    def key_size_post_comp(self, key_size_post_comp):
        """Sets the key_size_post_comp of this KeysInfo.


        :param key_size_post_comp: The key_size_post_comp of this KeysInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                key_size_post_comp is not None and key_size_post_comp < 0):  # noqa: E501
            raise ValueError("Invalid value for `key_size_post_comp`, must be a value greater than or equal to `0`")  # noqa: E501

        self._key_size_post_comp = key_size_post_comp

    @property
    def key_status(self):
        """Gets the key_status of this KeysInfo.  # noqa: E501


        :return: The key_status of this KeysInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._key_status

    @key_status.setter
    def key_status(self, key_status):
        """Sets the key_status of this KeysInfo.


        :param key_status: The key_status of this KeysInfo.  # noqa: E501
        :type: list[str]
        """

        self._key_status = key_status

    @property
    def key_plugin(self):
        """Gets the key_plugin of this KeysInfo.  # noqa: E501


        :return: The key_plugin of this KeysInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_plugin

    @key_plugin.setter
    def key_plugin(self, key_plugin):
        """Sets the key_plugin of this KeysInfo.


        :param key_plugin: The key_plugin of this KeysInfo.  # noqa: E501
        :type: str
        """

        self._key_plugin = key_plugin

    @property
    def key_create_epoch(self):
        """Gets the key_create_epoch of this KeysInfo.  # noqa: E501


        :return: The key_create_epoch of this KeysInfo.  # noqa: E501
        :rtype: int
        """
        return self._key_create_epoch

    @key_create_epoch.setter
    def key_create_epoch(self, key_create_epoch):
        """Sets the key_create_epoch of this KeysInfo.


        :param key_create_epoch: The key_create_epoch of this KeysInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                key_create_epoch is not None and key_create_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `key_create_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._key_create_epoch = key_create_epoch

    @property
    def key_start_epoch(self):
        """Gets the key_start_epoch of this KeysInfo.  # noqa: E501


        :return: The key_start_epoch of this KeysInfo.  # noqa: E501
        :rtype: int
        """
        return self._key_start_epoch

    @key_start_epoch.setter
    def key_start_epoch(self, key_start_epoch):
        """Sets the key_start_epoch of this KeysInfo.


        :param key_start_epoch: The key_start_epoch of this KeysInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                key_start_epoch is not None and key_start_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `key_start_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._key_start_epoch = key_start_epoch

    @property
    def key_end_epoch(self):
        """Gets the key_end_epoch of this KeysInfo.  # noqa: E501


        :return: The key_end_epoch of this KeysInfo.  # noqa: E501
        :rtype: int
        """
        return self._key_end_epoch

    @key_end_epoch.setter
    def key_end_epoch(self, key_end_epoch):
        """Sets the key_end_epoch of this KeysInfo.


        :param key_end_epoch: The key_end_epoch of this KeysInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                key_end_epoch is not None and key_end_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `key_end_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._key_end_epoch = key_end_epoch

    @property
    def link(self):
        """Gets the link of this KeysInfo.  # noqa: E501


        :return: The link of this KeysInfo.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this KeysInfo.


        :param link: The link of this KeysInfo.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeysInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeysInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeysInfo):
            return True

        return self.to_dict() != other.to_dict()
