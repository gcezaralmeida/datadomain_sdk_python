# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FilesysStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filesys_ops': 'float',
        'filesys_ops_rate': 'float',
        'data_in': 'float',
        'data_out': 'float',
        'data_in_rate': 'float',
        'data_out_rate': 'float',
        'wait_time_in': 'float',
        'wait_time_out': 'float',
        'wait_time_in_rate': 'float',
        'wait_time_out_rate': 'float'
    }

    attribute_map = {
        'filesys_ops': 'filesys_ops',
        'filesys_ops_rate': 'filesys_ops_rate',
        'data_in': 'data_in',
        'data_out': 'data_out',
        'data_in_rate': 'data_in_rate',
        'data_out_rate': 'data_out_rate',
        'wait_time_in': 'wait_time_in',
        'wait_time_out': 'wait_time_out',
        'wait_time_in_rate': 'wait_time_in_rate',
        'wait_time_out_rate': 'wait_time_out_rate'
    }

    def __init__(self, filesys_ops=None, filesys_ops_rate=None, data_in=None, data_out=None, data_in_rate=None, data_out_rate=None, wait_time_in=None, wait_time_out=None, wait_time_in_rate=None, wait_time_out_rate=None, _configuration=None):  # noqa: E501
        """FilesysStats - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filesys_ops = None
        self._filesys_ops_rate = None
        self._data_in = None
        self._data_out = None
        self._data_in_rate = None
        self._data_out_rate = None
        self._wait_time_in = None
        self._wait_time_out = None
        self._wait_time_in_rate = None
        self._wait_time_out_rate = None
        self.discriminator = None

        if filesys_ops is not None:
            self.filesys_ops = filesys_ops
        if filesys_ops_rate is not None:
            self.filesys_ops_rate = filesys_ops_rate
        if data_in is not None:
            self.data_in = data_in
        if data_out is not None:
            self.data_out = data_out
        if data_in_rate is not None:
            self.data_in_rate = data_in_rate
        if data_out_rate is not None:
            self.data_out_rate = data_out_rate
        if wait_time_in is not None:
            self.wait_time_in = wait_time_in
        if wait_time_out is not None:
            self.wait_time_out = wait_time_out
        if wait_time_in_rate is not None:
            self.wait_time_in_rate = wait_time_in_rate
        if wait_time_out_rate is not None:
            self.wait_time_out_rate = wait_time_out_rate

    @property
    def filesys_ops(self):
        """Gets the filesys_ops of this FilesysStats.  # noqa: E501

        Unit is file system operations.  # noqa: E501

        :return: The filesys_ops of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._filesys_ops

    @filesys_ops.setter
    def filesys_ops(self, filesys_ops):
        """Sets the filesys_ops of this FilesysStats.

        Unit is file system operations.  # noqa: E501

        :param filesys_ops: The filesys_ops of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._filesys_ops = filesys_ops

    @property
    def filesys_ops_rate(self):
        """Gets the filesys_ops_rate of this FilesysStats.  # noqa: E501

        Unit is file system operations per second.  # noqa: E501

        :return: The filesys_ops_rate of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._filesys_ops_rate

    @filesys_ops_rate.setter
    def filesys_ops_rate(self, filesys_ops_rate):
        """Sets the filesys_ops_rate of this FilesysStats.

        Unit is file system operations per second.  # noqa: E501

        :param filesys_ops_rate: The filesys_ops_rate of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._filesys_ops_rate = filesys_ops_rate

    @property
    def data_in(self):
        """Gets the data_in of this FilesysStats.  # noqa: E501

        Unit is bytes;  # noqa: E501

        :return: The data_in of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._data_in

    @data_in.setter
    def data_in(self, data_in):
        """Sets the data_in of this FilesysStats.

        Unit is bytes;  # noqa: E501

        :param data_in: The data_in of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._data_in = data_in

    @property
    def data_out(self):
        """Gets the data_out of this FilesysStats.  # noqa: E501

        Unit is bytes;  # noqa: E501

        :return: The data_out of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._data_out

    @data_out.setter
    def data_out(self, data_out):
        """Sets the data_out of this FilesysStats.

        Unit is bytes;  # noqa: E501

        :param data_out: The data_out of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._data_out = data_out

    @property
    def data_in_rate(self):
        """Gets the data_in_rate of this FilesysStats.  # noqa: E501

        Unit is Bytes per second  # noqa: E501

        :return: The data_in_rate of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._data_in_rate

    @data_in_rate.setter
    def data_in_rate(self, data_in_rate):
        """Sets the data_in_rate of this FilesysStats.

        Unit is Bytes per second  # noqa: E501

        :param data_in_rate: The data_in_rate of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._data_in_rate = data_in_rate

    @property
    def data_out_rate(self):
        """Gets the data_out_rate of this FilesysStats.  # noqa: E501

        Unit is Bytes per second  # noqa: E501

        :return: The data_out_rate of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._data_out_rate

    @data_out_rate.setter
    def data_out_rate(self, data_out_rate):
        """Sets the data_out_rate of this FilesysStats.

        Unit is Bytes per second  # noqa: E501

        :param data_out_rate: The data_out_rate of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._data_out_rate = data_out_rate

    @property
    def wait_time_in(self):
        """Gets the wait_time_in of this FilesysStats.  # noqa: E501

        Unit is ns(nanosecond)  # noqa: E501

        :return: The wait_time_in of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._wait_time_in

    @wait_time_in.setter
    def wait_time_in(self, wait_time_in):
        """Sets the wait_time_in of this FilesysStats.

        Unit is ns(nanosecond)  # noqa: E501

        :param wait_time_in: The wait_time_in of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._wait_time_in = wait_time_in

    @property
    def wait_time_out(self):
        """Gets the wait_time_out of this FilesysStats.  # noqa: E501

        Unit is ns(nanosecond)  # noqa: E501

        :return: The wait_time_out of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._wait_time_out

    @wait_time_out.setter
    def wait_time_out(self, wait_time_out):
        """Sets the wait_time_out of this FilesysStats.

        Unit is ns(nanosecond)  # noqa: E501

        :param wait_time_out: The wait_time_out of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._wait_time_out = wait_time_out

    @property
    def wait_time_in_rate(self):
        """Gets the wait_time_in_rate of this FilesysStats.  # noqa: E501

        Unit is ms(millisecond) per MiB  # noqa: E501

        :return: The wait_time_in_rate of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._wait_time_in_rate

    @wait_time_in_rate.setter
    def wait_time_in_rate(self, wait_time_in_rate):
        """Sets the wait_time_in_rate of this FilesysStats.

        Unit is ms(millisecond) per MiB  # noqa: E501

        :param wait_time_in_rate: The wait_time_in_rate of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._wait_time_in_rate = wait_time_in_rate

    @property
    def wait_time_out_rate(self):
        """Gets the wait_time_out_rate of this FilesysStats.  # noqa: E501

        Unit is ms(millisecond) per MiB  # noqa: E501

        :return: The wait_time_out_rate of this FilesysStats.  # noqa: E501
        :rtype: float
        """
        return self._wait_time_out_rate

    @wait_time_out_rate.setter
    def wait_time_out_rate(self, wait_time_out_rate):
        """Sets the wait_time_out_rate of this FilesysStats.

        Unit is ms(millisecond) per MiB  # noqa: E501

        :param wait_time_out_rate: The wait_time_out_rate of this FilesysStats.  # noqa: E501
        :type: float
        """

        self._wait_time_out_rate = wait_time_out_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesysStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesysStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilesysStats):
            return True

        return self.to_dict() != other.to_dict()
