# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class MtreeStatsCapacityInfos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_view': 'str',
        'stats_capacity': 'list[StatsCapacityInfo]',
        'requested_data_interval': 'StatsIntervalQuery',
        'returned_data_interval': 'StatsIntervalQuery',
        'paging_info': 'Paging',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'data_view': 'data_view',
        'stats_capacity': 'stats_capacity',
        'requested_data_interval': 'requested_data_interval',
        'returned_data_interval': 'returned_data_interval',
        'paging_info': 'paging_info',
        'link': 'link'
    }

    def __init__(self, data_view=None, stats_capacity=None, requested_data_interval=None, returned_data_interval=None, paging_info=None, link=None, _configuration=None):  # noqa: E501
        """MtreeStatsCapacityInfos - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._data_view = None
        self._stats_capacity = None
        self._requested_data_interval = None
        self._returned_data_interval = None
        self._paging_info = None
        self._link = None
        self.discriminator = None

        if data_view is not None:
            self.data_view = data_view
        if stats_capacity is not None:
            self.stats_capacity = stats_capacity
        if requested_data_interval is not None:
            self.requested_data_interval = requested_data_interval
        if returned_data_interval is not None:
            self.returned_data_interval = returned_data_interval
        if paging_info is not None:
            self.paging_info = paging_info
        if link is not None:
            self.link = link

    @property
    def data_view(self):
        """Gets the data_view of this MtreeStatsCapacityInfos.  # noqa: E501


        :return: The data_view of this MtreeStatsCapacityInfos.  # noqa: E501
        :rtype: str
        """
        return self._data_view

    @data_view.setter
    def data_view(self, data_view):
        """Sets the data_view of this MtreeStatsCapacityInfos.


        :param data_view: The data_view of this MtreeStatsCapacityInfos.  # noqa: E501
        :type: str
        """

        self._data_view = data_view

    @property
    def stats_capacity(self):
        """Gets the stats_capacity of this MtreeStatsCapacityInfos.  # noqa: E501


        :return: The stats_capacity of this MtreeStatsCapacityInfos.  # noqa: E501
        :rtype: list[StatsCapacityInfo]
        """
        return self._stats_capacity

    @stats_capacity.setter
    def stats_capacity(self, stats_capacity):
        """Sets the stats_capacity of this MtreeStatsCapacityInfos.


        :param stats_capacity: The stats_capacity of this MtreeStatsCapacityInfos.  # noqa: E501
        :type: list[StatsCapacityInfo]
        """

        self._stats_capacity = stats_capacity

    @property
    def requested_data_interval(self):
        """Gets the requested_data_interval of this MtreeStatsCapacityInfos.  # noqa: E501


        :return: The requested_data_interval of this MtreeStatsCapacityInfos.  # noqa: E501
        :rtype: StatsIntervalQuery
        """
        return self._requested_data_interval

    @requested_data_interval.setter
    def requested_data_interval(self, requested_data_interval):
        """Sets the requested_data_interval of this MtreeStatsCapacityInfos.


        :param requested_data_interval: The requested_data_interval of this MtreeStatsCapacityInfos.  # noqa: E501
        :type: StatsIntervalQuery
        """

        self._requested_data_interval = requested_data_interval

    @property
    def returned_data_interval(self):
        """Gets the returned_data_interval of this MtreeStatsCapacityInfos.  # noqa: E501


        :return: The returned_data_interval of this MtreeStatsCapacityInfos.  # noqa: E501
        :rtype: StatsIntervalQuery
        """
        return self._returned_data_interval

    @returned_data_interval.setter
    def returned_data_interval(self, returned_data_interval):
        """Sets the returned_data_interval of this MtreeStatsCapacityInfos.


        :param returned_data_interval: The returned_data_interval of this MtreeStatsCapacityInfos.  # noqa: E501
        :type: StatsIntervalQuery
        """

        self._returned_data_interval = returned_data_interval

    @property
    def paging_info(self):
        """Gets the paging_info of this MtreeStatsCapacityInfos.  # noqa: E501


        :return: The paging_info of this MtreeStatsCapacityInfos.  # noqa: E501
        :rtype: Paging
        """
        return self._paging_info

    @paging_info.setter
    def paging_info(self, paging_info):
        """Sets the paging_info of this MtreeStatsCapacityInfos.


        :param paging_info: The paging_info of this MtreeStatsCapacityInfos.  # noqa: E501
        :type: Paging
        """

        self._paging_info = paging_info

    @property
    def link(self):
        """Gets the link of this MtreeStatsCapacityInfos.  # noqa: E501


        :return: The link of this MtreeStatsCapacityInfos.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this MtreeStatsCapacityInfos.


        :param link: The link of this MtreeStatsCapacityInfos.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MtreeStatsCapacityInfos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtreeStatsCapacityInfos):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtreeStatsCapacityInfos):
            return True

        return self.to_dict() != other.to_dict()
