# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class VdiskDeviceSetLock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_text': 'VdiskDeviceMgmtLockText',
        'timeout_secs': 'int'
    }

    attribute_map = {
        'user_text': 'user_text',
        'timeout_secs': 'timeout_secs'
    }

    def __init__(self, user_text=None, timeout_secs=None, _configuration=None):  # noqa: E501
        """VdiskDeviceSetLock - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_text = None
        self._timeout_secs = None
        self.discriminator = None

        if user_text is not None:
            self.user_text = user_text
        if timeout_secs is not None:
            self.timeout_secs = timeout_secs

    @property
    def user_text(self):
        """Gets the user_text of this VdiskDeviceSetLock.  # noqa: E501


        :return: The user_text of this VdiskDeviceSetLock.  # noqa: E501
        :rtype: VdiskDeviceMgmtLockText
        """
        return self._user_text

    @user_text.setter
    def user_text(self, user_text):
        """Sets the user_text of this VdiskDeviceSetLock.


        :param user_text: The user_text of this VdiskDeviceSetLock.  # noqa: E501
        :type: VdiskDeviceMgmtLockText
        """

        self._user_text = user_text

    @property
    def timeout_secs(self):
        """Gets the timeout_secs of this VdiskDeviceSetLock.  # noqa: E501


        :return: The timeout_secs of this VdiskDeviceSetLock.  # noqa: E501
        :rtype: int
        """
        return self._timeout_secs

    @timeout_secs.setter
    def timeout_secs(self, timeout_secs):
        """Sets the timeout_secs of this VdiskDeviceSetLock.


        :param timeout_secs: The timeout_secs of this VdiskDeviceSetLock.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                timeout_secs is not None and timeout_secs < 0):  # noqa: E501
            raise ValueError("Invalid value for `timeout_secs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._timeout_secs = timeout_secs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VdiskDeviceSetLock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VdiskDeviceSetLock):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VdiskDeviceSetLock):
            return True

        return self.to_dict() != other.to_dict()
