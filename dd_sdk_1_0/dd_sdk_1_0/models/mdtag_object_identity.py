# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class MdtagObjectIdentity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'namespace': 'MdtagNamespace',
        'uuid': 'str',
        'stamp': 'int',
        'create_time': 'int',
        'modify_time': 'int',
        'link': 'RestLinkRep'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'uuid': 'uuid',
        'stamp': 'stamp',
        'create_time': 'create_time',
        'modify_time': 'modify_time',
        'link': 'link'
    }

    def __init__(self, id=None, namespace=None, uuid=None, stamp=None, create_time=None, modify_time=None, link=None, _configuration=None):  # noqa: E501
        """MdtagObjectIdentity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._namespace = None
        self._uuid = None
        self._stamp = None
        self._create_time = None
        self._modify_time = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.namespace = namespace
        self.uuid = uuid
        self.stamp = stamp
        self.create_time = create_time
        self.modify_time = modify_time
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this MdtagObjectIdentity.  # noqa: E501

        External identification string  # noqa: E501

        :return: The id of this MdtagObjectIdentity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MdtagObjectIdentity.

        External identification string  # noqa: E501

        :param id: The id of this MdtagObjectIdentity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this MdtagObjectIdentity.  # noqa: E501


        :return: The namespace of this MdtagObjectIdentity.  # noqa: E501
        :rtype: MdtagNamespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this MdtagObjectIdentity.


        :param namespace: The namespace of this MdtagObjectIdentity.  # noqa: E501
        :type: MdtagNamespace
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def uuid(self):
        """Gets the uuid of this MdtagObjectIdentity.  # noqa: E501


        :return: The uuid of this MdtagObjectIdentity.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this MdtagObjectIdentity.


        :param uuid: The uuid of this MdtagObjectIdentity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def stamp(self):
        """Gets the stamp of this MdtagObjectIdentity.  # noqa: E501

        Monotonically increasing global transaction id  # noqa: E501

        :return: The stamp of this MdtagObjectIdentity.  # noqa: E501
        :rtype: int
        """
        return self._stamp

    @stamp.setter
    def stamp(self, stamp):
        """Sets the stamp of this MdtagObjectIdentity.

        Monotonically increasing global transaction id  # noqa: E501

        :param stamp: The stamp of this MdtagObjectIdentity.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and stamp is None:
            raise ValueError("Invalid value for `stamp`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                stamp is not None and stamp < 0):  # noqa: E501
            raise ValueError("Invalid value for `stamp`, must be a value greater than or equal to `0`")  # noqa: E501

        self._stamp = stamp

    @property
    def create_time(self):
        """Gets the create_time of this MdtagObjectIdentity.  # noqa: E501

        Epoch Unix timestamp integer  # noqa: E501

        :return: The create_time of this MdtagObjectIdentity.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MdtagObjectIdentity.

        Epoch Unix timestamp integer  # noqa: E501

        :param create_time: The create_time of this MdtagObjectIdentity.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                create_time is not None and create_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `create_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._create_time = create_time

    @property
    def modify_time(self):
        """Gets the modify_time of this MdtagObjectIdentity.  # noqa: E501

        Epoch Unix timestamp integer  # noqa: E501

        :return: The modify_time of this MdtagObjectIdentity.  # noqa: E501
        :rtype: int
        """
        return self._modify_time

    @modify_time.setter
    def modify_time(self, modify_time):
        """Sets the modify_time of this MdtagObjectIdentity.

        Epoch Unix timestamp integer  # noqa: E501

        :param modify_time: The modify_time of this MdtagObjectIdentity.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and modify_time is None:
            raise ValueError("Invalid value for `modify_time`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                modify_time is not None and modify_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `modify_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._modify_time = modify_time

    @property
    def link(self):
        """Gets the link of this MdtagObjectIdentity.  # noqa: E501


        :return: The link of this MdtagObjectIdentity.  # noqa: E501
        :rtype: RestLinkRep
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this MdtagObjectIdentity.


        :param link: The link of this MdtagObjectIdentity.  # noqa: E501
        :type: RestLinkRep
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MdtagObjectIdentity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdtagObjectIdentity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MdtagObjectIdentity):
            return True

        return self.to_dict() != other.to_dict()
