# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class MtreeStatsCompressionDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'md_crawbytes': 'int',
        'md_cprebytes': 'int',
        'md_cpostbytes': 'int',
        'md_cdelbytes': 'int',
        'vbytes': 'int',
        'vpre': 'int',
        'vpost': 'int',
        'md_cur_uniq': 'int',
        'md_crawbytes_ddingested': 'int'
    }

    attribute_map = {
        'md_crawbytes': 'md_crawbytes',
        'md_cprebytes': 'md_cprebytes',
        'md_cpostbytes': 'md_cpostbytes',
        'md_cdelbytes': 'md_cdelbytes',
        'vbytes': 'vbytes',
        'vpre': 'vpre',
        'vpost': 'vpost',
        'md_cur_uniq': 'md_cur_uniq',
        'md_crawbytes_ddingested': 'md_crawbytes_ddingested'
    }

    def __init__(self, md_crawbytes=None, md_cprebytes=None, md_cpostbytes=None, md_cdelbytes=None, vbytes=None, vpre=None, vpost=None, md_cur_uniq=None, md_crawbytes_ddingested=None, _configuration=None):  # noqa: E501
        """MtreeStatsCompressionDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._md_crawbytes = None
        self._md_cprebytes = None
        self._md_cpostbytes = None
        self._md_cdelbytes = None
        self._vbytes = None
        self._vpre = None
        self._vpost = None
        self._md_cur_uniq = None
        self._md_crawbytes_ddingested = None
        self.discriminator = None

        if md_crawbytes is not None:
            self.md_crawbytes = md_crawbytes
        if md_cprebytes is not None:
            self.md_cprebytes = md_cprebytes
        if md_cpostbytes is not None:
            self.md_cpostbytes = md_cpostbytes
        if md_cdelbytes is not None:
            self.md_cdelbytes = md_cdelbytes
        if vbytes is not None:
            self.vbytes = vbytes
        if vpre is not None:
            self.vpre = vpre
        if vpost is not None:
            self.vpost = vpost
        if md_cur_uniq is not None:
            self.md_cur_uniq = md_cur_uniq
        if md_crawbytes_ddingested is not None:
            self.md_crawbytes_ddingested = md_crawbytes_ddingested

    @property
    def md_crawbytes(self):
        """Gets the md_crawbytes of this MtreeStatsCompressionDetails.  # noqa: E501


        :return: The md_crawbytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :rtype: int
        """
        return self._md_crawbytes

    @md_crawbytes.setter
    def md_crawbytes(self, md_crawbytes):
        """Sets the md_crawbytes of this MtreeStatsCompressionDetails.


        :param md_crawbytes: The md_crawbytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                md_crawbytes is not None and md_crawbytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `md_crawbytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._md_crawbytes = md_crawbytes

    @property
    def md_cprebytes(self):
        """Gets the md_cprebytes of this MtreeStatsCompressionDetails.  # noqa: E501


        :return: The md_cprebytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :rtype: int
        """
        return self._md_cprebytes

    @md_cprebytes.setter
    def md_cprebytes(self, md_cprebytes):
        """Sets the md_cprebytes of this MtreeStatsCompressionDetails.


        :param md_cprebytes: The md_cprebytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                md_cprebytes is not None and md_cprebytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `md_cprebytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._md_cprebytes = md_cprebytes

    @property
    def md_cpostbytes(self):
        """Gets the md_cpostbytes of this MtreeStatsCompressionDetails.  # noqa: E501


        :return: The md_cpostbytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :rtype: int
        """
        return self._md_cpostbytes

    @md_cpostbytes.setter
    def md_cpostbytes(self, md_cpostbytes):
        """Sets the md_cpostbytes of this MtreeStatsCompressionDetails.


        :param md_cpostbytes: The md_cpostbytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                md_cpostbytes is not None and md_cpostbytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `md_cpostbytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._md_cpostbytes = md_cpostbytes

    @property
    def md_cdelbytes(self):
        """Gets the md_cdelbytes of this MtreeStatsCompressionDetails.  # noqa: E501


        :return: The md_cdelbytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :rtype: int
        """
        return self._md_cdelbytes

    @md_cdelbytes.setter
    def md_cdelbytes(self, md_cdelbytes):
        """Sets the md_cdelbytes of this MtreeStatsCompressionDetails.


        :param md_cdelbytes: The md_cdelbytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                md_cdelbytes is not None and md_cdelbytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `md_cdelbytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._md_cdelbytes = md_cdelbytes

    @property
    def vbytes(self):
        """Gets the vbytes of this MtreeStatsCompressionDetails.  # noqa: E501


        :return: The vbytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :rtype: int
        """
        return self._vbytes

    @vbytes.setter
    def vbytes(self, vbytes):
        """Sets the vbytes of this MtreeStatsCompressionDetails.


        :param vbytes: The vbytes of this MtreeStatsCompressionDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                vbytes is not None and vbytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `vbytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vbytes = vbytes

    @property
    def vpre(self):
        """Gets the vpre of this MtreeStatsCompressionDetails.  # noqa: E501


        :return: The vpre of this MtreeStatsCompressionDetails.  # noqa: E501
        :rtype: int
        """
        return self._vpre

    @vpre.setter
    def vpre(self, vpre):
        """Sets the vpre of this MtreeStatsCompressionDetails.


        :param vpre: The vpre of this MtreeStatsCompressionDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                vpre is not None and vpre < 0):  # noqa: E501
            raise ValueError("Invalid value for `vpre`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vpre = vpre

    @property
    def vpost(self):
        """Gets the vpost of this MtreeStatsCompressionDetails.  # noqa: E501


        :return: The vpost of this MtreeStatsCompressionDetails.  # noqa: E501
        :rtype: int
        """
        return self._vpost

    @vpost.setter
    def vpost(self, vpost):
        """Sets the vpost of this MtreeStatsCompressionDetails.


        :param vpost: The vpost of this MtreeStatsCompressionDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                vpost is not None and vpost < 0):  # noqa: E501
            raise ValueError("Invalid value for `vpost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vpost = vpost

    @property
    def md_cur_uniq(self):
        """Gets the md_cur_uniq of this MtreeStatsCompressionDetails.  # noqa: E501


        :return: The md_cur_uniq of this MtreeStatsCompressionDetails.  # noqa: E501
        :rtype: int
        """
        return self._md_cur_uniq

    @md_cur_uniq.setter
    def md_cur_uniq(self, md_cur_uniq):
        """Sets the md_cur_uniq of this MtreeStatsCompressionDetails.


        :param md_cur_uniq: The md_cur_uniq of this MtreeStatsCompressionDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                md_cur_uniq is not None and md_cur_uniq < 0):  # noqa: E501
            raise ValueError("Invalid value for `md_cur_uniq`, must be a value greater than or equal to `0`")  # noqa: E501

        self._md_cur_uniq = md_cur_uniq

    @property
    def md_crawbytes_ddingested(self):
        """Gets the md_crawbytes_ddingested of this MtreeStatsCompressionDetails.  # noqa: E501


        :return: The md_crawbytes_ddingested of this MtreeStatsCompressionDetails.  # noqa: E501
        :rtype: int
        """
        return self._md_crawbytes_ddingested

    @md_crawbytes_ddingested.setter
    def md_crawbytes_ddingested(self, md_crawbytes_ddingested):
        """Sets the md_crawbytes_ddingested of this MtreeStatsCompressionDetails.


        :param md_crawbytes_ddingested: The md_crawbytes_ddingested of this MtreeStatsCompressionDetails.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                md_crawbytes_ddingested is not None and md_crawbytes_ddingested < 0):  # noqa: E501
            raise ValueError("Invalid value for `md_crawbytes_ddingested`, must be a value greater than or equal to `0`")  # noqa: E501

        self._md_crawbytes_ddingested = md_crawbytes_ddingested

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MtreeStatsCompressionDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtreeStatsCompressionDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtreeStatsCompressionDetails):
            return True

        return self.to_dict() != other.to_dict()
