# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class ExportReferralModify20(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'referral_name': 'str',
        'remote_servers': 'list[str]',
        'remote_path': 'str'
    }

    attribute_map = {
        'referral_name': 'referral_name',
        'remote_servers': 'remote_servers',
        'remote_path': 'remote_path'
    }

    def __init__(self, referral_name=None, remote_servers=None, remote_path=None, _configuration=None):  # noqa: E501
        """ExportReferralModify20 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._referral_name = None
        self._remote_servers = None
        self._remote_path = None
        self.discriminator = None

        self.referral_name = referral_name
        if remote_servers is not None:
            self.remote_servers = remote_servers
        if remote_path is not None:
            self.remote_path = remote_path

    @property
    def referral_name(self):
        """Gets the referral_name of this ExportReferralModify20.  # noqa: E501


        :return: The referral_name of this ExportReferralModify20.  # noqa: E501
        :rtype: str
        """
        return self._referral_name

    @referral_name.setter
    def referral_name(self, referral_name):
        """Sets the referral_name of this ExportReferralModify20.


        :param referral_name: The referral_name of this ExportReferralModify20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and referral_name is None:
            raise ValueError("Invalid value for `referral_name`, must not be `None`")  # noqa: E501

        self._referral_name = referral_name

    @property
    def remote_servers(self):
        """Gets the remote_servers of this ExportReferralModify20.  # noqa: E501

        List of remote servers\"  # noqa: E501

        :return: The remote_servers of this ExportReferralModify20.  # noqa: E501
        :rtype: list[str]
        """
        return self._remote_servers

    @remote_servers.setter
    def remote_servers(self, remote_servers):
        """Sets the remote_servers of this ExportReferralModify20.

        List of remote servers\"  # noqa: E501

        :param remote_servers: The remote_servers of this ExportReferralModify20.  # noqa: E501
        :type: list[str]
        """

        self._remote_servers = remote_servers

    @property
    def remote_path(self):
        """Gets the remote_path of this ExportReferralModify20.  # noqa: E501


        :return: The remote_path of this ExportReferralModify20.  # noqa: E501
        :rtype: str
        """
        return self._remote_path

    @remote_path.setter
    def remote_path(self, remote_path):
        """Sets the remote_path of this ExportReferralModify20.


        :param remote_path: The remote_path of this ExportReferralModify20.  # noqa: E501
        :type: str
        """

        self._remote_path = remote_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportReferralModify20, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportReferralModify20):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExportReferralModify20):
            return True

        return self.to_dict() != other.to_dict()
