# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class RestPcrJobModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'bool',
        'options': 'RestPcrJobOptions',
        'include_paths': 'list[RestPcrPath]',
        'exclude_paths': 'list[str]',
        'exclude_file_with_extensions': 'list[str]'
    }

    attribute_map = {
        'start': 'start',
        'options': 'options',
        'include_paths': 'include_paths',
        'exclude_paths': 'exclude_paths',
        'exclude_file_with_extensions': 'exclude_file_with_extensions'
    }

    def __init__(self, start=None, options=None, include_paths=None, exclude_paths=None, exclude_file_with_extensions=None, _configuration=None):  # noqa: E501
        """RestPcrJobModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start = None
        self._options = None
        self._include_paths = None
        self._exclude_paths = None
        self._exclude_file_with_extensions = None
        self.discriminator = None

        if start is not None:
            self.start = start
        if options is not None:
            self.options = options
        if include_paths is not None:
            self.include_paths = include_paths
        if exclude_paths is not None:
            self.exclude_paths = exclude_paths
        if exclude_file_with_extensions is not None:
            self.exclude_file_with_extensions = exclude_file_with_extensions

    @property
    def start(self):
        """Gets the start of this RestPcrJobModify.  # noqa: E501


        :return: The start of this RestPcrJobModify.  # noqa: E501
        :rtype: bool
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this RestPcrJobModify.


        :param start: The start of this RestPcrJobModify.  # noqa: E501
        :type: bool
        """

        self._start = start

    @property
    def options(self):
        """Gets the options of this RestPcrJobModify.  # noqa: E501


        :return: The options of this RestPcrJobModify.  # noqa: E501
        :rtype: RestPcrJobOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this RestPcrJobModify.


        :param options: The options of this RestPcrJobModify.  # noqa: E501
        :type: RestPcrJobOptions
        """

        self._options = options

    @property
    def include_paths(self):
        """Gets the include_paths of this RestPcrJobModify.  # noqa: E501


        :return: The include_paths of this RestPcrJobModify.  # noqa: E501
        :rtype: list[RestPcrPath]
        """
        return self._include_paths

    @include_paths.setter
    def include_paths(self, include_paths):
        """Sets the include_paths of this RestPcrJobModify.


        :param include_paths: The include_paths of this RestPcrJobModify.  # noqa: E501
        :type: list[RestPcrPath]
        """

        self._include_paths = include_paths

    @property
    def exclude_paths(self):
        """Gets the exclude_paths of this RestPcrJobModify.  # noqa: E501


        :return: The exclude_paths of this RestPcrJobModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_paths

    @exclude_paths.setter
    def exclude_paths(self, exclude_paths):
        """Sets the exclude_paths of this RestPcrJobModify.


        :param exclude_paths: The exclude_paths of this RestPcrJobModify.  # noqa: E501
        :type: list[str]
        """

        self._exclude_paths = exclude_paths

    @property
    def exclude_file_with_extensions(self):
        """Gets the exclude_file_with_extensions of this RestPcrJobModify.  # noqa: E501


        :return: The exclude_file_with_extensions of this RestPcrJobModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_file_with_extensions

    @exclude_file_with_extensions.setter
    def exclude_file_with_extensions(self, exclude_file_with_extensions):
        """Sets the exclude_file_with_extensions of this RestPcrJobModify.


        :param exclude_file_with_extensions: The exclude_file_with_extensions of this RestPcrJobModify.  # noqa: E501
        :type: list[str]
        """

        self._exclude_file_with_extensions = exclude_file_with_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestPcrJobModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestPcrJobModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RestPcrJobModify):
            return True

        return self.to_dict() != other.to_dict()
