# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class CertInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_content': 'str',
        'cert_password': 'str',
        'cert_valid_from': 'str',
        'cert_valid_until': 'str',
        'cert_fingerprint': 'str',
        'cert_subject': 'str',
        'cert_issuer': 'str'
    }

    attribute_map = {
        'cert_content': 'cert_content',
        'cert_password': 'cert_password',
        'cert_valid_from': 'cert_valid_from',
        'cert_valid_until': 'cert_valid_until',
        'cert_fingerprint': 'cert_fingerprint',
        'cert_subject': 'cert_subject',
        'cert_issuer': 'cert_issuer'
    }

    def __init__(self, cert_content=None, cert_password=None, cert_valid_from=None, cert_valid_until=None, cert_fingerprint=None, cert_subject=None, cert_issuer=None, _configuration=None):  # noqa: E501
        """CertInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cert_content = None
        self._cert_password = None
        self._cert_valid_from = None
        self._cert_valid_until = None
        self._cert_fingerprint = None
        self._cert_subject = None
        self._cert_issuer = None
        self.discriminator = None

        if cert_content is not None:
            self.cert_content = cert_content
        if cert_password is not None:
            self.cert_password = cert_password
        if cert_valid_from is not None:
            self.cert_valid_from = cert_valid_from
        if cert_valid_until is not None:
            self.cert_valid_until = cert_valid_until
        if cert_fingerprint is not None:
            self.cert_fingerprint = cert_fingerprint
        if cert_subject is not None:
            self.cert_subject = cert_subject
        if cert_issuer is not None:
            self.cert_issuer = cert_issuer

    @property
    def cert_content(self):
        """Gets the cert_content of this CertInfo.  # noqa: E501


        :return: The cert_content of this CertInfo.  # noqa: E501
        :rtype: str
        """
        return self._cert_content

    @cert_content.setter
    def cert_content(self, cert_content):
        """Sets the cert_content of this CertInfo.


        :param cert_content: The cert_content of this CertInfo.  # noqa: E501
        :type: str
        """

        self._cert_content = cert_content

    @property
    def cert_password(self):
        """Gets the cert_password of this CertInfo.  # noqa: E501


        :return: The cert_password of this CertInfo.  # noqa: E501
        :rtype: str
        """
        return self._cert_password

    @cert_password.setter
    def cert_password(self, cert_password):
        """Sets the cert_password of this CertInfo.


        :param cert_password: The cert_password of this CertInfo.  # noqa: E501
        :type: str
        """

        self._cert_password = cert_password

    @property
    def cert_valid_from(self):
        """Gets the cert_valid_from of this CertInfo.  # noqa: E501


        :return: The cert_valid_from of this CertInfo.  # noqa: E501
        :rtype: str
        """
        return self._cert_valid_from

    @cert_valid_from.setter
    def cert_valid_from(self, cert_valid_from):
        """Sets the cert_valid_from of this CertInfo.


        :param cert_valid_from: The cert_valid_from of this CertInfo.  # noqa: E501
        :type: str
        """

        self._cert_valid_from = cert_valid_from

    @property
    def cert_valid_until(self):
        """Gets the cert_valid_until of this CertInfo.  # noqa: E501


        :return: The cert_valid_until of this CertInfo.  # noqa: E501
        :rtype: str
        """
        return self._cert_valid_until

    @cert_valid_until.setter
    def cert_valid_until(self, cert_valid_until):
        """Sets the cert_valid_until of this CertInfo.


        :param cert_valid_until: The cert_valid_until of this CertInfo.  # noqa: E501
        :type: str
        """

        self._cert_valid_until = cert_valid_until

    @property
    def cert_fingerprint(self):
        """Gets the cert_fingerprint of this CertInfo.  # noqa: E501


        :return: The cert_fingerprint of this CertInfo.  # noqa: E501
        :rtype: str
        """
        return self._cert_fingerprint

    @cert_fingerprint.setter
    def cert_fingerprint(self, cert_fingerprint):
        """Sets the cert_fingerprint of this CertInfo.


        :param cert_fingerprint: The cert_fingerprint of this CertInfo.  # noqa: E501
        :type: str
        """

        self._cert_fingerprint = cert_fingerprint

    @property
    def cert_subject(self):
        """Gets the cert_subject of this CertInfo.  # noqa: E501


        :return: The cert_subject of this CertInfo.  # noqa: E501
        :rtype: str
        """
        return self._cert_subject

    @cert_subject.setter
    def cert_subject(self, cert_subject):
        """Sets the cert_subject of this CertInfo.


        :param cert_subject: The cert_subject of this CertInfo.  # noqa: E501
        :type: str
        """

        self._cert_subject = cert_subject

    @property
    def cert_issuer(self):
        """Gets the cert_issuer of this CertInfo.  # noqa: E501


        :return: The cert_issuer of this CertInfo.  # noqa: E501
        :rtype: str
        """
        return self._cert_issuer

    @cert_issuer.setter
    def cert_issuer(self, cert_issuer):
        """Sets the cert_issuer of this CertInfo.


        :param cert_issuer: The cert_issuer of this CertInfo.  # noqa: E501
        :type: str
        """

        self._cert_issuer = cert_issuer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertInfo):
            return True

        return self.to_dict() != other.to_dict()
