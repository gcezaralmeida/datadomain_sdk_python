# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FilesysInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'str',
        'fs_status': 'StatusInfo',
        'fs_clean_status': 'CleanInfo',
        'fs_cleaning_info': 'CleaningInfo',
        'fs_uptime_secs': 'int',
        'cm_partitions': 'Partitions',
        'fs_detailed_space_info': 'SpaceDetailedInfo',
        'fs_options': 'list[KeyValuePair]',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'hostname': 'hostname',
        'fs_status': 'fs_status',
        'fs_clean_status': 'fs_clean_status',
        'fs_cleaning_info': 'fs_cleaning_info',
        'fs_uptime_secs': 'fs_uptime_secs',
        'cm_partitions': 'cm_partitions',
        'fs_detailed_space_info': 'fs_detailed_space_info',
        'fs_options': 'fs_options',
        'link': 'link'
    }

    def __init__(self, hostname=None, fs_status=None, fs_clean_status=None, fs_cleaning_info=None, fs_uptime_secs=None, cm_partitions=None, fs_detailed_space_info=None, fs_options=None, link=None, _configuration=None):  # noqa: E501
        """FilesysInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._hostname = None
        self._fs_status = None
        self._fs_clean_status = None
        self._fs_cleaning_info = None
        self._fs_uptime_secs = None
        self._cm_partitions = None
        self._fs_detailed_space_info = None
        self._fs_options = None
        self._link = None
        self.discriminator = None

        self.hostname = hostname
        if fs_status is not None:
            self.fs_status = fs_status
        if fs_clean_status is not None:
            self.fs_clean_status = fs_clean_status
        if fs_cleaning_info is not None:
            self.fs_cleaning_info = fs_cleaning_info
        if fs_uptime_secs is not None:
            self.fs_uptime_secs = fs_uptime_secs
        if cm_partitions is not None:
            self.cm_partitions = cm_partitions
        if fs_detailed_space_info is not None:
            self.fs_detailed_space_info = fs_detailed_space_info
        if fs_options is not None:
            self.fs_options = fs_options
        if link is not None:
            self.link = link

    @property
    def hostname(self):
        """Gets the hostname of this FilesysInfo.  # noqa: E501


        :return: The hostname of this FilesysInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this FilesysInfo.


        :param hostname: The hostname of this FilesysInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def fs_status(self):
        """Gets the fs_status of this FilesysInfo.  # noqa: E501


        :return: The fs_status of this FilesysInfo.  # noqa: E501
        :rtype: StatusInfo
        """
        return self._fs_status

    @fs_status.setter
    def fs_status(self, fs_status):
        """Sets the fs_status of this FilesysInfo.


        :param fs_status: The fs_status of this FilesysInfo.  # noqa: E501
        :type: StatusInfo
        """

        self._fs_status = fs_status

    @property
    def fs_clean_status(self):
        """Gets the fs_clean_status of this FilesysInfo.  # noqa: E501


        :return: The fs_clean_status of this FilesysInfo.  # noqa: E501
        :rtype: CleanInfo
        """
        return self._fs_clean_status

    @fs_clean_status.setter
    def fs_clean_status(self, fs_clean_status):
        """Sets the fs_clean_status of this FilesysInfo.


        :param fs_clean_status: The fs_clean_status of this FilesysInfo.  # noqa: E501
        :type: CleanInfo
        """

        self._fs_clean_status = fs_clean_status

    @property
    def fs_cleaning_info(self):
        """Gets the fs_cleaning_info of this FilesysInfo.  # noqa: E501


        :return: The fs_cleaning_info of this FilesysInfo.  # noqa: E501
        :rtype: CleaningInfo
        """
        return self._fs_cleaning_info

    @fs_cleaning_info.setter
    def fs_cleaning_info(self, fs_cleaning_info):
        """Sets the fs_cleaning_info of this FilesysInfo.


        :param fs_cleaning_info: The fs_cleaning_info of this FilesysInfo.  # noqa: E501
        :type: CleaningInfo
        """

        self._fs_cleaning_info = fs_cleaning_info

    @property
    def fs_uptime_secs(self):
        """Gets the fs_uptime_secs of this FilesysInfo.  # noqa: E501


        :return: The fs_uptime_secs of this FilesysInfo.  # noqa: E501
        :rtype: int
        """
        return self._fs_uptime_secs

    @fs_uptime_secs.setter
    def fs_uptime_secs(self, fs_uptime_secs):
        """Sets the fs_uptime_secs of this FilesysInfo.


        :param fs_uptime_secs: The fs_uptime_secs of this FilesysInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                fs_uptime_secs is not None and fs_uptime_secs < 0):  # noqa: E501
            raise ValueError("Invalid value for `fs_uptime_secs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fs_uptime_secs = fs_uptime_secs

    @property
    def cm_partitions(self):
        """Gets the cm_partitions of this FilesysInfo.  # noqa: E501


        :return: The cm_partitions of this FilesysInfo.  # noqa: E501
        :rtype: Partitions
        """
        return self._cm_partitions

    @cm_partitions.setter
    def cm_partitions(self, cm_partitions):
        """Sets the cm_partitions of this FilesysInfo.


        :param cm_partitions: The cm_partitions of this FilesysInfo.  # noqa: E501
        :type: Partitions
        """

        self._cm_partitions = cm_partitions

    @property
    def fs_detailed_space_info(self):
        """Gets the fs_detailed_space_info of this FilesysInfo.  # noqa: E501


        :return: The fs_detailed_space_info of this FilesysInfo.  # noqa: E501
        :rtype: SpaceDetailedInfo
        """
        return self._fs_detailed_space_info

    @fs_detailed_space_info.setter
    def fs_detailed_space_info(self, fs_detailed_space_info):
        """Sets the fs_detailed_space_info of this FilesysInfo.


        :param fs_detailed_space_info: The fs_detailed_space_info of this FilesysInfo.  # noqa: E501
        :type: SpaceDetailedInfo
        """

        self._fs_detailed_space_info = fs_detailed_space_info

    @property
    def fs_options(self):
        """Gets the fs_options of this FilesysInfo.  # noqa: E501


        :return: The fs_options of this FilesysInfo.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._fs_options

    @fs_options.setter
    def fs_options(self, fs_options):
        """Sets the fs_options of this FilesysInfo.


        :param fs_options: The fs_options of this FilesysInfo.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._fs_options = fs_options

    @property
    def link(self):
        """Gets the link of this FilesysInfo.  # noqa: E501


        :return: The link of this FilesysInfo.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this FilesysInfo.


        :param link: The link of this FilesysInfo.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesysInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesysInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilesysInfo):
            return True

        return self.to_dict() != other.to_dict()
