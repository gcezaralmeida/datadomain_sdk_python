# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FileReplicationLast24hrsDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logical_replicated': 'int',
        'failed_transfers': 'int',
        'failure_rate': 'str',
        'completed_transfers': 'int',
        'compression_rate': 'str'
    }

    attribute_map = {
        'logical_replicated': 'logical_replicated',
        'failed_transfers': 'failed_transfers',
        'failure_rate': 'failure_rate',
        'completed_transfers': 'completed_transfers',
        'compression_rate': 'compression_rate'
    }

    def __init__(self, logical_replicated=None, failed_transfers=None, failure_rate=None, completed_transfers=None, compression_rate=None, _configuration=None):  # noqa: E501
        """FileReplicationLast24hrsDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._logical_replicated = None
        self._failed_transfers = None
        self._failure_rate = None
        self._completed_transfers = None
        self._compression_rate = None
        self.discriminator = None

        self.logical_replicated = logical_replicated
        self.failed_transfers = failed_transfers
        self.failure_rate = failure_rate
        self.completed_transfers = completed_transfers
        self.compression_rate = compression_rate

    @property
    def logical_replicated(self):
        """Gets the logical_replicated of this FileReplicationLast24hrsDetails.  # noqa: E501


        :return: The logical_replicated of this FileReplicationLast24hrsDetails.  # noqa: E501
        :rtype: int
        """
        return self._logical_replicated

    @logical_replicated.setter
    def logical_replicated(self, logical_replicated):
        """Sets the logical_replicated of this FileReplicationLast24hrsDetails.


        :param logical_replicated: The logical_replicated of this FileReplicationLast24hrsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and logical_replicated is None:
            raise ValueError("Invalid value for `logical_replicated`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                logical_replicated is not None and logical_replicated < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_replicated`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_replicated = logical_replicated

    @property
    def failed_transfers(self):
        """Gets the failed_transfers of this FileReplicationLast24hrsDetails.  # noqa: E501


        :return: The failed_transfers of this FileReplicationLast24hrsDetails.  # noqa: E501
        :rtype: int
        """
        return self._failed_transfers

    @failed_transfers.setter
    def failed_transfers(self, failed_transfers):
        """Sets the failed_transfers of this FileReplicationLast24hrsDetails.


        :param failed_transfers: The failed_transfers of this FileReplicationLast24hrsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and failed_transfers is None:
            raise ValueError("Invalid value for `failed_transfers`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                failed_transfers is not None and failed_transfers < 0):  # noqa: E501
            raise ValueError("Invalid value for `failed_transfers`, must be a value greater than or equal to `0`")  # noqa: E501

        self._failed_transfers = failed_transfers

    @property
    def failure_rate(self):
        """Gets the failure_rate of this FileReplicationLast24hrsDetails.  # noqa: E501


        :return: The failure_rate of this FileReplicationLast24hrsDetails.  # noqa: E501
        :rtype: str
        """
        return self._failure_rate

    @failure_rate.setter
    def failure_rate(self, failure_rate):
        """Sets the failure_rate of this FileReplicationLast24hrsDetails.


        :param failure_rate: The failure_rate of this FileReplicationLast24hrsDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and failure_rate is None:
            raise ValueError("Invalid value for `failure_rate`, must not be `None`")  # noqa: E501

        self._failure_rate = failure_rate

    @property
    def completed_transfers(self):
        """Gets the completed_transfers of this FileReplicationLast24hrsDetails.  # noqa: E501


        :return: The completed_transfers of this FileReplicationLast24hrsDetails.  # noqa: E501
        :rtype: int
        """
        return self._completed_transfers

    @completed_transfers.setter
    def completed_transfers(self, completed_transfers):
        """Sets the completed_transfers of this FileReplicationLast24hrsDetails.


        :param completed_transfers: The completed_transfers of this FileReplicationLast24hrsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and completed_transfers is None:
            raise ValueError("Invalid value for `completed_transfers`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                completed_transfers is not None and completed_transfers < 0):  # noqa: E501
            raise ValueError("Invalid value for `completed_transfers`, must be a value greater than or equal to `0`")  # noqa: E501

        self._completed_transfers = completed_transfers

    @property
    def compression_rate(self):
        """Gets the compression_rate of this FileReplicationLast24hrsDetails.  # noqa: E501


        :return: The compression_rate of this FileReplicationLast24hrsDetails.  # noqa: E501
        :rtype: str
        """
        return self._compression_rate

    @compression_rate.setter
    def compression_rate(self, compression_rate):
        """Sets the compression_rate of this FileReplicationLast24hrsDetails.


        :param compression_rate: The compression_rate of this FileReplicationLast24hrsDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and compression_rate is None:
            raise ValueError("Invalid value for `compression_rate`, must not be `None`")  # noqa: E501

        self._compression_rate = compression_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileReplicationLast24hrsDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileReplicationLast24hrsDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileReplicationLast24hrsDetails):
            return True

        return self.to_dict() != other.to_dict()
