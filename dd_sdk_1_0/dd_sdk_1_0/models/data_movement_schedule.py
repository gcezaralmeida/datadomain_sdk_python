# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class DataMovementSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'days': 'str',
        'time_hour': 'str',
        'time_min': 'str',
        'repeat_every_n_weeks': 'int'
    }

    attribute_map = {
        'days': 'days',
        'time_hour': 'time_hour',
        'time_min': 'time_min',
        'repeat_every_n_weeks': 'repeat_every_n_weeks'
    }

    def __init__(self, days=None, time_hour=None, time_min=None, repeat_every_n_weeks=None, _configuration=None):  # noqa: E501
        """DataMovementSchedule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._days = None
        self._time_hour = None
        self._time_min = None
        self._repeat_every_n_weeks = None
        self.discriminator = None

        if days is not None:
            self.days = days
        if time_hour is not None:
            self.time_hour = time_hour
        if time_min is not None:
            self.time_min = time_min
        if repeat_every_n_weeks is not None:
            self.repeat_every_n_weeks = repeat_every_n_weeks

    @property
    def days(self):
        """Gets the days of this DataMovementSchedule.  # noqa: E501


        :return: The days of this DataMovementSchedule.  # noqa: E501
        :rtype: str
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this DataMovementSchedule.


        :param days: The days of this DataMovementSchedule.  # noqa: E501
        :type: str
        """

        self._days = days

    @property
    def time_hour(self):
        """Gets the time_hour of this DataMovementSchedule.  # noqa: E501


        :return: The time_hour of this DataMovementSchedule.  # noqa: E501
        :rtype: str
        """
        return self._time_hour

    @time_hour.setter
    def time_hour(self, time_hour):
        """Sets the time_hour of this DataMovementSchedule.


        :param time_hour: The time_hour of this DataMovementSchedule.  # noqa: E501
        :type: str
        """

        self._time_hour = time_hour

    @property
    def time_min(self):
        """Gets the time_min of this DataMovementSchedule.  # noqa: E501


        :return: The time_min of this DataMovementSchedule.  # noqa: E501
        :rtype: str
        """
        return self._time_min

    @time_min.setter
    def time_min(self, time_min):
        """Sets the time_min of this DataMovementSchedule.


        :param time_min: The time_min of this DataMovementSchedule.  # noqa: E501
        :type: str
        """

        self._time_min = time_min

    @property
    def repeat_every_n_weeks(self):
        """Gets the repeat_every_n_weeks of this DataMovementSchedule.  # noqa: E501


        :return: The repeat_every_n_weeks of this DataMovementSchedule.  # noqa: E501
        :rtype: int
        """
        return self._repeat_every_n_weeks

    @repeat_every_n_weeks.setter
    def repeat_every_n_weeks(self, repeat_every_n_weeks):
        """Sets the repeat_every_n_weeks of this DataMovementSchedule.


        :param repeat_every_n_weeks: The repeat_every_n_weeks of this DataMovementSchedule.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_every_n_weeks is not None and repeat_every_n_weeks < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_every_n_weeks`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_every_n_weeks = repeat_every_n_weeks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataMovementSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataMovementSchedule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataMovementSchedule):
            return True

        return self.to_dict() != other.to_dict()
