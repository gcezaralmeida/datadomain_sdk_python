# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class MdtagObjectModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'namespace': 'MdtagNamespace',
        'collection': 'MdtagCollection',
        'overwrite_flags': 'MdtagSetFlags',
        'tagset': 'list[KeyValuePairModify]'
    }

    attribute_map = {
        'namespace': 'namespace',
        'collection': 'collection',
        'overwrite_flags': 'overwrite_flags',
        'tagset': 'tagset'
    }

    def __init__(self, namespace=None, collection=None, overwrite_flags=None, tagset=None, _configuration=None):  # noqa: E501
        """MdtagObjectModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._namespace = None
        self._collection = None
        self._overwrite_flags = None
        self._tagset = None
        self.discriminator = None

        self.namespace = namespace
        if collection is not None:
            self.collection = collection
        if overwrite_flags is not None:
            self.overwrite_flags = overwrite_flags
        if tagset is not None:
            self.tagset = tagset

    @property
    def namespace(self):
        """Gets the namespace of this MdtagObjectModify.  # noqa: E501


        :return: The namespace of this MdtagObjectModify.  # noqa: E501
        :rtype: MdtagNamespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this MdtagObjectModify.


        :param namespace: The namespace of this MdtagObjectModify.  # noqa: E501
        :type: MdtagNamespace
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def collection(self):
        """Gets the collection of this MdtagObjectModify.  # noqa: E501


        :return: The collection of this MdtagObjectModify.  # noqa: E501
        :rtype: MdtagCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this MdtagObjectModify.


        :param collection: The collection of this MdtagObjectModify.  # noqa: E501
        :type: MdtagCollection
        """

        self._collection = collection

    @property
    def overwrite_flags(self):
        """Gets the overwrite_flags of this MdtagObjectModify.  # noqa: E501

        Default behavior is to use add-overwrite for any supplied tag names.  # noqa: E501

        :return: The overwrite_flags of this MdtagObjectModify.  # noqa: E501
        :rtype: MdtagSetFlags
        """
        return self._overwrite_flags

    @overwrite_flags.setter
    def overwrite_flags(self, overwrite_flags):
        """Sets the overwrite_flags of this MdtagObjectModify.

        Default behavior is to use add-overwrite for any supplied tag names.  # noqa: E501

        :param overwrite_flags: The overwrite_flags of this MdtagObjectModify.  # noqa: E501
        :type: MdtagSetFlags
        """

        self._overwrite_flags = overwrite_flags

    @property
    def tagset(self):
        """Gets the tagset of this MdtagObjectModify.  # noqa: E501

        If value is not set, the property will be deleted. Otherwise, it will be added.  # noqa: E501

        :return: The tagset of this MdtagObjectModify.  # noqa: E501
        :rtype: list[KeyValuePairModify]
        """
        return self._tagset

    @tagset.setter
    def tagset(self, tagset):
        """Sets the tagset of this MdtagObjectModify.

        If value is not set, the property will be deleted. Otherwise, it will be added.  # noqa: E501

        :param tagset: The tagset of this MdtagObjectModify.  # noqa: E501
        :type: list[KeyValuePairModify]
        """

        self._tagset = tagset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MdtagObjectModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdtagObjectModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MdtagObjectModify):
            return True

        return self.to_dict() != other.to_dict()
