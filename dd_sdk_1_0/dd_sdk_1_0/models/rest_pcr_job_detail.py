# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class RestPcrJobDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'measurement_id': 'int',
        'measurement_description': 'str',
        'user_description': 'str',
        'priority': 'PcrJobPriority',
        'state': 'PcrJobState',
        'creation_epoch': 'int',
        'snapshot_epoch': 'int',
        'start_epoch': 'int',
        'finish_epoch': 'int',
        'percent_done': 'int',
        'files_seen_count': 'int',
        'paths_not_found_count': 'int',
        'active_tier': 'TierCompInfo',
        'extended_retention_tier': 'TierCompInfo',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'id': 'id',
        'measurement_id': 'measurement_id',
        'measurement_description': 'measurement_description',
        'user_description': 'user_description',
        'priority': 'priority',
        'state': 'state',
        'creation_epoch': 'creation_epoch',
        'snapshot_epoch': 'snapshot_epoch',
        'start_epoch': 'start_epoch',
        'finish_epoch': 'finish_epoch',
        'percent_done': 'percent_done',
        'files_seen_count': 'files_seen_count',
        'paths_not_found_count': 'paths_not_found_count',
        'active_tier': 'active_tier',
        'extended_retention_tier': 'extended_retention_tier',
        'link': 'link'
    }

    def __init__(self, id=None, measurement_id=None, measurement_description=None, user_description=None, priority=None, state=None, creation_epoch=None, snapshot_epoch=None, start_epoch=None, finish_epoch=None, percent_done=None, files_seen_count=None, paths_not_found_count=None, active_tier=None, extended_retention_tier=None, link=None, _configuration=None):  # noqa: E501
        """RestPcrJobDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._measurement_id = None
        self._measurement_description = None
        self._user_description = None
        self._priority = None
        self._state = None
        self._creation_epoch = None
        self._snapshot_epoch = None
        self._start_epoch = None
        self._finish_epoch = None
        self._percent_done = None
        self._files_seen_count = None
        self._paths_not_found_count = None
        self._active_tier = None
        self._extended_retention_tier = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.measurement_id = measurement_id
        self.measurement_description = measurement_description
        self.user_description = user_description
        if priority is not None:
            self.priority = priority
        self.state = state
        self.creation_epoch = creation_epoch
        if snapshot_epoch is not None:
            self.snapshot_epoch = snapshot_epoch
        if start_epoch is not None:
            self.start_epoch = start_epoch
        if finish_epoch is not None:
            self.finish_epoch = finish_epoch
        if percent_done is not None:
            self.percent_done = percent_done
        if files_seen_count is not None:
            self.files_seen_count = files_seen_count
        if paths_not_found_count is not None:
            self.paths_not_found_count = paths_not_found_count
        if active_tier is not None:
            self.active_tier = active_tier
        if extended_retention_tier is not None:
            self.extended_retention_tier = extended_retention_tier
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this RestPcrJobDetail.  # noqa: E501


        :return: The id of this RestPcrJobDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestPcrJobDetail.


        :param id: The id of this RestPcrJobDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def measurement_id(self):
        """Gets the measurement_id of this RestPcrJobDetail.  # noqa: E501


        :return: The measurement_id of this RestPcrJobDetail.  # noqa: E501
        :rtype: int
        """
        return self._measurement_id

    @measurement_id.setter
    def measurement_id(self, measurement_id):
        """Sets the measurement_id of this RestPcrJobDetail.


        :param measurement_id: The measurement_id of this RestPcrJobDetail.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and measurement_id is None:
            raise ValueError("Invalid value for `measurement_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                measurement_id is not None and measurement_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `measurement_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._measurement_id = measurement_id

    @property
    def measurement_description(self):
        """Gets the measurement_description of this RestPcrJobDetail.  # noqa: E501


        :return: The measurement_description of this RestPcrJobDetail.  # noqa: E501
        :rtype: str
        """
        return self._measurement_description

    @measurement_description.setter
    def measurement_description(self, measurement_description):
        """Sets the measurement_description of this RestPcrJobDetail.


        :param measurement_description: The measurement_description of this RestPcrJobDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and measurement_description is None:
            raise ValueError("Invalid value for `measurement_description`, must not be `None`")  # noqa: E501

        self._measurement_description = measurement_description

    @property
    def user_description(self):
        """Gets the user_description of this RestPcrJobDetail.  # noqa: E501


        :return: The user_description of this RestPcrJobDetail.  # noqa: E501
        :rtype: str
        """
        return self._user_description

    @user_description.setter
    def user_description(self, user_description):
        """Sets the user_description of this RestPcrJobDetail.


        :param user_description: The user_description of this RestPcrJobDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_description is None:
            raise ValueError("Invalid value for `user_description`, must not be `None`")  # noqa: E501

        self._user_description = user_description

    @property
    def priority(self):
        """Gets the priority of this RestPcrJobDetail.  # noqa: E501


        :return: The priority of this RestPcrJobDetail.  # noqa: E501
        :rtype: PcrJobPriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RestPcrJobDetail.


        :param priority: The priority of this RestPcrJobDetail.  # noqa: E501
        :type: PcrJobPriority
        """

        self._priority = priority

    @property
    def state(self):
        """Gets the state of this RestPcrJobDetail.  # noqa: E501


        :return: The state of this RestPcrJobDetail.  # noqa: E501
        :rtype: PcrJobState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RestPcrJobDetail.


        :param state: The state of this RestPcrJobDetail.  # noqa: E501
        :type: PcrJobState
        """
        if self._configuration.client_side_validation and state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def creation_epoch(self):
        """Gets the creation_epoch of this RestPcrJobDetail.  # noqa: E501


        :return: The creation_epoch of this RestPcrJobDetail.  # noqa: E501
        :rtype: int
        """
        return self._creation_epoch

    @creation_epoch.setter
    def creation_epoch(self, creation_epoch):
        """Sets the creation_epoch of this RestPcrJobDetail.


        :param creation_epoch: The creation_epoch of this RestPcrJobDetail.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and creation_epoch is None:
            raise ValueError("Invalid value for `creation_epoch`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                creation_epoch is not None and creation_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `creation_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._creation_epoch = creation_epoch

    @property
    def snapshot_epoch(self):
        """Gets the snapshot_epoch of this RestPcrJobDetail.  # noqa: E501


        :return: The snapshot_epoch of this RestPcrJobDetail.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_epoch

    @snapshot_epoch.setter
    def snapshot_epoch(self, snapshot_epoch):
        """Sets the snapshot_epoch of this RestPcrJobDetail.


        :param snapshot_epoch: The snapshot_epoch of this RestPcrJobDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                snapshot_epoch is not None and snapshot_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `snapshot_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._snapshot_epoch = snapshot_epoch

    @property
    def start_epoch(self):
        """Gets the start_epoch of this RestPcrJobDetail.  # noqa: E501


        :return: The start_epoch of this RestPcrJobDetail.  # noqa: E501
        :rtype: int
        """
        return self._start_epoch

    @start_epoch.setter
    def start_epoch(self, start_epoch):
        """Sets the start_epoch of this RestPcrJobDetail.


        :param start_epoch: The start_epoch of this RestPcrJobDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                start_epoch is not None and start_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `start_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_epoch = start_epoch

    @property
    def finish_epoch(self):
        """Gets the finish_epoch of this RestPcrJobDetail.  # noqa: E501


        :return: The finish_epoch of this RestPcrJobDetail.  # noqa: E501
        :rtype: int
        """
        return self._finish_epoch

    @finish_epoch.setter
    def finish_epoch(self, finish_epoch):
        """Sets the finish_epoch of this RestPcrJobDetail.


        :param finish_epoch: The finish_epoch of this RestPcrJobDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                finish_epoch is not None and finish_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `finish_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._finish_epoch = finish_epoch

    @property
    def percent_done(self):
        """Gets the percent_done of this RestPcrJobDetail.  # noqa: E501


        :return: The percent_done of this RestPcrJobDetail.  # noqa: E501
        :rtype: int
        """
        return self._percent_done

    @percent_done.setter
    def percent_done(self, percent_done):
        """Sets the percent_done of this RestPcrJobDetail.


        :param percent_done: The percent_done of this RestPcrJobDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                percent_done is not None and percent_done < 0):  # noqa: E501
            raise ValueError("Invalid value for `percent_done`, must be a value greater than or equal to `0`")  # noqa: E501

        self._percent_done = percent_done

    @property
    def files_seen_count(self):
        """Gets the files_seen_count of this RestPcrJobDetail.  # noqa: E501


        :return: The files_seen_count of this RestPcrJobDetail.  # noqa: E501
        :rtype: int
        """
        return self._files_seen_count

    @files_seen_count.setter
    def files_seen_count(self, files_seen_count):
        """Sets the files_seen_count of this RestPcrJobDetail.


        :param files_seen_count: The files_seen_count of this RestPcrJobDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                files_seen_count is not None and files_seen_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `files_seen_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._files_seen_count = files_seen_count

    @property
    def paths_not_found_count(self):
        """Gets the paths_not_found_count of this RestPcrJobDetail.  # noqa: E501


        :return: The paths_not_found_count of this RestPcrJobDetail.  # noqa: E501
        :rtype: int
        """
        return self._paths_not_found_count

    @paths_not_found_count.setter
    def paths_not_found_count(self, paths_not_found_count):
        """Sets the paths_not_found_count of this RestPcrJobDetail.


        :param paths_not_found_count: The paths_not_found_count of this RestPcrJobDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                paths_not_found_count is not None and paths_not_found_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `paths_not_found_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._paths_not_found_count = paths_not_found_count

    @property
    def active_tier(self):
        """Gets the active_tier of this RestPcrJobDetail.  # noqa: E501


        :return: The active_tier of this RestPcrJobDetail.  # noqa: E501
        :rtype: TierCompInfo
        """
        return self._active_tier

    @active_tier.setter
    def active_tier(self, active_tier):
        """Sets the active_tier of this RestPcrJobDetail.


        :param active_tier: The active_tier of this RestPcrJobDetail.  # noqa: E501
        :type: TierCompInfo
        """

        self._active_tier = active_tier

    @property
    def extended_retention_tier(self):
        """Gets the extended_retention_tier of this RestPcrJobDetail.  # noqa: E501


        :return: The extended_retention_tier of this RestPcrJobDetail.  # noqa: E501
        :rtype: TierCompInfo
        """
        return self._extended_retention_tier

    @extended_retention_tier.setter
    def extended_retention_tier(self, extended_retention_tier):
        """Sets the extended_retention_tier of this RestPcrJobDetail.


        :param extended_retention_tier: The extended_retention_tier of this RestPcrJobDetail.  # noqa: E501
        :type: TierCompInfo
        """

        self._extended_retention_tier = extended_retention_tier

    @property
    def link(self):
        """Gets the link of this RestPcrJobDetail.  # noqa: E501


        :return: The link of this RestPcrJobDetail.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this RestPcrJobDetail.


        :param link: The link of this RestPcrJobDetail.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestPcrJobDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestPcrJobDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RestPcrJobDetail):
            return True

        return self.to_dict() != other.to_dict()
