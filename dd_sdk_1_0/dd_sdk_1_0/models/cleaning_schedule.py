# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class CleaningSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'occurrence': 'CleaningScheduleOccurrence',
        'days': 'list[DayOfWeek]',
        '_date': 'int',
        'time': 'str',
        'next_scheduled_epoch': 'int'
    }

    attribute_map = {
        'occurrence': 'occurrence',
        'days': 'days',
        '_date': 'date',
        'time': 'time',
        'next_scheduled_epoch': 'next_scheduled_epoch'
    }

    def __init__(self, occurrence=None, days=None, _date=None, time=None, next_scheduled_epoch=None, _configuration=None):  # noqa: E501
        """CleaningSchedule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._occurrence = None
        self._days = None
        self.__date = None
        self._time = None
        self._next_scheduled_epoch = None
        self.discriminator = None

        if occurrence is not None:
            self.occurrence = occurrence
        if days is not None:
            self.days = days
        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time
        if next_scheduled_epoch is not None:
            self.next_scheduled_epoch = next_scheduled_epoch

    @property
    def occurrence(self):
        """Gets the occurrence of this CleaningSchedule.  # noqa: E501


        :return: The occurrence of this CleaningSchedule.  # noqa: E501
        :rtype: CleaningScheduleOccurrence
        """
        return self._occurrence

    @occurrence.setter
    def occurrence(self, occurrence):
        """Sets the occurrence of this CleaningSchedule.


        :param occurrence: The occurrence of this CleaningSchedule.  # noqa: E501
        :type: CleaningScheduleOccurrence
        """

        self._occurrence = occurrence

    @property
    def days(self):
        """Gets the days of this CleaningSchedule.  # noqa: E501


        :return: The days of this CleaningSchedule.  # noqa: E501
        :rtype: list[DayOfWeek]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this CleaningSchedule.


        :param days: The days of this CleaningSchedule.  # noqa: E501
        :type: list[DayOfWeek]
        """

        self._days = days

    @property
    def _date(self):
        """Gets the _date of this CleaningSchedule.  # noqa: E501


        :return: The _date of this CleaningSchedule.  # noqa: E501
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CleaningSchedule.


        :param _date: The _date of this CleaningSchedule.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                _date is not None and _date < 0):  # noqa: E501
            raise ValueError("Invalid value for `_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this CleaningSchedule.  # noqa: E501


        :return: The time of this CleaningSchedule.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CleaningSchedule.


        :param time: The time of this CleaningSchedule.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def next_scheduled_epoch(self):
        """Gets the next_scheduled_epoch of this CleaningSchedule.  # noqa: E501


        :return: The next_scheduled_epoch of this CleaningSchedule.  # noqa: E501
        :rtype: int
        """
        return self._next_scheduled_epoch

    @next_scheduled_epoch.setter
    def next_scheduled_epoch(self, next_scheduled_epoch):
        """Sets the next_scheduled_epoch of this CleaningSchedule.


        :param next_scheduled_epoch: The next_scheduled_epoch of this CleaningSchedule.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                next_scheduled_epoch is not None and next_scheduled_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `next_scheduled_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._next_scheduled_epoch = next_scheduled_epoch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CleaningSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CleaningSchedule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CleaningSchedule):
            return True

        return self.to_dict() != other.to_dict()
