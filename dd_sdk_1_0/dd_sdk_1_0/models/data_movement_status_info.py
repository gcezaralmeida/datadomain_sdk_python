# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class DataMovementStatusInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'int',
        'end_time': 'int',
        'mode': 'DataMovementMode',
        'state': 'DataMovementState',
        'postcomp_bytes': 'int',
        'precomp_bytes': 'int',
        'files_inspected': 'int',
        'files_eligible': 'int',
        'files_moved': 'int',
        'files_failed': 'int',
        'elapsed_time': 'int',
        'percent_complete': 'int',
        'phase_name': 'str',
        'phase_elapsed_time': 'int',
        'phase_percent_complete': 'int',
        'suspended_by': 'DataMovementSuspendCaller'
    }

    attribute_map = {
        'start_time': 'start_time',
        'end_time': 'end_time',
        'mode': 'mode',
        'state': 'state',
        'postcomp_bytes': 'postcomp_bytes',
        'precomp_bytes': 'precomp_bytes',
        'files_inspected': 'files_inspected',
        'files_eligible': 'files_eligible',
        'files_moved': 'files_moved',
        'files_failed': 'files_failed',
        'elapsed_time': 'elapsed_time',
        'percent_complete': 'percent_complete',
        'phase_name': 'phase_name',
        'phase_elapsed_time': 'phase_elapsed_time',
        'phase_percent_complete': 'phase_percent_complete',
        'suspended_by': 'suspended_by'
    }

    def __init__(self, start_time=None, end_time=None, mode=None, state=None, postcomp_bytes=None, precomp_bytes=None, files_inspected=None, files_eligible=None, files_moved=None, files_failed=None, elapsed_time=None, percent_complete=None, phase_name=None, phase_elapsed_time=None, phase_percent_complete=None, suspended_by=None, _configuration=None):  # noqa: E501
        """DataMovementStatusInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start_time = None
        self._end_time = None
        self._mode = None
        self._state = None
        self._postcomp_bytes = None
        self._precomp_bytes = None
        self._files_inspected = None
        self._files_eligible = None
        self._files_moved = None
        self._files_failed = None
        self._elapsed_time = None
        self._percent_complete = None
        self._phase_name = None
        self._phase_elapsed_time = None
        self._phase_percent_complete = None
        self._suspended_by = None
        self.discriminator = None

        self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if mode is not None:
            self.mode = mode
        if state is not None:
            self.state = state
        if postcomp_bytes is not None:
            self.postcomp_bytes = postcomp_bytes
        if precomp_bytes is not None:
            self.precomp_bytes = precomp_bytes
        if files_inspected is not None:
            self.files_inspected = files_inspected
        if files_eligible is not None:
            self.files_eligible = files_eligible
        if files_moved is not None:
            self.files_moved = files_moved
        if files_failed is not None:
            self.files_failed = files_failed
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if phase_name is not None:
            self.phase_name = phase_name
        if phase_elapsed_time is not None:
            self.phase_elapsed_time = phase_elapsed_time
        if phase_percent_complete is not None:
            self.phase_percent_complete = phase_percent_complete
        if suspended_by is not None:
            self.suspended_by = suspended_by

    @property
    def start_time(self):
        """Gets the start_time of this DataMovementStatusInfo.  # noqa: E501


        :return: The start_time of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DataMovementStatusInfo.


        :param start_time: The start_time of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this DataMovementStatusInfo.  # noqa: E501


        :return: The end_time of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DataMovementStatusInfo.


        :param end_time: The end_time of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def mode(self):
        """Gets the mode of this DataMovementStatusInfo.  # noqa: E501


        :return: The mode of this DataMovementStatusInfo.  # noqa: E501
        :rtype: DataMovementMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DataMovementStatusInfo.


        :param mode: The mode of this DataMovementStatusInfo.  # noqa: E501
        :type: DataMovementMode
        """

        self._mode = mode

    @property
    def state(self):
        """Gets the state of this DataMovementStatusInfo.  # noqa: E501


        :return: The state of this DataMovementStatusInfo.  # noqa: E501
        :rtype: DataMovementState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataMovementStatusInfo.


        :param state: The state of this DataMovementStatusInfo.  # noqa: E501
        :type: DataMovementState
        """

        self._state = state

    @property
    def postcomp_bytes(self):
        """Gets the postcomp_bytes of this DataMovementStatusInfo.  # noqa: E501


        :return: The postcomp_bytes of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._postcomp_bytes

    @postcomp_bytes.setter
    def postcomp_bytes(self, postcomp_bytes):
        """Sets the postcomp_bytes of this DataMovementStatusInfo.


        :param postcomp_bytes: The postcomp_bytes of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                postcomp_bytes is not None and postcomp_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `postcomp_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._postcomp_bytes = postcomp_bytes

    @property
    def precomp_bytes(self):
        """Gets the precomp_bytes of this DataMovementStatusInfo.  # noqa: E501


        :return: The precomp_bytes of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._precomp_bytes

    @precomp_bytes.setter
    def precomp_bytes(self, precomp_bytes):
        """Sets the precomp_bytes of this DataMovementStatusInfo.


        :param precomp_bytes: The precomp_bytes of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                precomp_bytes is not None and precomp_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `precomp_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._precomp_bytes = precomp_bytes

    @property
    def files_inspected(self):
        """Gets the files_inspected of this DataMovementStatusInfo.  # noqa: E501


        :return: The files_inspected of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._files_inspected

    @files_inspected.setter
    def files_inspected(self, files_inspected):
        """Sets the files_inspected of this DataMovementStatusInfo.


        :param files_inspected: The files_inspected of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                files_inspected is not None and files_inspected < 0):  # noqa: E501
            raise ValueError("Invalid value for `files_inspected`, must be a value greater than or equal to `0`")  # noqa: E501

        self._files_inspected = files_inspected

    @property
    def files_eligible(self):
        """Gets the files_eligible of this DataMovementStatusInfo.  # noqa: E501


        :return: The files_eligible of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._files_eligible

    @files_eligible.setter
    def files_eligible(self, files_eligible):
        """Sets the files_eligible of this DataMovementStatusInfo.


        :param files_eligible: The files_eligible of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                files_eligible is not None and files_eligible < 0):  # noqa: E501
            raise ValueError("Invalid value for `files_eligible`, must be a value greater than or equal to `0`")  # noqa: E501

        self._files_eligible = files_eligible

    @property
    def files_moved(self):
        """Gets the files_moved of this DataMovementStatusInfo.  # noqa: E501


        :return: The files_moved of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._files_moved

    @files_moved.setter
    def files_moved(self, files_moved):
        """Sets the files_moved of this DataMovementStatusInfo.


        :param files_moved: The files_moved of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                files_moved is not None and files_moved < 0):  # noqa: E501
            raise ValueError("Invalid value for `files_moved`, must be a value greater than or equal to `0`")  # noqa: E501

        self._files_moved = files_moved

    @property
    def files_failed(self):
        """Gets the files_failed of this DataMovementStatusInfo.  # noqa: E501


        :return: The files_failed of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._files_failed

    @files_failed.setter
    def files_failed(self, files_failed):
        """Sets the files_failed of this DataMovementStatusInfo.


        :param files_failed: The files_failed of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                files_failed is not None and files_failed < 0):  # noqa: E501
            raise ValueError("Invalid value for `files_failed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._files_failed = files_failed

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this DataMovementStatusInfo.  # noqa: E501


        :return: The elapsed_time of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this DataMovementStatusInfo.


        :param elapsed_time: The elapsed_time of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                elapsed_time is not None and elapsed_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `elapsed_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._elapsed_time = elapsed_time

    @property
    def percent_complete(self):
        """Gets the percent_complete of this DataMovementStatusInfo.  # noqa: E501


        :return: The percent_complete of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this DataMovementStatusInfo.


        :param percent_complete: The percent_complete of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                percent_complete is not None and percent_complete < 0):  # noqa: E501
            raise ValueError("Invalid value for `percent_complete`, must be a value greater than or equal to `0`")  # noqa: E501

        self._percent_complete = percent_complete

    @property
    def phase_name(self):
        """Gets the phase_name of this DataMovementStatusInfo.  # noqa: E501


        :return: The phase_name of this DataMovementStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._phase_name

    @phase_name.setter
    def phase_name(self, phase_name):
        """Sets the phase_name of this DataMovementStatusInfo.


        :param phase_name: The phase_name of this DataMovementStatusInfo.  # noqa: E501
        :type: str
        """

        self._phase_name = phase_name

    @property
    def phase_elapsed_time(self):
        """Gets the phase_elapsed_time of this DataMovementStatusInfo.  # noqa: E501


        :return: The phase_elapsed_time of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._phase_elapsed_time

    @phase_elapsed_time.setter
    def phase_elapsed_time(self, phase_elapsed_time):
        """Sets the phase_elapsed_time of this DataMovementStatusInfo.


        :param phase_elapsed_time: The phase_elapsed_time of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                phase_elapsed_time is not None and phase_elapsed_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `phase_elapsed_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._phase_elapsed_time = phase_elapsed_time

    @property
    def phase_percent_complete(self):
        """Gets the phase_percent_complete of this DataMovementStatusInfo.  # noqa: E501


        :return: The phase_percent_complete of this DataMovementStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._phase_percent_complete

    @phase_percent_complete.setter
    def phase_percent_complete(self, phase_percent_complete):
        """Sets the phase_percent_complete of this DataMovementStatusInfo.


        :param phase_percent_complete: The phase_percent_complete of this DataMovementStatusInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                phase_percent_complete is not None and phase_percent_complete < 0):  # noqa: E501
            raise ValueError("Invalid value for `phase_percent_complete`, must be a value greater than or equal to `0`")  # noqa: E501

        self._phase_percent_complete = phase_percent_complete

    @property
    def suspended_by(self):
        """Gets the suspended_by of this DataMovementStatusInfo.  # noqa: E501


        :return: The suspended_by of this DataMovementStatusInfo.  # noqa: E501
        :rtype: DataMovementSuspendCaller
        """
        return self._suspended_by

    @suspended_by.setter
    def suspended_by(self, suspended_by):
        """Sets the suspended_by of this DataMovementStatusInfo.


        :param suspended_by: The suspended_by of this DataMovementStatusInfo.  # noqa: E501
        :type: DataMovementSuspendCaller
        """

        self._suspended_by = suspended_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataMovementStatusInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataMovementStatusInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataMovementStatusInfo):
            return True

        return self.to_dict() != other.to_dict()
