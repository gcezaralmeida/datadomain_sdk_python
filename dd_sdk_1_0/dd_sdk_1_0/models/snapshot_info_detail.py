# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class SnapshotInfoDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'mtree': 'str',
        'pre_comp_bytes': 'int',
        'tenant_unit': 'str',
        'tenant_unit_uuid': 'str',
        'creation_epoch': 'int',
        'expiration_epoch': 'int',
        'status': 'SnapshotStatus',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'mtree': 'mtree',
        'pre_comp_bytes': 'pre_comp_bytes',
        'tenant_unit': 'tenant_unit',
        'tenant_unit_uuid': 'tenant_unit_uuid',
        'creation_epoch': 'creation_epoch',
        'expiration_epoch': 'expiration_epoch',
        'status': 'status',
        'link': 'link'
    }

    def __init__(self, id=None, name=None, mtree=None, pre_comp_bytes=None, tenant_unit=None, tenant_unit_uuid=None, creation_epoch=None, expiration_epoch=None, status=None, link=None, _configuration=None):  # noqa: E501
        """SnapshotInfoDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._mtree = None
        self._pre_comp_bytes = None
        self._tenant_unit = None
        self._tenant_unit_uuid = None
        self._creation_epoch = None
        self._expiration_epoch = None
        self._status = None
        self._link = None
        self.discriminator = None

        self.id = id
        if name is not None:
            self.name = name
        if mtree is not None:
            self.mtree = mtree
        if pre_comp_bytes is not None:
            self.pre_comp_bytes = pre_comp_bytes
        if tenant_unit is not None:
            self.tenant_unit = tenant_unit
        if tenant_unit_uuid is not None:
            self.tenant_unit_uuid = tenant_unit_uuid
        if creation_epoch is not None:
            self.creation_epoch = creation_epoch
        if expiration_epoch is not None:
            self.expiration_epoch = expiration_epoch
        if status is not None:
            self.status = status
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this SnapshotInfoDetail.  # noqa: E501


        :return: The id of this SnapshotInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SnapshotInfoDetail.


        :param id: The id of this SnapshotInfoDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SnapshotInfoDetail.  # noqa: E501


        :return: The name of this SnapshotInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotInfoDetail.


        :param name: The name of this SnapshotInfoDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mtree(self):
        """Gets the mtree of this SnapshotInfoDetail.  # noqa: E501


        :return: The mtree of this SnapshotInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._mtree

    @mtree.setter
    def mtree(self, mtree):
        """Sets the mtree of this SnapshotInfoDetail.


        :param mtree: The mtree of this SnapshotInfoDetail.  # noqa: E501
        :type: str
        """

        self._mtree = mtree

    @property
    def pre_comp_bytes(self):
        """Gets the pre_comp_bytes of this SnapshotInfoDetail.  # noqa: E501


        :return: The pre_comp_bytes of this SnapshotInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._pre_comp_bytes

    @pre_comp_bytes.setter
    def pre_comp_bytes(self, pre_comp_bytes):
        """Sets the pre_comp_bytes of this SnapshotInfoDetail.


        :param pre_comp_bytes: The pre_comp_bytes of this SnapshotInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                pre_comp_bytes is not None and pre_comp_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `pre_comp_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pre_comp_bytes = pre_comp_bytes

    @property
    def tenant_unit(self):
        """Gets the tenant_unit of this SnapshotInfoDetail.  # noqa: E501


        :return: The tenant_unit of this SnapshotInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._tenant_unit

    @tenant_unit.setter
    def tenant_unit(self, tenant_unit):
        """Sets the tenant_unit of this SnapshotInfoDetail.


        :param tenant_unit: The tenant_unit of this SnapshotInfoDetail.  # noqa: E501
        :type: str
        """

        self._tenant_unit = tenant_unit

    @property
    def tenant_unit_uuid(self):
        """Gets the tenant_unit_uuid of this SnapshotInfoDetail.  # noqa: E501


        :return: The tenant_unit_uuid of this SnapshotInfoDetail.  # noqa: E501
        :rtype: str
        """
        return self._tenant_unit_uuid

    @tenant_unit_uuid.setter
    def tenant_unit_uuid(self, tenant_unit_uuid):
        """Sets the tenant_unit_uuid of this SnapshotInfoDetail.


        :param tenant_unit_uuid: The tenant_unit_uuid of this SnapshotInfoDetail.  # noqa: E501
        :type: str
        """

        self._tenant_unit_uuid = tenant_unit_uuid

    @property
    def creation_epoch(self):
        """Gets the creation_epoch of this SnapshotInfoDetail.  # noqa: E501

        Epoch time that the snapshot is created.  # noqa: E501

        :return: The creation_epoch of this SnapshotInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._creation_epoch

    @creation_epoch.setter
    def creation_epoch(self, creation_epoch):
        """Sets the creation_epoch of this SnapshotInfoDetail.

        Epoch time that the snapshot is created.  # noqa: E501

        :param creation_epoch: The creation_epoch of this SnapshotInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                creation_epoch is not None and creation_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `creation_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._creation_epoch = creation_epoch

    @property
    def expiration_epoch(self):
        """Gets the expiration_epoch of this SnapshotInfoDetail.  # noqa: E501


        :return: The expiration_epoch of this SnapshotInfoDetail.  # noqa: E501
        :rtype: int
        """
        return self._expiration_epoch

    @expiration_epoch.setter
    def expiration_epoch(self, expiration_epoch):
        """Sets the expiration_epoch of this SnapshotInfoDetail.


        :param expiration_epoch: The expiration_epoch of this SnapshotInfoDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                expiration_epoch is not None and expiration_epoch < 0):  # noqa: E501
            raise ValueError("Invalid value for `expiration_epoch`, must be a value greater than or equal to `0`")  # noqa: E501

        self._expiration_epoch = expiration_epoch

    @property
    def status(self):
        """Gets the status of this SnapshotInfoDetail.  # noqa: E501


        :return: The status of this SnapshotInfoDetail.  # noqa: E501
        :rtype: SnapshotStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SnapshotInfoDetail.


        :param status: The status of this SnapshotInfoDetail.  # noqa: E501
        :type: SnapshotStatus
        """

        self._status = status

    @property
    def link(self):
        """Gets the link of this SnapshotInfoDetail.  # noqa: E501


        :return: The link of this SnapshotInfoDetail.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this SnapshotInfoDetail.


        :param link: The link of this SnapshotInfoDetail.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotInfoDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotInfoDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotInfoDetail):
            return True

        return self.to_dict() != other.to_dict()
