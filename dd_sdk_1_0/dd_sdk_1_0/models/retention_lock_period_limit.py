# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class RetentionLockPeriodLimit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit_operation': 'GenericSetResetEnumType',
        'limit_type': 'GenericMinMaxEnumType',
        'limit_value': 'int'
    }

    attribute_map = {
        'limit_operation': 'limit_operation',
        'limit_type': 'limit_type',
        'limit_value': 'limit_value'
    }

    def __init__(self, limit_operation=None, limit_type=None, limit_value=None, _configuration=None):  # noqa: E501
        """RetentionLockPeriodLimit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._limit_operation = None
        self._limit_type = None
        self._limit_value = None
        self.discriminator = None

        self.limit_operation = limit_operation
        self.limit_type = limit_type
        self.limit_value = limit_value

    @property
    def limit_operation(self):
        """Gets the limit_operation of this RetentionLockPeriodLimit.  # noqa: E501

        Possible operations: set, reset  # noqa: E501

        :return: The limit_operation of this RetentionLockPeriodLimit.  # noqa: E501
        :rtype: GenericSetResetEnumType
        """
        return self._limit_operation

    @limit_operation.setter
    def limit_operation(self, limit_operation):
        """Sets the limit_operation of this RetentionLockPeriodLimit.

        Possible operations: set, reset  # noqa: E501

        :param limit_operation: The limit_operation of this RetentionLockPeriodLimit.  # noqa: E501
        :type: GenericSetResetEnumType
        """
        if self._configuration.client_side_validation and limit_operation is None:
            raise ValueError("Invalid value for `limit_operation`, must not be `None`")  # noqa: E501

        self._limit_operation = limit_operation

    @property
    def limit_type(self):
        """Gets the limit_type of this RetentionLockPeriodLimit.  # noqa: E501

        Possible retention lock limit types: min, max  # noqa: E501

        :return: The limit_type of this RetentionLockPeriodLimit.  # noqa: E501
        :rtype: GenericMinMaxEnumType
        """
        return self._limit_type

    @limit_type.setter
    def limit_type(self, limit_type):
        """Sets the limit_type of this RetentionLockPeriodLimit.

        Possible retention lock limit types: min, max  # noqa: E501

        :param limit_type: The limit_type of this RetentionLockPeriodLimit.  # noqa: E501
        :type: GenericMinMaxEnumType
        """
        if self._configuration.client_side_validation and limit_type is None:
            raise ValueError("Invalid value for `limit_type`, must not be `None`")  # noqa: E501

        self._limit_type = limit_type

    @property
    def limit_value(self):
        """Gets the limit_value of this RetentionLockPeriodLimit.  # noqa: E501

        Limit value for \"set\" operation  # noqa: E501

        :return: The limit_value of this RetentionLockPeriodLimit.  # noqa: E501
        :rtype: int
        """
        return self._limit_value

    @limit_value.setter
    def limit_value(self, limit_value):
        """Sets the limit_value of this RetentionLockPeriodLimit.

        Limit value for \"set\" operation  # noqa: E501

        :param limit_value: The limit_value of this RetentionLockPeriodLimit.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and limit_value is None:
            raise ValueError("Invalid value for `limit_value`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                limit_value is not None and limit_value < 0):  # noqa: E501
            raise ValueError("Invalid value for `limit_value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._limit_value = limit_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetentionLockPeriodLimit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetentionLockPeriodLimit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RetentionLockPeriodLimit):
            return True

        return self.to_dict() != other.to_dict()
