# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class ShareCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'path': 'str',
        'max_connections': 'int',
        'comment': 'str',
        'clients': 'list[str]',
        'users': 'list[str]',
        'groups': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'path': 'path',
        'max_connections': 'max_connections',
        'comment': 'comment',
        'clients': 'clients',
        'users': 'users',
        'groups': 'groups'
    }

    def __init__(self, name=None, path=None, max_connections=None, comment=None, clients=None, users=None, groups=None, _configuration=None):  # noqa: E501
        """ShareCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._path = None
        self._max_connections = None
        self._comment = None
        self._clients = None
        self._users = None
        self._groups = None
        self.discriminator = None

        self.name = name
        self.path = path
        if max_connections is not None:
            self.max_connections = max_connections
        if comment is not None:
            self.comment = comment
        if clients is not None:
            self.clients = clients
        if users is not None:
            self.users = users
        if groups is not None:
            self.groups = groups

    @property
    def name(self):
        """Gets the name of this ShareCreate.  # noqa: E501


        :return: The name of this ShareCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShareCreate.


        :param name: The name of this ShareCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this ShareCreate.  # noqa: E501

        Full path  # noqa: E501

        :return: The path of this ShareCreate.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ShareCreate.

        Full path  # noqa: E501

        :param path: The path of this ShareCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def max_connections(self):
        """Gets the max_connections of this ShareCreate.  # noqa: E501


        :return: The max_connections of this ShareCreate.  # noqa: E501
        :rtype: int
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this ShareCreate.


        :param max_connections: The max_connections of this ShareCreate.  # noqa: E501
        :type: int
        """

        self._max_connections = max_connections

    @property
    def comment(self):
        """Gets the comment of this ShareCreate.  # noqa: E501


        :return: The comment of this ShareCreate.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ShareCreate.


        :param comment: The comment of this ShareCreate.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def clients(self):
        """Gets the clients of this ShareCreate.  # noqa: E501


        :return: The clients of this ShareCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this ShareCreate.


        :param clients: The clients of this ShareCreate.  # noqa: E501
        :type: list[str]
        """

        self._clients = clients

    @property
    def users(self):
        """Gets the users of this ShareCreate.  # noqa: E501


        :return: The users of this ShareCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ShareCreate.


        :param users: The users of this ShareCreate.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def groups(self):
        """Gets the groups of this ShareCreate.  # noqa: E501


        :return: The groups of this ShareCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ShareCreate.


        :param groups: The groups of this ShareCreate.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShareCreate):
            return True

        return self.to_dict() != other.to_dict()
