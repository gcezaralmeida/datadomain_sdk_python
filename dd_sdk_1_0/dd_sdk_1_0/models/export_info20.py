# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class ExportInfo20(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_id': 'str',
        'export_name': 'str',
        'export_path': 'str',
        'ip_address': 'str',
        'mtree_id': 'str',
        'mtree_name': 'str',
        'num_clients': 'int',
        'num_referrals': 'int',
        'tenant_unit': 'str',
        'path_status': 'int',
        'nfsv3_mounts': 'int',
        'active_nfsv3_clients': 'int',
        'active_nfsv4_clients': 'int',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'export_id': 'export_id',
        'export_name': 'export_name',
        'export_path': 'export_path',
        'ip_address': 'ip_address',
        'mtree_id': 'mtree_id',
        'mtree_name': 'mtree_name',
        'num_clients': 'num_clients',
        'num_referrals': 'num_referrals',
        'tenant_unit': 'tenant_unit',
        'path_status': 'path_status',
        'nfsv3_mounts': 'nfsv3_mounts',
        'active_nfsv3_clients': 'active_nfsv3_clients',
        'active_nfsv4_clients': 'active_nfsv4_clients',
        'link': 'link'
    }

    def __init__(self, export_id=None, export_name=None, export_path=None, ip_address=None, mtree_id=None, mtree_name=None, num_clients=None, num_referrals=None, tenant_unit=None, path_status=None, nfsv3_mounts=None, active_nfsv3_clients=None, active_nfsv4_clients=None, link=None, _configuration=None):  # noqa: E501
        """ExportInfo20 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._export_id = None
        self._export_name = None
        self._export_path = None
        self._ip_address = None
        self._mtree_id = None
        self._mtree_name = None
        self._num_clients = None
        self._num_referrals = None
        self._tenant_unit = None
        self._path_status = None
        self._nfsv3_mounts = None
        self._active_nfsv3_clients = None
        self._active_nfsv4_clients = None
        self._link = None
        self.discriminator = None

        self.export_id = export_id
        self.export_name = export_name
        self.export_path = export_path
        self.ip_address = ip_address
        if mtree_id is not None:
            self.mtree_id = mtree_id
        if mtree_name is not None:
            self.mtree_name = mtree_name
        self.num_clients = num_clients
        self.num_referrals = num_referrals
        self.tenant_unit = tenant_unit
        self.path_status = path_status
        self.nfsv3_mounts = nfsv3_mounts
        self.active_nfsv3_clients = active_nfsv3_clients
        self.active_nfsv4_clients = active_nfsv4_clients
        if link is not None:
            self.link = link

    @property
    def export_id(self):
        """Gets the export_id of this ExportInfo20.  # noqa: E501


        :return: The export_id of this ExportInfo20.  # noqa: E501
        :rtype: str
        """
        return self._export_id

    @export_id.setter
    def export_id(self, export_id):
        """Sets the export_id of this ExportInfo20.


        :param export_id: The export_id of this ExportInfo20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and export_id is None:
            raise ValueError("Invalid value for `export_id`, must not be `None`")  # noqa: E501

        self._export_id = export_id

    @property
    def export_name(self):
        """Gets the export_name of this ExportInfo20.  # noqa: E501


        :return: The export_name of this ExportInfo20.  # noqa: E501
        :rtype: str
        """
        return self._export_name

    @export_name.setter
    def export_name(self, export_name):
        """Sets the export_name of this ExportInfo20.


        :param export_name: The export_name of this ExportInfo20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and export_name is None:
            raise ValueError("Invalid value for `export_name`, must not be `None`")  # noqa: E501

        self._export_name = export_name

    @property
    def export_path(self):
        """Gets the export_path of this ExportInfo20.  # noqa: E501


        :return: The export_path of this ExportInfo20.  # noqa: E501
        :rtype: str
        """
        return self._export_path

    @export_path.setter
    def export_path(self, export_path):
        """Sets the export_path of this ExportInfo20.


        :param export_path: The export_path of this ExportInfo20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and export_path is None:
            raise ValueError("Invalid value for `export_path`, must not be `None`")  # noqa: E501

        self._export_path = export_path

    @property
    def ip_address(self):
        """Gets the ip_address of this ExportInfo20.  # noqa: E501


        :return: The ip_address of this ExportInfo20.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ExportInfo20.


        :param ip_address: The ip_address of this ExportInfo20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def mtree_id(self):
        """Gets the mtree_id of this ExportInfo20.  # noqa: E501


        :return: The mtree_id of this ExportInfo20.  # noqa: E501
        :rtype: str
        """
        return self._mtree_id

    @mtree_id.setter
    def mtree_id(self, mtree_id):
        """Sets the mtree_id of this ExportInfo20.


        :param mtree_id: The mtree_id of this ExportInfo20.  # noqa: E501
        :type: str
        """

        self._mtree_id = mtree_id

    @property
    def mtree_name(self):
        """Gets the mtree_name of this ExportInfo20.  # noqa: E501


        :return: The mtree_name of this ExportInfo20.  # noqa: E501
        :rtype: str
        """
        return self._mtree_name

    @mtree_name.setter
    def mtree_name(self, mtree_name):
        """Sets the mtree_name of this ExportInfo20.


        :param mtree_name: The mtree_name of this ExportInfo20.  # noqa: E501
        :type: str
        """

        self._mtree_name = mtree_name

    @property
    def num_clients(self):
        """Gets the num_clients of this ExportInfo20.  # noqa: E501


        :return: The num_clients of this ExportInfo20.  # noqa: E501
        :rtype: int
        """
        return self._num_clients

    @num_clients.setter
    def num_clients(self, num_clients):
        """Sets the num_clients of this ExportInfo20.


        :param num_clients: The num_clients of this ExportInfo20.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and num_clients is None:
            raise ValueError("Invalid value for `num_clients`, must not be `None`")  # noqa: E501

        self._num_clients = num_clients

    @property
    def num_referrals(self):
        """Gets the num_referrals of this ExportInfo20.  # noqa: E501


        :return: The num_referrals of this ExportInfo20.  # noqa: E501
        :rtype: int
        """
        return self._num_referrals

    @num_referrals.setter
    def num_referrals(self, num_referrals):
        """Sets the num_referrals of this ExportInfo20.


        :param num_referrals: The num_referrals of this ExportInfo20.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and num_referrals is None:
            raise ValueError("Invalid value for `num_referrals`, must not be `None`")  # noqa: E501

        self._num_referrals = num_referrals

    @property
    def tenant_unit(self):
        """Gets the tenant_unit of this ExportInfo20.  # noqa: E501


        :return: The tenant_unit of this ExportInfo20.  # noqa: E501
        :rtype: str
        """
        return self._tenant_unit

    @tenant_unit.setter
    def tenant_unit(self, tenant_unit):
        """Sets the tenant_unit of this ExportInfo20.


        :param tenant_unit: The tenant_unit of this ExportInfo20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tenant_unit is None:
            raise ValueError("Invalid value for `tenant_unit`, must not be `None`")  # noqa: E501

        self._tenant_unit = tenant_unit

    @property
    def path_status(self):
        """Gets the path_status of this ExportInfo20.  # noqa: E501

        -1: error; 0: path does not exist; 1: path exists  # noqa: E501

        :return: The path_status of this ExportInfo20.  # noqa: E501
        :rtype: int
        """
        return self._path_status

    @path_status.setter
    def path_status(self, path_status):
        """Sets the path_status of this ExportInfo20.

        -1: error; 0: path does not exist; 1: path exists  # noqa: E501

        :param path_status: The path_status of this ExportInfo20.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and path_status is None:
            raise ValueError("Invalid value for `path_status`, must not be `None`")  # noqa: E501

        self._path_status = path_status

    @property
    def nfsv3_mounts(self):
        """Gets the nfsv3_mounts of this ExportInfo20.  # noqa: E501


        :return: The nfsv3_mounts of this ExportInfo20.  # noqa: E501
        :rtype: int
        """
        return self._nfsv3_mounts

    @nfsv3_mounts.setter
    def nfsv3_mounts(self, nfsv3_mounts):
        """Sets the nfsv3_mounts of this ExportInfo20.


        :param nfsv3_mounts: The nfsv3_mounts of this ExportInfo20.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and nfsv3_mounts is None:
            raise ValueError("Invalid value for `nfsv3_mounts`, must not be `None`")  # noqa: E501

        self._nfsv3_mounts = nfsv3_mounts

    @property
    def active_nfsv3_clients(self):
        """Gets the active_nfsv3_clients of this ExportInfo20.  # noqa: E501


        :return: The active_nfsv3_clients of this ExportInfo20.  # noqa: E501
        :rtype: int
        """
        return self._active_nfsv3_clients

    @active_nfsv3_clients.setter
    def active_nfsv3_clients(self, active_nfsv3_clients):
        """Sets the active_nfsv3_clients of this ExportInfo20.


        :param active_nfsv3_clients: The active_nfsv3_clients of this ExportInfo20.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and active_nfsv3_clients is None:
            raise ValueError("Invalid value for `active_nfsv3_clients`, must not be `None`")  # noqa: E501

        self._active_nfsv3_clients = active_nfsv3_clients

    @property
    def active_nfsv4_clients(self):
        """Gets the active_nfsv4_clients of this ExportInfo20.  # noqa: E501


        :return: The active_nfsv4_clients of this ExportInfo20.  # noqa: E501
        :rtype: int
        """
        return self._active_nfsv4_clients

    @active_nfsv4_clients.setter
    def active_nfsv4_clients(self, active_nfsv4_clients):
        """Sets the active_nfsv4_clients of this ExportInfo20.


        :param active_nfsv4_clients: The active_nfsv4_clients of this ExportInfo20.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and active_nfsv4_clients is None:
            raise ValueError("Invalid value for `active_nfsv4_clients`, must not be `None`")  # noqa: E501

        self._active_nfsv4_clients = active_nfsv4_clients

    @property
    def link(self):
        """Gets the link of this ExportInfo20.  # noqa: E501


        :return: The link of this ExportInfo20.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ExportInfo20.


        :param link: The link of this ExportInfo20.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportInfo20, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportInfo20):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExportInfo20):
            return True

        return self.to_dict() != other.to_dict()
