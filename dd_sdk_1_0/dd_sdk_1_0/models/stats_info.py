# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class StatsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_name': 'str',
        'retention_info': 'list[RetentionInfo]',
        'link': 'RestLinkRep'
    }

    attribute_map = {
        'resource_name': 'resource_name',
        'retention_info': 'retention_info',
        'link': 'link'
    }

    def __init__(self, resource_name=None, retention_info=None, link=None, _configuration=None):  # noqa: E501
        """StatsInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._resource_name = None
        self._retention_info = None
        self._link = None
        self.discriminator = None

        self.resource_name = resource_name
        self.retention_info = retention_info
        if link is not None:
            self.link = link

    @property
    def resource_name(self):
        """Gets the resource_name of this StatsInfo.  # noqa: E501

        Possible resources: capacity, performance  # noqa: E501

        :return: The resource_name of this StatsInfo.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this StatsInfo.

        Possible resources: capacity, performance  # noqa: E501

        :param resource_name: The resource_name of this StatsInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")  # noqa: E501

        self._resource_name = resource_name

    @property
    def retention_info(self):
        """Gets the retention_info of this StatsInfo.  # noqa: E501

        How many days samples will be kept in the database  # noqa: E501

        :return: The retention_info of this StatsInfo.  # noqa: E501
        :rtype: list[RetentionInfo]
        """
        return self._retention_info

    @retention_info.setter
    def retention_info(self, retention_info):
        """Sets the retention_info of this StatsInfo.

        How many days samples will be kept in the database  # noqa: E501

        :param retention_info: The retention_info of this StatsInfo.  # noqa: E501
        :type: list[RetentionInfo]
        """
        if self._configuration.client_side_validation and retention_info is None:
            raise ValueError("Invalid value for `retention_info`, must not be `None`")  # noqa: E501

        self._retention_info = retention_info

    @property
    def link(self):
        """Gets the link of this StatsInfo.  # noqa: E501


        :return: The link of this StatsInfo.  # noqa: E501
        :rtype: RestLinkRep
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this StatsInfo.


        :param link: The link of this StatsInfo.  # noqa: E501
        :type: RestLinkRep
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatsInfo):
            return True

        return self.to_dict() != other.to_dict()
