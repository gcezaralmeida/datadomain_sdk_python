# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class AsupModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation': 'AsupOps',
        'subject_tag': 'str',
        'schedule': 'str',
        'emails': 'list[str]',
        'send_report': 'bool'
    }

    attribute_map = {
        'operation': 'operation',
        'subject_tag': 'subject_tag',
        'schedule': 'schedule',
        'emails': 'emails',
        'send_report': 'send_report'
    }

    def __init__(self, operation=None, subject_tag=None, schedule=None, emails=None, send_report=None, _configuration=None):  # noqa: E501
        """AsupModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._operation = None
        self._subject_tag = None
        self._schedule = None
        self._emails = None
        self._send_report = None
        self.discriminator = None

        self.operation = operation
        if subject_tag is not None:
            self.subject_tag = subject_tag
        if schedule is not None:
            self.schedule = schedule
        if emails is not None:
            self.emails = emails
        if send_report is not None:
            self.send_report = send_report

    @property
    def operation(self):
        """Gets the operation of this AsupModify.  # noqa: E501


        :return: The operation of this AsupModify.  # noqa: E501
        :rtype: AsupOps
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this AsupModify.


        :param operation: The operation of this AsupModify.  # noqa: E501
        :type: AsupOps
        """
        if self._configuration.client_side_validation and operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def subject_tag(self):
        """Gets the subject_tag of this AsupModify.  # noqa: E501


        :return: The subject_tag of this AsupModify.  # noqa: E501
        :rtype: str
        """
        return self._subject_tag

    @subject_tag.setter
    def subject_tag(self, subject_tag):
        """Sets the subject_tag of this AsupModify.


        :param subject_tag: The subject_tag of this AsupModify.  # noqa: E501
        :type: str
        """

        self._subject_tag = subject_tag

    @property
    def schedule(self):
        """Gets the schedule of this AsupModify.  # noqa: E501


        :return: The schedule of this AsupModify.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this AsupModify.


        :param schedule: The schedule of this AsupModify.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def emails(self):
        """Gets the emails of this AsupModify.  # noqa: E501


        :return: The emails of this AsupModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this AsupModify.


        :param emails: The emails of this AsupModify.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def send_report(self):
        """Gets the send_report of this AsupModify.  # noqa: E501


        :return: The send_report of this AsupModify.  # noqa: E501
        :rtype: bool
        """
        return self._send_report

    @send_report.setter
    def send_report(self, send_report):
        """Sets the send_report of this AsupModify.


        :param send_report: The send_report of this AsupModify.  # noqa: E501
        :type: bool
        """

        self._send_report = send_report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsupModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsupModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AsupModify):
            return True

        return self.to_dict() != other.to_dict()
