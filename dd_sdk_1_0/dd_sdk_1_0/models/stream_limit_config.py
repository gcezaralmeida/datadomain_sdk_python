# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class StreamLimitConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'write_stream_soft_limit': 'int',
        'read_stream_soft_limit': 'int',
        'repl_stream_soft_limit': 'int',
        'combined_stream_soft_limit': 'int',
        'combined_stream_hard_limit': 'int'
    }

    attribute_map = {
        'write_stream_soft_limit': 'write_stream_soft_limit',
        'read_stream_soft_limit': 'read_stream_soft_limit',
        'repl_stream_soft_limit': 'repl_stream_soft_limit',
        'combined_stream_soft_limit': 'combined_stream_soft_limit',
        'combined_stream_hard_limit': 'combined_stream_hard_limit'
    }

    def __init__(self, write_stream_soft_limit=None, read_stream_soft_limit=None, repl_stream_soft_limit=None, combined_stream_soft_limit=None, combined_stream_hard_limit=None, _configuration=None):  # noqa: E501
        """StreamLimitConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._write_stream_soft_limit = None
        self._read_stream_soft_limit = None
        self._repl_stream_soft_limit = None
        self._combined_stream_soft_limit = None
        self._combined_stream_hard_limit = None
        self.discriminator = None

        if write_stream_soft_limit is not None:
            self.write_stream_soft_limit = write_stream_soft_limit
        if read_stream_soft_limit is not None:
            self.read_stream_soft_limit = read_stream_soft_limit
        if repl_stream_soft_limit is not None:
            self.repl_stream_soft_limit = repl_stream_soft_limit
        if combined_stream_soft_limit is not None:
            self.combined_stream_soft_limit = combined_stream_soft_limit
        if combined_stream_hard_limit is not None:
            self.combined_stream_hard_limit = combined_stream_hard_limit

    @property
    def write_stream_soft_limit(self):
        """Gets the write_stream_soft_limit of this StreamLimitConfig.  # noqa: E501

        write_stream_soft_limit should be less than the corresponding DD System Limit and no greater than the combined limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :return: The write_stream_soft_limit of this StreamLimitConfig.  # noqa: E501
        :rtype: int
        """
        return self._write_stream_soft_limit

    @write_stream_soft_limit.setter
    def write_stream_soft_limit(self, write_stream_soft_limit):
        """Sets the write_stream_soft_limit of this StreamLimitConfig.

        write_stream_soft_limit should be less than the corresponding DD System Limit and no greater than the combined limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :param write_stream_soft_limit: The write_stream_soft_limit of this StreamLimitConfig.  # noqa: E501
        :type: int
        """

        self._write_stream_soft_limit = write_stream_soft_limit

    @property
    def read_stream_soft_limit(self):
        """Gets the read_stream_soft_limit of this StreamLimitConfig.  # noqa: E501

        read_stream_soft_limit should be less than the corresponding DD System Limit and no greater than the combined limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :return: The read_stream_soft_limit of this StreamLimitConfig.  # noqa: E501
        :rtype: int
        """
        return self._read_stream_soft_limit

    @read_stream_soft_limit.setter
    def read_stream_soft_limit(self, read_stream_soft_limit):
        """Sets the read_stream_soft_limit of this StreamLimitConfig.

        read_stream_soft_limit should be less than the corresponding DD System Limit and no greater than the combined limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :param read_stream_soft_limit: The read_stream_soft_limit of this StreamLimitConfig.  # noqa: E501
        :type: int
        """

        self._read_stream_soft_limit = read_stream_soft_limit

    @property
    def repl_stream_soft_limit(self):
        """Gets the repl_stream_soft_limit of this StreamLimitConfig.  # noqa: E501

        repl_stream_soft_limit should be less than the corresponding DD System Limit and no greater than the combined limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :return: The repl_stream_soft_limit of this StreamLimitConfig.  # noqa: E501
        :rtype: int
        """
        return self._repl_stream_soft_limit

    @repl_stream_soft_limit.setter
    def repl_stream_soft_limit(self, repl_stream_soft_limit):
        """Sets the repl_stream_soft_limit of this StreamLimitConfig.

        repl_stream_soft_limit should be less than the corresponding DD System Limit and no greater than the combined limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :param repl_stream_soft_limit: The repl_stream_soft_limit of this StreamLimitConfig.  # noqa: E501
        :type: int
        """

        self._repl_stream_soft_limit = repl_stream_soft_limit

    @property
    def combined_stream_soft_limit(self):
        """Gets the combined_stream_soft_limit of this StreamLimitConfig.  # noqa: E501

        combined_stream_soft_limit should be less than the corresponding DD System Limit and no less than a single limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :return: The combined_stream_soft_limit of this StreamLimitConfig.  # noqa: E501
        :rtype: int
        """
        return self._combined_stream_soft_limit

    @combined_stream_soft_limit.setter
    def combined_stream_soft_limit(self, combined_stream_soft_limit):
        """Sets the combined_stream_soft_limit of this StreamLimitConfig.

        combined_stream_soft_limit should be less than the corresponding DD System Limit and no less than a single limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :param combined_stream_soft_limit: The combined_stream_soft_limit of this StreamLimitConfig.  # noqa: E501
        :type: int
        """

        self._combined_stream_soft_limit = combined_stream_soft_limit

    @property
    def combined_stream_hard_limit(self):
        """Gets the combined_stream_hard_limit of this StreamLimitConfig.  # noqa: E501

        combined_stream_hard_limit should be less than the corresponding DD System Limit and no less than a single limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :return: The combined_stream_hard_limit of this StreamLimitConfig.  # noqa: E501
        :rtype: int
        """
        return self._combined_stream_hard_limit

    @combined_stream_hard_limit.setter
    def combined_stream_hard_limit(self, combined_stream_hard_limit):
        """Sets the combined_stream_hard_limit of this StreamLimitConfig.

        combined_stream_hard_limit should be less than the corresponding DD System Limit and no less than a single limit. For \"Modify\", set value to -1 to reset.  # noqa: E501

        :param combined_stream_hard_limit: The combined_stream_hard_limit of this StreamLimitConfig.  # noqa: E501
        :type: int
        """

        self._combined_stream_hard_limit = combined_stream_hard_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StreamLimitConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamLimitConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StreamLimitConfig):
            return True

        return self.to_dict() != other.to_dict()
