# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class MtreeShowPerformance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'time': 'str',
        'read_throughput': 'str',
        'write_throughput': 'str',
        'read_sequential_access_streams': 'int',
        'write_sequential_access_streams': 'int',
        'read_random_access_streams': 'int',
        'write_random_access_streams': 'int',
        'reopened_read_streams_in_last_30_seconds': 'int',
        'reopened_write_streams_in_last_30_seconds': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'time': 'time',
        'read_throughput': 'read_throughput',
        'write_throughput': 'write_throughput',
        'read_sequential_access_streams': 'read_sequential_access_streams',
        'write_sequential_access_streams': 'write_sequential_access_streams',
        'read_random_access_streams': 'read_random_access_streams',
        'write_random_access_streams': 'write_random_access_streams',
        'reopened_read_streams_in_last_30_seconds': 'reopened_read_streams_in_last_30_seconds',
        'reopened_write_streams_in_last_30_seconds': 'reopened_write_streams_in_last_30_seconds'
    }

    def __init__(self, _date=None, time=None, read_throughput=None, write_throughput=None, read_sequential_access_streams=None, write_sequential_access_streams=None, read_random_access_streams=None, write_random_access_streams=None, reopened_read_streams_in_last_30_seconds=None, reopened_write_streams_in_last_30_seconds=None, _configuration=None):  # noqa: E501
        """MtreeShowPerformance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__date = None
        self._time = None
        self._read_throughput = None
        self._write_throughput = None
        self._read_sequential_access_streams = None
        self._write_sequential_access_streams = None
        self._read_random_access_streams = None
        self._write_random_access_streams = None
        self._reopened_read_streams_in_last_30_seconds = None
        self._reopened_write_streams_in_last_30_seconds = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time
        if read_throughput is not None:
            self.read_throughput = read_throughput
        if write_throughput is not None:
            self.write_throughput = write_throughput
        if read_sequential_access_streams is not None:
            self.read_sequential_access_streams = read_sequential_access_streams
        if write_sequential_access_streams is not None:
            self.write_sequential_access_streams = write_sequential_access_streams
        if read_random_access_streams is not None:
            self.read_random_access_streams = read_random_access_streams
        if write_random_access_streams is not None:
            self.write_random_access_streams = write_random_access_streams
        if reopened_read_streams_in_last_30_seconds is not None:
            self.reopened_read_streams_in_last_30_seconds = reopened_read_streams_in_last_30_seconds
        if reopened_write_streams_in_last_30_seconds is not None:
            self.reopened_write_streams_in_last_30_seconds = reopened_write_streams_in_last_30_seconds

    @property
    def _date(self):
        """Gets the _date of this MtreeShowPerformance.  # noqa: E501


        :return: The _date of this MtreeShowPerformance.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this MtreeShowPerformance.


        :param _date: The _date of this MtreeShowPerformance.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this MtreeShowPerformance.  # noqa: E501


        :return: The time of this MtreeShowPerformance.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MtreeShowPerformance.


        :param time: The time of this MtreeShowPerformance.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def read_throughput(self):
        """Gets the read_throughput of this MtreeShowPerformance.  # noqa: E501


        :return: The read_throughput of this MtreeShowPerformance.  # noqa: E501
        :rtype: str
        """
        return self._read_throughput

    @read_throughput.setter
    def read_throughput(self, read_throughput):
        """Sets the read_throughput of this MtreeShowPerformance.


        :param read_throughput: The read_throughput of this MtreeShowPerformance.  # noqa: E501
        :type: str
        """

        self._read_throughput = read_throughput

    @property
    def write_throughput(self):
        """Gets the write_throughput of this MtreeShowPerformance.  # noqa: E501


        :return: The write_throughput of this MtreeShowPerformance.  # noqa: E501
        :rtype: str
        """
        return self._write_throughput

    @write_throughput.setter
    def write_throughput(self, write_throughput):
        """Sets the write_throughput of this MtreeShowPerformance.


        :param write_throughput: The write_throughput of this MtreeShowPerformance.  # noqa: E501
        :type: str
        """

        self._write_throughput = write_throughput

    @property
    def read_sequential_access_streams(self):
        """Gets the read_sequential_access_streams of this MtreeShowPerformance.  # noqa: E501


        :return: The read_sequential_access_streams of this MtreeShowPerformance.  # noqa: E501
        :rtype: int
        """
        return self._read_sequential_access_streams

    @read_sequential_access_streams.setter
    def read_sequential_access_streams(self, read_sequential_access_streams):
        """Sets the read_sequential_access_streams of this MtreeShowPerformance.


        :param read_sequential_access_streams: The read_sequential_access_streams of this MtreeShowPerformance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                read_sequential_access_streams is not None and read_sequential_access_streams < 0):  # noqa: E501
            raise ValueError("Invalid value for `read_sequential_access_streams`, must be a value greater than or equal to `0`")  # noqa: E501

        self._read_sequential_access_streams = read_sequential_access_streams

    @property
    def write_sequential_access_streams(self):
        """Gets the write_sequential_access_streams of this MtreeShowPerformance.  # noqa: E501


        :return: The write_sequential_access_streams of this MtreeShowPerformance.  # noqa: E501
        :rtype: int
        """
        return self._write_sequential_access_streams

    @write_sequential_access_streams.setter
    def write_sequential_access_streams(self, write_sequential_access_streams):
        """Sets the write_sequential_access_streams of this MtreeShowPerformance.


        :param write_sequential_access_streams: The write_sequential_access_streams of this MtreeShowPerformance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                write_sequential_access_streams is not None and write_sequential_access_streams < 0):  # noqa: E501
            raise ValueError("Invalid value for `write_sequential_access_streams`, must be a value greater than or equal to `0`")  # noqa: E501

        self._write_sequential_access_streams = write_sequential_access_streams

    @property
    def read_random_access_streams(self):
        """Gets the read_random_access_streams of this MtreeShowPerformance.  # noqa: E501


        :return: The read_random_access_streams of this MtreeShowPerformance.  # noqa: E501
        :rtype: int
        """
        return self._read_random_access_streams

    @read_random_access_streams.setter
    def read_random_access_streams(self, read_random_access_streams):
        """Sets the read_random_access_streams of this MtreeShowPerformance.


        :param read_random_access_streams: The read_random_access_streams of this MtreeShowPerformance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                read_random_access_streams is not None and read_random_access_streams < 0):  # noqa: E501
            raise ValueError("Invalid value for `read_random_access_streams`, must be a value greater than or equal to `0`")  # noqa: E501

        self._read_random_access_streams = read_random_access_streams

    @property
    def write_random_access_streams(self):
        """Gets the write_random_access_streams of this MtreeShowPerformance.  # noqa: E501


        :return: The write_random_access_streams of this MtreeShowPerformance.  # noqa: E501
        :rtype: int
        """
        return self._write_random_access_streams

    @write_random_access_streams.setter
    def write_random_access_streams(self, write_random_access_streams):
        """Sets the write_random_access_streams of this MtreeShowPerformance.


        :param write_random_access_streams: The write_random_access_streams of this MtreeShowPerformance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                write_random_access_streams is not None and write_random_access_streams < 0):  # noqa: E501
            raise ValueError("Invalid value for `write_random_access_streams`, must be a value greater than or equal to `0`")  # noqa: E501

        self._write_random_access_streams = write_random_access_streams

    @property
    def reopened_read_streams_in_last_30_seconds(self):
        """Gets the reopened_read_streams_in_last_30_seconds of this MtreeShowPerformance.  # noqa: E501


        :return: The reopened_read_streams_in_last_30_seconds of this MtreeShowPerformance.  # noqa: E501
        :rtype: int
        """
        return self._reopened_read_streams_in_last_30_seconds

    @reopened_read_streams_in_last_30_seconds.setter
    def reopened_read_streams_in_last_30_seconds(self, reopened_read_streams_in_last_30_seconds):
        """Sets the reopened_read_streams_in_last_30_seconds of this MtreeShowPerformance.


        :param reopened_read_streams_in_last_30_seconds: The reopened_read_streams_in_last_30_seconds of this MtreeShowPerformance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                reopened_read_streams_in_last_30_seconds is not None and reopened_read_streams_in_last_30_seconds < 0):  # noqa: E501
            raise ValueError("Invalid value for `reopened_read_streams_in_last_30_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._reopened_read_streams_in_last_30_seconds = reopened_read_streams_in_last_30_seconds

    @property
    def reopened_write_streams_in_last_30_seconds(self):
        """Gets the reopened_write_streams_in_last_30_seconds of this MtreeShowPerformance.  # noqa: E501


        :return: The reopened_write_streams_in_last_30_seconds of this MtreeShowPerformance.  # noqa: E501
        :rtype: int
        """
        return self._reopened_write_streams_in_last_30_seconds

    @reopened_write_streams_in_last_30_seconds.setter
    def reopened_write_streams_in_last_30_seconds(self, reopened_write_streams_in_last_30_seconds):
        """Sets the reopened_write_streams_in_last_30_seconds of this MtreeShowPerformance.


        :param reopened_write_streams_in_last_30_seconds: The reopened_write_streams_in_last_30_seconds of this MtreeShowPerformance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                reopened_write_streams_in_last_30_seconds is not None and reopened_write_streams_in_last_30_seconds < 0):  # noqa: E501
            raise ValueError("Invalid value for `reopened_write_streams_in_last_30_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._reopened_write_streams_in_last_30_seconds = reopened_write_streams_in_last_30_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MtreeShowPerformance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtreeShowPerformance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtreeShowPerformance):
            return True

        return self.to_dict() != other.to_dict()
