# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class CpuStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idle': 'float',
        'system': 'float',
        'user': 'float',
        'utilization': 'float'
    }

    attribute_map = {
        'idle': 'idle',
        'system': 'system',
        'user': 'user',
        'utilization': 'utilization'
    }

    def __init__(self, idle=None, system=None, user=None, utilization=None, _configuration=None):  # noqa: E501
        """CpuStats - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._idle = None
        self._system = None
        self._user = None
        self._utilization = None
        self.discriminator = None

        if idle is not None:
            self.idle = idle
        if system is not None:
            self.system = system
        if user is not None:
            self.user = user
        if utilization is not None:
            self.utilization = utilization

    @property
    def idle(self):
        """Gets the idle of this CpuStats.  # noqa: E501

        Only for absolute type. Twiddling thumbs. Unit is USER_HZ.  # noqa: E501

        :return: The idle of this CpuStats.  # noqa: E501
        :rtype: float
        """
        return self._idle

    @idle.setter
    def idle(self, idle):
        """Sets the idle of this CpuStats.

        Only for absolute type. Twiddling thumbs. Unit is USER_HZ.  # noqa: E501

        :param idle: The idle of this CpuStats.  # noqa: E501
        :type: float
        """

        self._idle = idle

    @property
    def system(self):
        """Gets the system of this CpuStats.  # noqa: E501

        Only for absolute type. Processes executing in kernal mode. Unit is USER_HZ.  # noqa: E501

        :return: The system of this CpuStats.  # noqa: E501
        :rtype: float
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this CpuStats.

        Only for absolute type. Processes executing in kernal mode. Unit is USER_HZ.  # noqa: E501

        :param system: The system of this CpuStats.  # noqa: E501
        :type: float
        """

        self._system = system

    @property
    def user(self):
        """Gets the user of this CpuStats.  # noqa: E501

        Only for absolute type. Normal processes executing in user mode. Unit is USER_HZ.  # noqa: E501

        :return: The user of this CpuStats.  # noqa: E501
        :rtype: float
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CpuStats.

        Only for absolute type. Normal processes executing in user mode. Unit is USER_HZ.  # noqa: E501

        :param user: The user of this CpuStats.  # noqa: E501
        :type: float
        """

        self._user = user

    @property
    def utilization(self):
        """Gets the utilization of this CpuStats.  # noqa: E501

        Only for delta type.  # noqa: E501

        :return: The utilization of this CpuStats.  # noqa: E501
        :rtype: float
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """Sets the utilization of this CpuStats.

        Only for delta type.  # noqa: E501

        :param utilization: The utilization of this CpuStats.  # noqa: E501
        :type: float
        """

        self._utilization = utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CpuStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CpuStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CpuStats):
            return True

        return self.to_dict() != other.to_dict()
