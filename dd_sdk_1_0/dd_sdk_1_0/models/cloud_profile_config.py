# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class CloudProfileConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'proxy': 'ProxyDetails',
        'aws': 'AwsInfo',
        'azure': 'AzureInfo',
        'virtustream': 'VirtustreamInfo',
        'ecs': 'EcsInfo'
    }

    attribute_map = {
        'name': 'name',
        'proxy': 'proxy',
        'aws': 'aws',
        'azure': 'azure',
        'virtustream': 'virtustream',
        'ecs': 'ecs'
    }

    def __init__(self, name=None, proxy=None, aws=None, azure=None, virtustream=None, ecs=None, _configuration=None):  # noqa: E501
        """CloudProfileConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._proxy = None
        self._aws = None
        self._azure = None
        self._virtustream = None
        self._ecs = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if proxy is not None:
            self.proxy = proxy
        if aws is not None:
            self.aws = aws
        if azure is not None:
            self.azure = azure
        if virtustream is not None:
            self.virtustream = virtustream
        if ecs is not None:
            self.ecs = ecs

    @property
    def name(self):
        """Gets the name of this CloudProfileConfig.  # noqa: E501

        Name is required for the creation.  # noqa: E501

        :return: The name of this CloudProfileConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudProfileConfig.

        Name is required for the creation.  # noqa: E501

        :param name: The name of this CloudProfileConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def proxy(self):
        """Gets the proxy of this CloudProfileConfig.  # noqa: E501


        :return: The proxy of this CloudProfileConfig.  # noqa: E501
        :rtype: ProxyDetails
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this CloudProfileConfig.


        :param proxy: The proxy of this CloudProfileConfig.  # noqa: E501
        :type: ProxyDetails
        """

        self._proxy = proxy

    @property
    def aws(self):
        """Gets the aws of this CloudProfileConfig.  # noqa: E501


        :return: The aws of this CloudProfileConfig.  # noqa: E501
        :rtype: AwsInfo
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this CloudProfileConfig.


        :param aws: The aws of this CloudProfileConfig.  # noqa: E501
        :type: AwsInfo
        """

        self._aws = aws

    @property
    def azure(self):
        """Gets the azure of this CloudProfileConfig.  # noqa: E501


        :return: The azure of this CloudProfileConfig.  # noqa: E501
        :rtype: AzureInfo
        """
        return self._azure

    @azure.setter
    def azure(self, azure):
        """Sets the azure of this CloudProfileConfig.


        :param azure: The azure of this CloudProfileConfig.  # noqa: E501
        :type: AzureInfo
        """

        self._azure = azure

    @property
    def virtustream(self):
        """Gets the virtustream of this CloudProfileConfig.  # noqa: E501


        :return: The virtustream of this CloudProfileConfig.  # noqa: E501
        :rtype: VirtustreamInfo
        """
        return self._virtustream

    @virtustream.setter
    def virtustream(self, virtustream):
        """Sets the virtustream of this CloudProfileConfig.


        :param virtustream: The virtustream of this CloudProfileConfig.  # noqa: E501
        :type: VirtustreamInfo
        """

        self._virtustream = virtustream

    @property
    def ecs(self):
        """Gets the ecs of this CloudProfileConfig.  # noqa: E501


        :return: The ecs of this CloudProfileConfig.  # noqa: E501
        :rtype: EcsInfo
        """
        return self._ecs

    @ecs.setter
    def ecs(self, ecs):
        """Sets the ecs of this CloudProfileConfig.


        :param ecs: The ecs of this CloudProfileConfig.  # noqa: E501
        :type: EcsInfo
        """

        self._ecs = ecs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudProfileConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudProfileConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudProfileConfig):
            return True

        return self.to_dict() != other.to_dict()
