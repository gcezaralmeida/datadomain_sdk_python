# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class DataMovementMtreeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'mtree': 'str',
        'files_inspected': 'int',
        'files_eligible': 'int',
        'files_moved': 'int',
        'files_failed': 'int',
        'precomp_bytes_moved': 'int',
        'postcomp_bytes_moved': 'int',
        'destination_cloud_unit': 'str',
        'elapsed_time': 'int',
        'is_migrating': 'bool',
        'link': 'RestLinkRep'
    }

    attribute_map = {
        'id': 'id',
        'mtree': 'mtree',
        'files_inspected': 'files_inspected',
        'files_eligible': 'files_eligible',
        'files_moved': 'files_moved',
        'files_failed': 'files_failed',
        'precomp_bytes_moved': 'precomp_bytes_moved',
        'postcomp_bytes_moved': 'postcomp_bytes_moved',
        'destination_cloud_unit': 'destination_cloud_unit',
        'elapsed_time': 'elapsed_time',
        'is_migrating': 'is_migrating',
        'link': 'link'
    }

    def __init__(self, id=None, mtree=None, files_inspected=None, files_eligible=None, files_moved=None, files_failed=None, precomp_bytes_moved=None, postcomp_bytes_moved=None, destination_cloud_unit=None, elapsed_time=None, is_migrating=None, link=None, _configuration=None):  # noqa: E501
        """DataMovementMtreeInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._mtree = None
        self._files_inspected = None
        self._files_eligible = None
        self._files_moved = None
        self._files_failed = None
        self._precomp_bytes_moved = None
        self._postcomp_bytes_moved = None
        self._destination_cloud_unit = None
        self._elapsed_time = None
        self._is_migrating = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.mtree = mtree
        if files_inspected is not None:
            self.files_inspected = files_inspected
        if files_eligible is not None:
            self.files_eligible = files_eligible
        if files_moved is not None:
            self.files_moved = files_moved
        if files_failed is not None:
            self.files_failed = files_failed
        if precomp_bytes_moved is not None:
            self.precomp_bytes_moved = precomp_bytes_moved
        if postcomp_bytes_moved is not None:
            self.postcomp_bytes_moved = postcomp_bytes_moved
        if destination_cloud_unit is not None:
            self.destination_cloud_unit = destination_cloud_unit
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if is_migrating is not None:
            self.is_migrating = is_migrating
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this DataMovementMtreeInfo.  # noqa: E501


        :return: The id of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataMovementMtreeInfo.


        :param id: The id of this DataMovementMtreeInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def mtree(self):
        """Gets the mtree of this DataMovementMtreeInfo.  # noqa: E501


        :return: The mtree of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: str
        """
        return self._mtree

    @mtree.setter
    def mtree(self, mtree):
        """Sets the mtree of this DataMovementMtreeInfo.


        :param mtree: The mtree of this DataMovementMtreeInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and mtree is None:
            raise ValueError("Invalid value for `mtree`, must not be `None`")  # noqa: E501

        self._mtree = mtree

    @property
    def files_inspected(self):
        """Gets the files_inspected of this DataMovementMtreeInfo.  # noqa: E501


        :return: The files_inspected of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: int
        """
        return self._files_inspected

    @files_inspected.setter
    def files_inspected(self, files_inspected):
        """Sets the files_inspected of this DataMovementMtreeInfo.


        :param files_inspected: The files_inspected of this DataMovementMtreeInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                files_inspected is not None and files_inspected < 0):  # noqa: E501
            raise ValueError("Invalid value for `files_inspected`, must be a value greater than or equal to `0`")  # noqa: E501

        self._files_inspected = files_inspected

    @property
    def files_eligible(self):
        """Gets the files_eligible of this DataMovementMtreeInfo.  # noqa: E501


        :return: The files_eligible of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: int
        """
        return self._files_eligible

    @files_eligible.setter
    def files_eligible(self, files_eligible):
        """Sets the files_eligible of this DataMovementMtreeInfo.


        :param files_eligible: The files_eligible of this DataMovementMtreeInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                files_eligible is not None and files_eligible < 0):  # noqa: E501
            raise ValueError("Invalid value for `files_eligible`, must be a value greater than or equal to `0`")  # noqa: E501

        self._files_eligible = files_eligible

    @property
    def files_moved(self):
        """Gets the files_moved of this DataMovementMtreeInfo.  # noqa: E501


        :return: The files_moved of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: int
        """
        return self._files_moved

    @files_moved.setter
    def files_moved(self, files_moved):
        """Sets the files_moved of this DataMovementMtreeInfo.


        :param files_moved: The files_moved of this DataMovementMtreeInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                files_moved is not None and files_moved < 0):  # noqa: E501
            raise ValueError("Invalid value for `files_moved`, must be a value greater than or equal to `0`")  # noqa: E501

        self._files_moved = files_moved

    @property
    def files_failed(self):
        """Gets the files_failed of this DataMovementMtreeInfo.  # noqa: E501


        :return: The files_failed of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: int
        """
        return self._files_failed

    @files_failed.setter
    def files_failed(self, files_failed):
        """Sets the files_failed of this DataMovementMtreeInfo.


        :param files_failed: The files_failed of this DataMovementMtreeInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                files_failed is not None and files_failed < 0):  # noqa: E501
            raise ValueError("Invalid value for `files_failed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._files_failed = files_failed

    @property
    def precomp_bytes_moved(self):
        """Gets the precomp_bytes_moved of this DataMovementMtreeInfo.  # noqa: E501


        :return: The precomp_bytes_moved of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: int
        """
        return self._precomp_bytes_moved

    @precomp_bytes_moved.setter
    def precomp_bytes_moved(self, precomp_bytes_moved):
        """Sets the precomp_bytes_moved of this DataMovementMtreeInfo.


        :param precomp_bytes_moved: The precomp_bytes_moved of this DataMovementMtreeInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                precomp_bytes_moved is not None and precomp_bytes_moved < 0):  # noqa: E501
            raise ValueError("Invalid value for `precomp_bytes_moved`, must be a value greater than or equal to `0`")  # noqa: E501

        self._precomp_bytes_moved = precomp_bytes_moved

    @property
    def postcomp_bytes_moved(self):
        """Gets the postcomp_bytes_moved of this DataMovementMtreeInfo.  # noqa: E501


        :return: The postcomp_bytes_moved of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: int
        """
        return self._postcomp_bytes_moved

    @postcomp_bytes_moved.setter
    def postcomp_bytes_moved(self, postcomp_bytes_moved):
        """Sets the postcomp_bytes_moved of this DataMovementMtreeInfo.


        :param postcomp_bytes_moved: The postcomp_bytes_moved of this DataMovementMtreeInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                postcomp_bytes_moved is not None and postcomp_bytes_moved < 0):  # noqa: E501
            raise ValueError("Invalid value for `postcomp_bytes_moved`, must be a value greater than or equal to `0`")  # noqa: E501

        self._postcomp_bytes_moved = postcomp_bytes_moved

    @property
    def destination_cloud_unit(self):
        """Gets the destination_cloud_unit of this DataMovementMtreeInfo.  # noqa: E501


        :return: The destination_cloud_unit of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: str
        """
        return self._destination_cloud_unit

    @destination_cloud_unit.setter
    def destination_cloud_unit(self, destination_cloud_unit):
        """Sets the destination_cloud_unit of this DataMovementMtreeInfo.


        :param destination_cloud_unit: The destination_cloud_unit of this DataMovementMtreeInfo.  # noqa: E501
        :type: str
        """

        self._destination_cloud_unit = destination_cloud_unit

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this DataMovementMtreeInfo.  # noqa: E501


        :return: The elapsed_time of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this DataMovementMtreeInfo.


        :param elapsed_time: The elapsed_time of this DataMovementMtreeInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                elapsed_time is not None and elapsed_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `elapsed_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._elapsed_time = elapsed_time

    @property
    def is_migrating(self):
        """Gets the is_migrating of this DataMovementMtreeInfo.  # noqa: E501


        :return: The is_migrating of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_migrating

    @is_migrating.setter
    def is_migrating(self, is_migrating):
        """Sets the is_migrating of this DataMovementMtreeInfo.


        :param is_migrating: The is_migrating of this DataMovementMtreeInfo.  # noqa: E501
        :type: bool
        """

        self._is_migrating = is_migrating

    @property
    def link(self):
        """Gets the link of this DataMovementMtreeInfo.  # noqa: E501


        :return: The link of this DataMovementMtreeInfo.  # noqa: E501
        :rtype: RestLinkRep
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this DataMovementMtreeInfo.


        :param link: The link of this DataMovementMtreeInfo.  # noqa: E501
        :type: RestLinkRep
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataMovementMtreeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataMovementMtreeInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataMovementMtreeInfo):
            return True

        return self.to_dict() != other.to_dict()
