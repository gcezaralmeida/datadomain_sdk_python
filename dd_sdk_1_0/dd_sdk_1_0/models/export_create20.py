# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class ExportCreate20(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_name': 'str',
        'export_path': 'str',
        'tenant_unit': 'str',
        'clients': 'ExportClient20',
        'referrals': 'ExportReferral20'
    }

    attribute_map = {
        'export_name': 'export_name',
        'export_path': 'export_path',
        'tenant_unit': 'tenant_unit',
        'clients': 'clients',
        'referrals': 'referrals'
    }

    def __init__(self, export_name=None, export_path=None, tenant_unit=None, clients=None, referrals=None, _configuration=None):  # noqa: E501
        """ExportCreate20 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._export_name = None
        self._export_path = None
        self._tenant_unit = None
        self._clients = None
        self._referrals = None
        self.discriminator = None

        if export_name is not None:
            self.export_name = export_name
        self.export_path = export_path
        if tenant_unit is not None:
            self.tenant_unit = tenant_unit
        if clients is not None:
            self.clients = clients
        if referrals is not None:
            self.referrals = referrals

    @property
    def export_name(self):
        """Gets the export_name of this ExportCreate20.  # noqa: E501

        Export name  # noqa: E501

        :return: The export_name of this ExportCreate20.  # noqa: E501
        :rtype: str
        """
        return self._export_name

    @export_name.setter
    def export_name(self, export_name):
        """Sets the export_name of this ExportCreate20.

        Export name  # noqa: E501

        :param export_name: The export_name of this ExportCreate20.  # noqa: E501
        :type: str
        """

        self._export_name = export_name

    @property
    def export_path(self):
        """Gets the export_path of this ExportCreate20.  # noqa: E501

        Full path  # noqa: E501

        :return: The export_path of this ExportCreate20.  # noqa: E501
        :rtype: str
        """
        return self._export_path

    @export_path.setter
    def export_path(self, export_path):
        """Sets the export_path of this ExportCreate20.

        Full path  # noqa: E501

        :param export_path: The export_path of this ExportCreate20.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and export_path is None:
            raise ValueError("Invalid value for `export_path`, must not be `None`")  # noqa: E501

        self._export_path = export_path

    @property
    def tenant_unit(self):
        """Gets the tenant_unit of this ExportCreate20.  # noqa: E501

        Tenant unit  # noqa: E501

        :return: The tenant_unit of this ExportCreate20.  # noqa: E501
        :rtype: str
        """
        return self._tenant_unit

    @tenant_unit.setter
    def tenant_unit(self, tenant_unit):
        """Sets the tenant_unit of this ExportCreate20.

        Tenant unit  # noqa: E501

        :param tenant_unit: The tenant_unit of this ExportCreate20.  # noqa: E501
        :type: str
        """

        self._tenant_unit = tenant_unit

    @property
    def clients(self):
        """Gets the clients of this ExportCreate20.  # noqa: E501

        Specify clients  # noqa: E501

        :return: The clients of this ExportCreate20.  # noqa: E501
        :rtype: ExportClient20
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this ExportCreate20.

        Specify clients  # noqa: E501

        :param clients: The clients of this ExportCreate20.  # noqa: E501
        :type: ExportClient20
        """

        self._clients = clients

    @property
    def referrals(self):
        """Gets the referrals of this ExportCreate20.  # noqa: E501

        Specify referrals  # noqa: E501

        :return: The referrals of this ExportCreate20.  # noqa: E501
        :rtype: ExportReferral20
        """
        return self._referrals

    @referrals.setter
    def referrals(self, referrals):
        """Sets the referrals of this ExportCreate20.

        Specify referrals  # noqa: E501

        :param referrals: The referrals of this ExportCreate20.  # noqa: E501
        :type: ExportReferral20
        """

        self._referrals = referrals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportCreate20, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportCreate20):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExportCreate20):
            return True

        return self.to_dict() != other.to_dict()
