# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class Paging(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_page': 'int',
        'page_entries': 'int',
        'total_entries': 'int',
        'page_size': 'int',
        'page_links': 'list[RestLinkRep]'
    }

    attribute_map = {
        'current_page': 'current_page',
        'page_entries': 'page_entries',
        'total_entries': 'total_entries',
        'page_size': 'page_size',
        'page_links': 'page_links'
    }

    def __init__(self, current_page=None, page_entries=None, total_entries=None, page_size=None, page_links=None, _configuration=None):  # noqa: E501
        """Paging - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._current_page = None
        self._page_entries = None
        self._total_entries = None
        self._page_size = None
        self._page_links = None
        self.discriminator = None

        if current_page is not None:
            self.current_page = current_page
        if page_entries is not None:
            self.page_entries = page_entries
        if total_entries is not None:
            self.total_entries = total_entries
        if page_size is not None:
            self.page_size = page_size
        if page_links is not None:
            self.page_links = page_links

    @property
    def current_page(self):
        """Gets the current_page of this Paging.  # noqa: E501


        :return: The current_page of this Paging.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this Paging.


        :param current_page: The current_page of this Paging.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                current_page is not None and current_page < 0):  # noqa: E501
            raise ValueError("Invalid value for `current_page`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current_page = current_page

    @property
    def page_entries(self):
        """Gets the page_entries of this Paging.  # noqa: E501


        :return: The page_entries of this Paging.  # noqa: E501
        :rtype: int
        """
        return self._page_entries

    @page_entries.setter
    def page_entries(self, page_entries):
        """Sets the page_entries of this Paging.


        :param page_entries: The page_entries of this Paging.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                page_entries is not None and page_entries < 0):  # noqa: E501
            raise ValueError("Invalid value for `page_entries`, must be a value greater than or equal to `0`")  # noqa: E501

        self._page_entries = page_entries

    @property
    def total_entries(self):
        """Gets the total_entries of this Paging.  # noqa: E501


        :return: The total_entries of this Paging.  # noqa: E501
        :rtype: int
        """
        return self._total_entries

    @total_entries.setter
    def total_entries(self, total_entries):
        """Sets the total_entries of this Paging.


        :param total_entries: The total_entries of this Paging.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                total_entries is not None and total_entries < 0):  # noqa: E501
            raise ValueError("Invalid value for `total_entries`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_entries = total_entries

    @property
    def page_size(self):
        """Gets the page_size of this Paging.  # noqa: E501


        :return: The page_size of this Paging.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Paging.


        :param page_size: The page_size of this Paging.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                page_size is not None and page_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._page_size = page_size

    @property
    def page_links(self):
        """Gets the page_links of this Paging.  # noqa: E501


        :return: The page_links of this Paging.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._page_links

    @page_links.setter
    def page_links(self, page_links):
        """Sets the page_links of this Paging.


        :param page_links: The page_links of this Paging.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._page_links = page_links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Paging, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Paging):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Paging):
            return True

        return self.to_dict() != other.to_dict()
