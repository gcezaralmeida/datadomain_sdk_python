# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FileReplicationActiveStatsDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'precomp_replicated_bytes': 'int',
        'precomp_remaining_bytes': 'int',
        'active_files': 'int',
        'total_size': 'int'
    }

    attribute_map = {
        'precomp_replicated_bytes': 'precomp_replicated_bytes',
        'precomp_remaining_bytes': 'precomp_remaining_bytes',
        'active_files': 'active_files',
        'total_size': 'total_size'
    }

    def __init__(self, precomp_replicated_bytes=None, precomp_remaining_bytes=None, active_files=None, total_size=None, _configuration=None):  # noqa: E501
        """FileReplicationActiveStatsDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._precomp_replicated_bytes = None
        self._precomp_remaining_bytes = None
        self._active_files = None
        self._total_size = None
        self.discriminator = None

        self.precomp_replicated_bytes = precomp_replicated_bytes
        self.precomp_remaining_bytes = precomp_remaining_bytes
        self.active_files = active_files
        self.total_size = total_size

    @property
    def precomp_replicated_bytes(self):
        """Gets the precomp_replicated_bytes of this FileReplicationActiveStatsDetails.  # noqa: E501


        :return: The precomp_replicated_bytes of this FileReplicationActiveStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._precomp_replicated_bytes

    @precomp_replicated_bytes.setter
    def precomp_replicated_bytes(self, precomp_replicated_bytes):
        """Sets the precomp_replicated_bytes of this FileReplicationActiveStatsDetails.


        :param precomp_replicated_bytes: The precomp_replicated_bytes of this FileReplicationActiveStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and precomp_replicated_bytes is None:
            raise ValueError("Invalid value for `precomp_replicated_bytes`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                precomp_replicated_bytes is not None and precomp_replicated_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `precomp_replicated_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._precomp_replicated_bytes = precomp_replicated_bytes

    @property
    def precomp_remaining_bytes(self):
        """Gets the precomp_remaining_bytes of this FileReplicationActiveStatsDetails.  # noqa: E501


        :return: The precomp_remaining_bytes of this FileReplicationActiveStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._precomp_remaining_bytes

    @precomp_remaining_bytes.setter
    def precomp_remaining_bytes(self, precomp_remaining_bytes):
        """Sets the precomp_remaining_bytes of this FileReplicationActiveStatsDetails.


        :param precomp_remaining_bytes: The precomp_remaining_bytes of this FileReplicationActiveStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and precomp_remaining_bytes is None:
            raise ValueError("Invalid value for `precomp_remaining_bytes`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                precomp_remaining_bytes is not None and precomp_remaining_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `precomp_remaining_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._precomp_remaining_bytes = precomp_remaining_bytes

    @property
    def active_files(self):
        """Gets the active_files of this FileReplicationActiveStatsDetails.  # noqa: E501


        :return: The active_files of this FileReplicationActiveStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._active_files

    @active_files.setter
    def active_files(self, active_files):
        """Sets the active_files of this FileReplicationActiveStatsDetails.


        :param active_files: The active_files of this FileReplicationActiveStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and active_files is None:
            raise ValueError("Invalid value for `active_files`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                active_files is not None and active_files < 0):  # noqa: E501
            raise ValueError("Invalid value for `active_files`, must be a value greater than or equal to `0`")  # noqa: E501

        self._active_files = active_files

    @property
    def total_size(self):
        """Gets the total_size of this FileReplicationActiveStatsDetails.  # noqa: E501


        :return: The total_size of this FileReplicationActiveStatsDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this FileReplicationActiveStatsDetails.


        :param total_size: The total_size of this FileReplicationActiveStatsDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_size is None:
            raise ValueError("Invalid value for `total_size`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                total_size is not None and total_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `total_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_size = total_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileReplicationActiveStatsDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileReplicationActiveStatsDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileReplicationActiveStatsDetails):
            return True

        return self.to_dict() != other.to_dict()
