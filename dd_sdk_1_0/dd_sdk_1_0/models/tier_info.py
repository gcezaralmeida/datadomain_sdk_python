# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class TierInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tier': 'TierType',
        'dc_total': 'int',
        'dc_used': 'int',
        'dc_avail': 'int',
        'dc_use': 'int',
        'vs_used': 'int',
        'dc_credit': 'int',
        'ddvar_total': 'int',
        'ddvar_used': 'int',
        'ddvar_avail': 'int',
        'ddvar_use': 'int',
        'ddvar_core_total': 'int',
        'ddvar_core_used': 'int',
        'ddvar_core_avail': 'int',
        'ddvar_core_use': 'int'
    }

    attribute_map = {
        'tier': 'tier',
        'dc_total': 'dc_total',
        'dc_used': 'dc_used',
        'dc_avail': 'dc_avail',
        'dc_use': 'dc_use',
        'vs_used': 'vs_used',
        'dc_credit': 'dc_credit',
        'ddvar_total': 'ddvar_total',
        'ddvar_used': 'ddvar_used',
        'ddvar_avail': 'ddvar_avail',
        'ddvar_use': 'ddvar_use',
        'ddvar_core_total': 'ddvar_core_total',
        'ddvar_core_used': 'ddvar_core_used',
        'ddvar_core_avail': 'ddvar_core_avail',
        'ddvar_core_use': 'ddvar_core_use'
    }

    def __init__(self, tier=None, dc_total=None, dc_used=None, dc_avail=None, dc_use=None, vs_used=None, dc_credit=None, ddvar_total=None, ddvar_used=None, ddvar_avail=None, ddvar_use=None, ddvar_core_total=None, ddvar_core_used=None, ddvar_core_avail=None, ddvar_core_use=None, _configuration=None):  # noqa: E501
        """TierInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tier = None
        self._dc_total = None
        self._dc_used = None
        self._dc_avail = None
        self._dc_use = None
        self._vs_used = None
        self._dc_credit = None
        self._ddvar_total = None
        self._ddvar_used = None
        self._ddvar_avail = None
        self._ddvar_use = None
        self._ddvar_core_total = None
        self._ddvar_core_used = None
        self._ddvar_core_avail = None
        self._ddvar_core_use = None
        self.discriminator = None

        self.tier = tier
        self.dc_total = dc_total
        self.dc_used = dc_used
        self.dc_avail = dc_avail
        self.dc_use = dc_use
        self.vs_used = vs_used
        self.dc_credit = dc_credit
        self.ddvar_total = ddvar_total
        self.ddvar_used = ddvar_used
        self.ddvar_avail = ddvar_avail
        self.ddvar_use = ddvar_use
        self.ddvar_core_total = ddvar_core_total
        self.ddvar_core_used = ddvar_core_used
        self.ddvar_core_avail = ddvar_core_avail
        self.ddvar_core_use = ddvar_core_use

    @property
    def tier(self):
        """Gets the tier of this TierInfo.  # noqa: E501


        :return: The tier of this TierInfo.  # noqa: E501
        :rtype: TierType
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this TierInfo.


        :param tier: The tier of this TierInfo.  # noqa: E501
        :type: TierType
        """
        if self._configuration.client_side_validation and tier is None:
            raise ValueError("Invalid value for `tier`, must not be `None`")  # noqa: E501

        self._tier = tier

    @property
    def dc_total(self):
        """Gets the dc_total of this TierInfo.  # noqa: E501


        :return: The dc_total of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._dc_total

    @dc_total.setter
    def dc_total(self, dc_total):
        """Sets the dc_total of this TierInfo.


        :param dc_total: The dc_total of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and dc_total is None:
            raise ValueError("Invalid value for `dc_total`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                dc_total is not None and dc_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `dc_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dc_total = dc_total

    @property
    def dc_used(self):
        """Gets the dc_used of this TierInfo.  # noqa: E501


        :return: The dc_used of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._dc_used

    @dc_used.setter
    def dc_used(self, dc_used):
        """Sets the dc_used of this TierInfo.


        :param dc_used: The dc_used of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and dc_used is None:
            raise ValueError("Invalid value for `dc_used`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                dc_used is not None and dc_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `dc_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dc_used = dc_used

    @property
    def dc_avail(self):
        """Gets the dc_avail of this TierInfo.  # noqa: E501


        :return: The dc_avail of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._dc_avail

    @dc_avail.setter
    def dc_avail(self, dc_avail):
        """Sets the dc_avail of this TierInfo.


        :param dc_avail: The dc_avail of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and dc_avail is None:
            raise ValueError("Invalid value for `dc_avail`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                dc_avail is not None and dc_avail < 0):  # noqa: E501
            raise ValueError("Invalid value for `dc_avail`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dc_avail = dc_avail

    @property
    def dc_use(self):
        """Gets the dc_use of this TierInfo.  # noqa: E501


        :return: The dc_use of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._dc_use

    @dc_use.setter
    def dc_use(self, dc_use):
        """Sets the dc_use of this TierInfo.


        :param dc_use: The dc_use of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and dc_use is None:
            raise ValueError("Invalid value for `dc_use`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                dc_use is not None and dc_use < 0):  # noqa: E501
            raise ValueError("Invalid value for `dc_use`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dc_use = dc_use

    @property
    def vs_used(self):
        """Gets the vs_used of this TierInfo.  # noqa: E501


        :return: The vs_used of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._vs_used

    @vs_used.setter
    def vs_used(self, vs_used):
        """Sets the vs_used of this TierInfo.


        :param vs_used: The vs_used of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and vs_used is None:
            raise ValueError("Invalid value for `vs_used`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vs_used is not None and vs_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `vs_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vs_used = vs_used

    @property
    def dc_credit(self):
        """Gets the dc_credit of this TierInfo.  # noqa: E501


        :return: The dc_credit of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._dc_credit

    @dc_credit.setter
    def dc_credit(self, dc_credit):
        """Sets the dc_credit of this TierInfo.


        :param dc_credit: The dc_credit of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and dc_credit is None:
            raise ValueError("Invalid value for `dc_credit`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                dc_credit is not None and dc_credit < 0):  # noqa: E501
            raise ValueError("Invalid value for `dc_credit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dc_credit = dc_credit

    @property
    def ddvar_total(self):
        """Gets the ddvar_total of this TierInfo.  # noqa: E501


        :return: The ddvar_total of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_total

    @ddvar_total.setter
    def ddvar_total(self, ddvar_total):
        """Sets the ddvar_total of this TierInfo.


        :param ddvar_total: The ddvar_total of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_total is None:
            raise ValueError("Invalid value for `ddvar_total`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_total is not None and ddvar_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_total = ddvar_total

    @property
    def ddvar_used(self):
        """Gets the ddvar_used of this TierInfo.  # noqa: E501


        :return: The ddvar_used of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_used

    @ddvar_used.setter
    def ddvar_used(self, ddvar_used):
        """Sets the ddvar_used of this TierInfo.


        :param ddvar_used: The ddvar_used of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_used is None:
            raise ValueError("Invalid value for `ddvar_used`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_used is not None and ddvar_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_used = ddvar_used

    @property
    def ddvar_avail(self):
        """Gets the ddvar_avail of this TierInfo.  # noqa: E501


        :return: The ddvar_avail of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_avail

    @ddvar_avail.setter
    def ddvar_avail(self, ddvar_avail):
        """Sets the ddvar_avail of this TierInfo.


        :param ddvar_avail: The ddvar_avail of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_avail is None:
            raise ValueError("Invalid value for `ddvar_avail`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_avail is not None and ddvar_avail < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_avail`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_avail = ddvar_avail

    @property
    def ddvar_use(self):
        """Gets the ddvar_use of this TierInfo.  # noqa: E501


        :return: The ddvar_use of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_use

    @ddvar_use.setter
    def ddvar_use(self, ddvar_use):
        """Sets the ddvar_use of this TierInfo.


        :param ddvar_use: The ddvar_use of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_use is None:
            raise ValueError("Invalid value for `ddvar_use`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_use is not None and ddvar_use < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_use`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_use = ddvar_use

    @property
    def ddvar_core_total(self):
        """Gets the ddvar_core_total of this TierInfo.  # noqa: E501


        :return: The ddvar_core_total of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_core_total

    @ddvar_core_total.setter
    def ddvar_core_total(self, ddvar_core_total):
        """Sets the ddvar_core_total of this TierInfo.


        :param ddvar_core_total: The ddvar_core_total of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_core_total is None:
            raise ValueError("Invalid value for `ddvar_core_total`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_core_total is not None and ddvar_core_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_core_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_core_total = ddvar_core_total

    @property
    def ddvar_core_used(self):
        """Gets the ddvar_core_used of this TierInfo.  # noqa: E501


        :return: The ddvar_core_used of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_core_used

    @ddvar_core_used.setter
    def ddvar_core_used(self, ddvar_core_used):
        """Sets the ddvar_core_used of this TierInfo.


        :param ddvar_core_used: The ddvar_core_used of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_core_used is None:
            raise ValueError("Invalid value for `ddvar_core_used`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_core_used is not None and ddvar_core_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_core_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_core_used = ddvar_core_used

    @property
    def ddvar_core_avail(self):
        """Gets the ddvar_core_avail of this TierInfo.  # noqa: E501


        :return: The ddvar_core_avail of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_core_avail

    @ddvar_core_avail.setter
    def ddvar_core_avail(self, ddvar_core_avail):
        """Sets the ddvar_core_avail of this TierInfo.


        :param ddvar_core_avail: The ddvar_core_avail of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_core_avail is None:
            raise ValueError("Invalid value for `ddvar_core_avail`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_core_avail is not None and ddvar_core_avail < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_core_avail`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_core_avail = ddvar_core_avail

    @property
    def ddvar_core_use(self):
        """Gets the ddvar_core_use of this TierInfo.  # noqa: E501


        :return: The ddvar_core_use of this TierInfo.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_core_use

    @ddvar_core_use.setter
    def ddvar_core_use(self, ddvar_core_use):
        """Sets the ddvar_core_use of this TierInfo.


        :param ddvar_core_use: The ddvar_core_use of this TierInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_core_use is None:
            raise ValueError("Invalid value for `ddvar_core_use`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_core_use is not None and ddvar_core_use < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_core_use`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_core_use = ddvar_core_use

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TierInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TierInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TierInfo):
            return True

        return self.to_dict() != other.to_dict()
