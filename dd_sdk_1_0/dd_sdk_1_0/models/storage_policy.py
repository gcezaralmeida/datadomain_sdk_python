# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class StoragePolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minimum_bytes': 'int',
        'maximum_bytes': 'int',
        'min_incr_bytes': 'int'
    }

    attribute_map = {
        'minimum_bytes': 'minimum_bytes',
        'maximum_bytes': 'maximum_bytes',
        'min_incr_bytes': 'min_incr_bytes'
    }

    def __init__(self, minimum_bytes=None, maximum_bytes=None, min_incr_bytes=None, _configuration=None):  # noqa: E501
        """StoragePolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._minimum_bytes = None
        self._maximum_bytes = None
        self._min_incr_bytes = None
        self.discriminator = None

        if minimum_bytes is not None:
            self.minimum_bytes = minimum_bytes
        if maximum_bytes is not None:
            self.maximum_bytes = maximum_bytes
        if min_incr_bytes is not None:
            self.min_incr_bytes = min_incr_bytes

    @property
    def minimum_bytes(self):
        """Gets the minimum_bytes of this StoragePolicy.  # noqa: E501


        :return: The minimum_bytes of this StoragePolicy.  # noqa: E501
        :rtype: int
        """
        return self._minimum_bytes

    @minimum_bytes.setter
    def minimum_bytes(self, minimum_bytes):
        """Sets the minimum_bytes of this StoragePolicy.


        :param minimum_bytes: The minimum_bytes of this StoragePolicy.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                minimum_bytes is not None and minimum_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `minimum_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._minimum_bytes = minimum_bytes

    @property
    def maximum_bytes(self):
        """Gets the maximum_bytes of this StoragePolicy.  # noqa: E501

        value of zero means no limit  # noqa: E501

        :return: The maximum_bytes of this StoragePolicy.  # noqa: E501
        :rtype: int
        """
        return self._maximum_bytes

    @maximum_bytes.setter
    def maximum_bytes(self, maximum_bytes):
        """Sets the maximum_bytes of this StoragePolicy.

        value of zero means no limit  # noqa: E501

        :param maximum_bytes: The maximum_bytes of this StoragePolicy.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                maximum_bytes is not None and maximum_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `maximum_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._maximum_bytes = maximum_bytes

    @property
    def min_incr_bytes(self):
        """Gets the min_incr_bytes of this StoragePolicy.  # noqa: E501


        :return: The min_incr_bytes of this StoragePolicy.  # noqa: E501
        :rtype: int
        """
        return self._min_incr_bytes

    @min_incr_bytes.setter
    def min_incr_bytes(self, min_incr_bytes):
        """Sets the min_incr_bytes of this StoragePolicy.


        :param min_incr_bytes: The min_incr_bytes of this StoragePolicy.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                min_incr_bytes is not None and min_incr_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `min_incr_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_incr_bytes = min_incr_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoragePolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoragePolicy):
            return True

        return self.to_dict() != other.to_dict()
