# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class Partitions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ddvar_total': 'int',
        'ddvar_used': 'int',
        'ddvar_avail': 'int',
        'ddvar_percent_used': 'int',
        'ddvar_core_total': 'int',
        'ddvar_core_used': 'int',
        'ddvar_core_avail': 'int',
        'ddvar_core_percent_used': 'int',
        'db_total': 'int',
        'db_used': 'int',
        'db_avail': 'int',
        'db_percent_used': 'int'
    }

    attribute_map = {
        'ddvar_total': 'ddvar_total',
        'ddvar_used': 'ddvar_used',
        'ddvar_avail': 'ddvar_avail',
        'ddvar_percent_used': 'ddvar_percent_used',
        'ddvar_core_total': 'ddvar_core_total',
        'ddvar_core_used': 'ddvar_core_used',
        'ddvar_core_avail': 'ddvar_core_avail',
        'ddvar_core_percent_used': 'ddvar_core_percent_used',
        'db_total': 'db_total',
        'db_used': 'db_used',
        'db_avail': 'db_avail',
        'db_percent_used': 'db_percent_used'
    }

    def __init__(self, ddvar_total=None, ddvar_used=None, ddvar_avail=None, ddvar_percent_used=None, ddvar_core_total=None, ddvar_core_used=None, ddvar_core_avail=None, ddvar_core_percent_used=None, db_total=None, db_used=None, db_avail=None, db_percent_used=None, _configuration=None):  # noqa: E501
        """Partitions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ddvar_total = None
        self._ddvar_used = None
        self._ddvar_avail = None
        self._ddvar_percent_used = None
        self._ddvar_core_total = None
        self._ddvar_core_used = None
        self._ddvar_core_avail = None
        self._ddvar_core_percent_used = None
        self._db_total = None
        self._db_used = None
        self._db_avail = None
        self._db_percent_used = None
        self.discriminator = None

        self.ddvar_total = ddvar_total
        self.ddvar_used = ddvar_used
        self.ddvar_avail = ddvar_avail
        self.ddvar_percent_used = ddvar_percent_used
        if ddvar_core_total is not None:
            self.ddvar_core_total = ddvar_core_total
        if ddvar_core_used is not None:
            self.ddvar_core_used = ddvar_core_used
        if ddvar_core_avail is not None:
            self.ddvar_core_avail = ddvar_core_avail
        if ddvar_core_percent_used is not None:
            self.ddvar_core_percent_used = ddvar_core_percent_used
        self.db_total = db_total
        self.db_used = db_used
        self.db_avail = db_avail
        self.db_percent_used = db_percent_used

    @property
    def ddvar_total(self):
        """Gets the ddvar_total of this Partitions.  # noqa: E501


        :return: The ddvar_total of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_total

    @ddvar_total.setter
    def ddvar_total(self, ddvar_total):
        """Sets the ddvar_total of this Partitions.


        :param ddvar_total: The ddvar_total of this Partitions.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_total is None:
            raise ValueError("Invalid value for `ddvar_total`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_total is not None and ddvar_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_total = ddvar_total

    @property
    def ddvar_used(self):
        """Gets the ddvar_used of this Partitions.  # noqa: E501


        :return: The ddvar_used of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_used

    @ddvar_used.setter
    def ddvar_used(self, ddvar_used):
        """Sets the ddvar_used of this Partitions.


        :param ddvar_used: The ddvar_used of this Partitions.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_used is None:
            raise ValueError("Invalid value for `ddvar_used`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_used is not None and ddvar_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_used = ddvar_used

    @property
    def ddvar_avail(self):
        """Gets the ddvar_avail of this Partitions.  # noqa: E501


        :return: The ddvar_avail of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_avail

    @ddvar_avail.setter
    def ddvar_avail(self, ddvar_avail):
        """Sets the ddvar_avail of this Partitions.


        :param ddvar_avail: The ddvar_avail of this Partitions.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_avail is None:
            raise ValueError("Invalid value for `ddvar_avail`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_avail is not None and ddvar_avail < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_avail`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_avail = ddvar_avail

    @property
    def ddvar_percent_used(self):
        """Gets the ddvar_percent_used of this Partitions.  # noqa: E501


        :return: The ddvar_percent_used of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_percent_used

    @ddvar_percent_used.setter
    def ddvar_percent_used(self, ddvar_percent_used):
        """Sets the ddvar_percent_used of this Partitions.


        :param ddvar_percent_used: The ddvar_percent_used of this Partitions.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ddvar_percent_used is None:
            raise ValueError("Invalid value for `ddvar_percent_used`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ddvar_percent_used is not None and ddvar_percent_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_percent_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_percent_used = ddvar_percent_used

    @property
    def ddvar_core_total(self):
        """Gets the ddvar_core_total of this Partitions.  # noqa: E501


        :return: The ddvar_core_total of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_core_total

    @ddvar_core_total.setter
    def ddvar_core_total(self, ddvar_core_total):
        """Sets the ddvar_core_total of this Partitions.


        :param ddvar_core_total: The ddvar_core_total of this Partitions.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                ddvar_core_total is not None and ddvar_core_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_core_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_core_total = ddvar_core_total

    @property
    def ddvar_core_used(self):
        """Gets the ddvar_core_used of this Partitions.  # noqa: E501


        :return: The ddvar_core_used of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_core_used

    @ddvar_core_used.setter
    def ddvar_core_used(self, ddvar_core_used):
        """Sets the ddvar_core_used of this Partitions.


        :param ddvar_core_used: The ddvar_core_used of this Partitions.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                ddvar_core_used is not None and ddvar_core_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_core_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_core_used = ddvar_core_used

    @property
    def ddvar_core_avail(self):
        """Gets the ddvar_core_avail of this Partitions.  # noqa: E501


        :return: The ddvar_core_avail of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_core_avail

    @ddvar_core_avail.setter
    def ddvar_core_avail(self, ddvar_core_avail):
        """Sets the ddvar_core_avail of this Partitions.


        :param ddvar_core_avail: The ddvar_core_avail of this Partitions.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                ddvar_core_avail is not None and ddvar_core_avail < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_core_avail`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_core_avail = ddvar_core_avail

    @property
    def ddvar_core_percent_used(self):
        """Gets the ddvar_core_percent_used of this Partitions.  # noqa: E501


        :return: The ddvar_core_percent_used of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._ddvar_core_percent_used

    @ddvar_core_percent_used.setter
    def ddvar_core_percent_used(self, ddvar_core_percent_used):
        """Sets the ddvar_core_percent_used of this Partitions.


        :param ddvar_core_percent_used: The ddvar_core_percent_used of this Partitions.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                ddvar_core_percent_used is not None and ddvar_core_percent_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `ddvar_core_percent_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ddvar_core_percent_used = ddvar_core_percent_used

    @property
    def db_total(self):
        """Gets the db_total of this Partitions.  # noqa: E501


        :return: The db_total of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._db_total

    @db_total.setter
    def db_total(self, db_total):
        """Sets the db_total of this Partitions.


        :param db_total: The db_total of this Partitions.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and db_total is None:
            raise ValueError("Invalid value for `db_total`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                db_total is not None and db_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `db_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._db_total = db_total

    @property
    def db_used(self):
        """Gets the db_used of this Partitions.  # noqa: E501


        :return: The db_used of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._db_used

    @db_used.setter
    def db_used(self, db_used):
        """Sets the db_used of this Partitions.


        :param db_used: The db_used of this Partitions.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and db_used is None:
            raise ValueError("Invalid value for `db_used`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                db_used is not None and db_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `db_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._db_used = db_used

    @property
    def db_avail(self):
        """Gets the db_avail of this Partitions.  # noqa: E501


        :return: The db_avail of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._db_avail

    @db_avail.setter
    def db_avail(self, db_avail):
        """Sets the db_avail of this Partitions.


        :param db_avail: The db_avail of this Partitions.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and db_avail is None:
            raise ValueError("Invalid value for `db_avail`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                db_avail is not None and db_avail < 0):  # noqa: E501
            raise ValueError("Invalid value for `db_avail`, must be a value greater than or equal to `0`")  # noqa: E501

        self._db_avail = db_avail

    @property
    def db_percent_used(self):
        """Gets the db_percent_used of this Partitions.  # noqa: E501


        :return: The db_percent_used of this Partitions.  # noqa: E501
        :rtype: int
        """
        return self._db_percent_used

    @db_percent_used.setter
    def db_percent_used(self, db_percent_used):
        """Sets the db_percent_used of this Partitions.


        :param db_percent_used: The db_percent_used of this Partitions.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and db_percent_used is None:
            raise ValueError("Invalid value for `db_percent_used`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                db_percent_used is not None and db_percent_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `db_percent_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._db_percent_used = db_percent_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Partitions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Partitions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Partitions):
            return True

        return self.to_dict() != other.to_dict()
