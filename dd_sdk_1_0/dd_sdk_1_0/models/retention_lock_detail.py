# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class RetentionLockDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rl_status': 'RetentionLockStatus20',
        'rl_mode': 'RetentionLockMode20',
        'rl_min_period': 'int',
        'rl_max_period': 'int',
        'rl_uuid': 'str'
    }

    attribute_map = {
        'rl_status': 'rl_status',
        'rl_mode': 'rl_mode',
        'rl_min_period': 'rl_min_period',
        'rl_max_period': 'rl_max_period',
        'rl_uuid': 'rl_uuid'
    }

    def __init__(self, rl_status=None, rl_mode=None, rl_min_period=None, rl_max_period=None, rl_uuid=None, _configuration=None):  # noqa: E501
        """RetentionLockDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._rl_status = None
        self._rl_mode = None
        self._rl_min_period = None
        self._rl_max_period = None
        self._rl_uuid = None
        self.discriminator = None

        if rl_status is not None:
            self.rl_status = rl_status
        if rl_mode is not None:
            self.rl_mode = rl_mode
        if rl_min_period is not None:
            self.rl_min_period = rl_min_period
        if rl_max_period is not None:
            self.rl_max_period = rl_max_period
        if rl_uuid is not None:
            self.rl_uuid = rl_uuid

    @property
    def rl_status(self):
        """Gets the rl_status of this RetentionLockDetail.  # noqa: E501


        :return: The rl_status of this RetentionLockDetail.  # noqa: E501
        :rtype: RetentionLockStatus20
        """
        return self._rl_status

    @rl_status.setter
    def rl_status(self, rl_status):
        """Sets the rl_status of this RetentionLockDetail.


        :param rl_status: The rl_status of this RetentionLockDetail.  # noqa: E501
        :type: RetentionLockStatus20
        """

        self._rl_status = rl_status

    @property
    def rl_mode(self):
        """Gets the rl_mode of this RetentionLockDetail.  # noqa: E501


        :return: The rl_mode of this RetentionLockDetail.  # noqa: E501
        :rtype: RetentionLockMode20
        """
        return self._rl_mode

    @rl_mode.setter
    def rl_mode(self, rl_mode):
        """Sets the rl_mode of this RetentionLockDetail.


        :param rl_mode: The rl_mode of this RetentionLockDetail.  # noqa: E501
        :type: RetentionLockMode20
        """

        self._rl_mode = rl_mode

    @property
    def rl_min_period(self):
        """Gets the rl_min_period of this RetentionLockDetail.  # noqa: E501


        :return: The rl_min_period of this RetentionLockDetail.  # noqa: E501
        :rtype: int
        """
        return self._rl_min_period

    @rl_min_period.setter
    def rl_min_period(self, rl_min_period):
        """Sets the rl_min_period of this RetentionLockDetail.


        :param rl_min_period: The rl_min_period of this RetentionLockDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                rl_min_period is not None and rl_min_period < 0):  # noqa: E501
            raise ValueError("Invalid value for `rl_min_period`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rl_min_period = rl_min_period

    @property
    def rl_max_period(self):
        """Gets the rl_max_period of this RetentionLockDetail.  # noqa: E501


        :return: The rl_max_period of this RetentionLockDetail.  # noqa: E501
        :rtype: int
        """
        return self._rl_max_period

    @rl_max_period.setter
    def rl_max_period(self, rl_max_period):
        """Sets the rl_max_period of this RetentionLockDetail.


        :param rl_max_period: The rl_max_period of this RetentionLockDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                rl_max_period is not None and rl_max_period < 0):  # noqa: E501
            raise ValueError("Invalid value for `rl_max_period`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rl_max_period = rl_max_period

    @property
    def rl_uuid(self):
        """Gets the rl_uuid of this RetentionLockDetail.  # noqa: E501


        :return: The rl_uuid of this RetentionLockDetail.  # noqa: E501
        :rtype: str
        """
        return self._rl_uuid

    @rl_uuid.setter
    def rl_uuid(self, rl_uuid):
        """Sets the rl_uuid of this RetentionLockDetail.


        :param rl_uuid: The rl_uuid of this RetentionLockDetail.  # noqa: E501
        :type: str
        """

        self._rl_uuid = rl_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetentionLockDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetentionLockDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RetentionLockDetail):
            return True

        return self.to_dict() != other.to_dict()
