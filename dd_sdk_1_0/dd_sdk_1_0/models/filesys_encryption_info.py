# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FilesysEncryptionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'encryption_info': 'list[EncryptionInfo]',
        'algorithm_info': 'AlgorithmInfo',
        'filesys_lock_info': 'str',
        'key_manager_in_use': 'str',
        'key_manager_server': 'HostStr',
        'key_manager_port': 'PortNumber',
        'key_manager_fips_mode': 'KeyManagerFipsMode',
        'key_manager_key_class': 'str',
        'key_manager_kmip_user': 'str',
        'key_rotation_period': 'KeyManagerKeyRotationPolicy',
        'last_key_rotation_date': 'int',
        'next_key_rotation_date': 'int',
        'key_rotation_without_fs_restart': 'bool',
        'system_wide_encryption': 'bool',
        'cloud_tier_wide_encryption': 'bool',
        'active_tier_wide_encryption': 'bool',
        'action_needed': 'str',
        'abort_or_apply_change_status': 'str',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'encryption_info': 'encryption_info',
        'algorithm_info': 'algorithm_info',
        'filesys_lock_info': 'filesys_lock_info',
        'key_manager_in_use': 'key_manager_in_use',
        'key_manager_server': 'key_manager_server',
        'key_manager_port': 'key_manager_port',
        'key_manager_fips_mode': 'key_manager_fips_mode',
        'key_manager_key_class': 'key_manager_key_class',
        'key_manager_kmip_user': 'key_manager_kmip_user',
        'key_rotation_period': 'key_rotation_period',
        'last_key_rotation_date': 'last_key_rotation_date',
        'next_key_rotation_date': 'next_key_rotation_date',
        'key_rotation_without_fs_restart': 'key_rotation_without_fs_restart',
        'system_wide_encryption': 'system_wide_encryption',
        'cloud_tier_wide_encryption': 'cloud_tier_wide_encryption',
        'active_tier_wide_encryption': 'active_tier_wide_encryption',
        'action_needed': 'action_needed',
        'abort_or_apply_change_status': 'abort_or_apply_change_status',
        'link': 'link'
    }

    def __init__(self, encryption_info=None, algorithm_info=None, filesys_lock_info=None, key_manager_in_use=None, key_manager_server=None, key_manager_port=None, key_manager_fips_mode=None, key_manager_key_class=None, key_manager_kmip_user=None, key_rotation_period=None, last_key_rotation_date=None, next_key_rotation_date=None, key_rotation_without_fs_restart=None, system_wide_encryption=None, cloud_tier_wide_encryption=None, active_tier_wide_encryption=None, action_needed=None, abort_or_apply_change_status=None, link=None, _configuration=None):  # noqa: E501
        """FilesysEncryptionInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._encryption_info = None
        self._algorithm_info = None
        self._filesys_lock_info = None
        self._key_manager_in_use = None
        self._key_manager_server = None
        self._key_manager_port = None
        self._key_manager_fips_mode = None
        self._key_manager_key_class = None
        self._key_manager_kmip_user = None
        self._key_rotation_period = None
        self._last_key_rotation_date = None
        self._next_key_rotation_date = None
        self._key_rotation_without_fs_restart = None
        self._system_wide_encryption = None
        self._cloud_tier_wide_encryption = None
        self._active_tier_wide_encryption = None
        self._action_needed = None
        self._abort_or_apply_change_status = None
        self._link = None
        self.discriminator = None

        if encryption_info is not None:
            self.encryption_info = encryption_info
        if algorithm_info is not None:
            self.algorithm_info = algorithm_info
        if filesys_lock_info is not None:
            self.filesys_lock_info = filesys_lock_info
        if key_manager_in_use is not None:
            self.key_manager_in_use = key_manager_in_use
        if key_manager_server is not None:
            self.key_manager_server = key_manager_server
        if key_manager_port is not None:
            self.key_manager_port = key_manager_port
        if key_manager_fips_mode is not None:
            self.key_manager_fips_mode = key_manager_fips_mode
        if key_manager_key_class is not None:
            self.key_manager_key_class = key_manager_key_class
        if key_manager_kmip_user is not None:
            self.key_manager_kmip_user = key_manager_kmip_user
        if key_rotation_period is not None:
            self.key_rotation_period = key_rotation_period
        if last_key_rotation_date is not None:
            self.last_key_rotation_date = last_key_rotation_date
        if next_key_rotation_date is not None:
            self.next_key_rotation_date = next_key_rotation_date
        if key_rotation_without_fs_restart is not None:
            self.key_rotation_without_fs_restart = key_rotation_without_fs_restart
        if system_wide_encryption is not None:
            self.system_wide_encryption = system_wide_encryption
        if cloud_tier_wide_encryption is not None:
            self.cloud_tier_wide_encryption = cloud_tier_wide_encryption
        if active_tier_wide_encryption is not None:
            self.active_tier_wide_encryption = active_tier_wide_encryption
        if action_needed is not None:
            self.action_needed = action_needed
        if abort_or_apply_change_status is not None:
            self.abort_or_apply_change_status = abort_or_apply_change_status
        if link is not None:
            self.link = link

    @property
    def encryption_info(self):
        """Gets the encryption_info of this FilesysEncryptionInfo.  # noqa: E501


        :return: The encryption_info of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: list[EncryptionInfo]
        """
        return self._encryption_info

    @encryption_info.setter
    def encryption_info(self, encryption_info):
        """Sets the encryption_info of this FilesysEncryptionInfo.


        :param encryption_info: The encryption_info of this FilesysEncryptionInfo.  # noqa: E501
        :type: list[EncryptionInfo]
        """

        self._encryption_info = encryption_info

    @property
    def algorithm_info(self):
        """Gets the algorithm_info of this FilesysEncryptionInfo.  # noqa: E501


        :return: The algorithm_info of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: AlgorithmInfo
        """
        return self._algorithm_info

    @algorithm_info.setter
    def algorithm_info(self, algorithm_info):
        """Sets the algorithm_info of this FilesysEncryptionInfo.


        :param algorithm_info: The algorithm_info of this FilesysEncryptionInfo.  # noqa: E501
        :type: AlgorithmInfo
        """

        self._algorithm_info = algorithm_info

    @property
    def filesys_lock_info(self):
        """Gets the filesys_lock_info of this FilesysEncryptionInfo.  # noqa: E501


        :return: The filesys_lock_info of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._filesys_lock_info

    @filesys_lock_info.setter
    def filesys_lock_info(self, filesys_lock_info):
        """Sets the filesys_lock_info of this FilesysEncryptionInfo.


        :param filesys_lock_info: The filesys_lock_info of this FilesysEncryptionInfo.  # noqa: E501
        :type: str
        """

        self._filesys_lock_info = filesys_lock_info

    @property
    def key_manager_in_use(self):
        """Gets the key_manager_in_use of this FilesysEncryptionInfo.  # noqa: E501


        :return: The key_manager_in_use of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_manager_in_use

    @key_manager_in_use.setter
    def key_manager_in_use(self, key_manager_in_use):
        """Sets the key_manager_in_use of this FilesysEncryptionInfo.


        :param key_manager_in_use: The key_manager_in_use of this FilesysEncryptionInfo.  # noqa: E501
        :type: str
        """

        self._key_manager_in_use = key_manager_in_use

    @property
    def key_manager_server(self):
        """Gets the key_manager_server of this FilesysEncryptionInfo.  # noqa: E501


        :return: The key_manager_server of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: HostStr
        """
        return self._key_manager_server

    @key_manager_server.setter
    def key_manager_server(self, key_manager_server):
        """Sets the key_manager_server of this FilesysEncryptionInfo.


        :param key_manager_server: The key_manager_server of this FilesysEncryptionInfo.  # noqa: E501
        :type: HostStr
        """

        self._key_manager_server = key_manager_server

    @property
    def key_manager_port(self):
        """Gets the key_manager_port of this FilesysEncryptionInfo.  # noqa: E501


        :return: The key_manager_port of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: PortNumber
        """
        return self._key_manager_port

    @key_manager_port.setter
    def key_manager_port(self, key_manager_port):
        """Sets the key_manager_port of this FilesysEncryptionInfo.


        :param key_manager_port: The key_manager_port of this FilesysEncryptionInfo.  # noqa: E501
        :type: PortNumber
        """

        self._key_manager_port = key_manager_port

    @property
    def key_manager_fips_mode(self):
        """Gets the key_manager_fips_mode of this FilesysEncryptionInfo.  # noqa: E501


        :return: The key_manager_fips_mode of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: KeyManagerFipsMode
        """
        return self._key_manager_fips_mode

    @key_manager_fips_mode.setter
    def key_manager_fips_mode(self, key_manager_fips_mode):
        """Sets the key_manager_fips_mode of this FilesysEncryptionInfo.


        :param key_manager_fips_mode: The key_manager_fips_mode of this FilesysEncryptionInfo.  # noqa: E501
        :type: KeyManagerFipsMode
        """

        self._key_manager_fips_mode = key_manager_fips_mode

    @property
    def key_manager_key_class(self):
        """Gets the key_manager_key_class of this FilesysEncryptionInfo.  # noqa: E501


        :return: The key_manager_key_class of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_manager_key_class

    @key_manager_key_class.setter
    def key_manager_key_class(self, key_manager_key_class):
        """Sets the key_manager_key_class of this FilesysEncryptionInfo.


        :param key_manager_key_class: The key_manager_key_class of this FilesysEncryptionInfo.  # noqa: E501
        :type: str
        """

        self._key_manager_key_class = key_manager_key_class

    @property
    def key_manager_kmip_user(self):
        """Gets the key_manager_kmip_user of this FilesysEncryptionInfo.  # noqa: E501


        :return: The key_manager_kmip_user of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_manager_kmip_user

    @key_manager_kmip_user.setter
    def key_manager_kmip_user(self, key_manager_kmip_user):
        """Sets the key_manager_kmip_user of this FilesysEncryptionInfo.


        :param key_manager_kmip_user: The key_manager_kmip_user of this FilesysEncryptionInfo.  # noqa: E501
        :type: str
        """

        self._key_manager_kmip_user = key_manager_kmip_user

    @property
    def key_rotation_period(self):
        """Gets the key_rotation_period of this FilesysEncryptionInfo.  # noqa: E501


        :return: The key_rotation_period of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: KeyManagerKeyRotationPolicy
        """
        return self._key_rotation_period

    @key_rotation_period.setter
    def key_rotation_period(self, key_rotation_period):
        """Sets the key_rotation_period of this FilesysEncryptionInfo.


        :param key_rotation_period: The key_rotation_period of this FilesysEncryptionInfo.  # noqa: E501
        :type: KeyManagerKeyRotationPolicy
        """

        self._key_rotation_period = key_rotation_period

    @property
    def last_key_rotation_date(self):
        """Gets the last_key_rotation_date of this FilesysEncryptionInfo.  # noqa: E501


        :return: The last_key_rotation_date of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: int
        """
        return self._last_key_rotation_date

    @last_key_rotation_date.setter
    def last_key_rotation_date(self, last_key_rotation_date):
        """Sets the last_key_rotation_date of this FilesysEncryptionInfo.


        :param last_key_rotation_date: The last_key_rotation_date of this FilesysEncryptionInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_key_rotation_date is not None and last_key_rotation_date < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_key_rotation_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_key_rotation_date = last_key_rotation_date

    @property
    def next_key_rotation_date(self):
        """Gets the next_key_rotation_date of this FilesysEncryptionInfo.  # noqa: E501


        :return: The next_key_rotation_date of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: int
        """
        return self._next_key_rotation_date

    @next_key_rotation_date.setter
    def next_key_rotation_date(self, next_key_rotation_date):
        """Sets the next_key_rotation_date of this FilesysEncryptionInfo.


        :param next_key_rotation_date: The next_key_rotation_date of this FilesysEncryptionInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                next_key_rotation_date is not None and next_key_rotation_date < 0):  # noqa: E501
            raise ValueError("Invalid value for `next_key_rotation_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._next_key_rotation_date = next_key_rotation_date

    @property
    def key_rotation_without_fs_restart(self):
        """Gets the key_rotation_without_fs_restart of this FilesysEncryptionInfo.  # noqa: E501


        :return: The key_rotation_without_fs_restart of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._key_rotation_without_fs_restart

    @key_rotation_without_fs_restart.setter
    def key_rotation_without_fs_restart(self, key_rotation_without_fs_restart):
        """Sets the key_rotation_without_fs_restart of this FilesysEncryptionInfo.


        :param key_rotation_without_fs_restart: The key_rotation_without_fs_restart of this FilesysEncryptionInfo.  # noqa: E501
        :type: bool
        """

        self._key_rotation_without_fs_restart = key_rotation_without_fs_restart

    @property
    def system_wide_encryption(self):
        """Gets the system_wide_encryption of this FilesysEncryptionInfo.  # noqa: E501


        :return: The system_wide_encryption of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._system_wide_encryption

    @system_wide_encryption.setter
    def system_wide_encryption(self, system_wide_encryption):
        """Sets the system_wide_encryption of this FilesysEncryptionInfo.


        :param system_wide_encryption: The system_wide_encryption of this FilesysEncryptionInfo.  # noqa: E501
        :type: bool
        """

        self._system_wide_encryption = system_wide_encryption

    @property
    def cloud_tier_wide_encryption(self):
        """Gets the cloud_tier_wide_encryption of this FilesysEncryptionInfo.  # noqa: E501


        :return: The cloud_tier_wide_encryption of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_tier_wide_encryption

    @cloud_tier_wide_encryption.setter
    def cloud_tier_wide_encryption(self, cloud_tier_wide_encryption):
        """Sets the cloud_tier_wide_encryption of this FilesysEncryptionInfo.


        :param cloud_tier_wide_encryption: The cloud_tier_wide_encryption of this FilesysEncryptionInfo.  # noqa: E501
        :type: bool
        """

        self._cloud_tier_wide_encryption = cloud_tier_wide_encryption

    @property
    def active_tier_wide_encryption(self):
        """Gets the active_tier_wide_encryption of this FilesysEncryptionInfo.  # noqa: E501


        :return: The active_tier_wide_encryption of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._active_tier_wide_encryption

    @active_tier_wide_encryption.setter
    def active_tier_wide_encryption(self, active_tier_wide_encryption):
        """Sets the active_tier_wide_encryption of this FilesysEncryptionInfo.


        :param active_tier_wide_encryption: The active_tier_wide_encryption of this FilesysEncryptionInfo.  # noqa: E501
        :type: bool
        """

        self._active_tier_wide_encryption = active_tier_wide_encryption

    @property
    def action_needed(self):
        """Gets the action_needed of this FilesysEncryptionInfo.  # noqa: E501


        :return: The action_needed of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._action_needed

    @action_needed.setter
    def action_needed(self, action_needed):
        """Sets the action_needed of this FilesysEncryptionInfo.


        :param action_needed: The action_needed of this FilesysEncryptionInfo.  # noqa: E501
        :type: str
        """

        self._action_needed = action_needed

    @property
    def abort_or_apply_change_status(self):
        """Gets the abort_or_apply_change_status of this FilesysEncryptionInfo.  # noqa: E501


        :return: The abort_or_apply_change_status of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._abort_or_apply_change_status

    @abort_or_apply_change_status.setter
    def abort_or_apply_change_status(self, abort_or_apply_change_status):
        """Sets the abort_or_apply_change_status of this FilesysEncryptionInfo.


        :param abort_or_apply_change_status: The abort_or_apply_change_status of this FilesysEncryptionInfo.  # noqa: E501
        :type: str
        """

        self._abort_or_apply_change_status = abort_or_apply_change_status

    @property
    def link(self):
        """Gets the link of this FilesysEncryptionInfo.  # noqa: E501


        :return: The link of this FilesysEncryptionInfo.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this FilesysEncryptionInfo.


        :param link: The link of this FilesysEncryptionInfo.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesysEncryptionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesysEncryptionInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilesysEncryptionInfo):
            return True

        return self.to_dict() != other.to_dict()
