# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class FileReplicationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'target_hostname': 'str',
        'target_path': 'str',
        'bytes_replicated': 'int',
        'total_bytes': 'int',
        'replication_error': 'int',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'target_hostname': 'target_hostname',
        'target_path': 'target_path',
        'bytes_replicated': 'bytes_replicated',
        'total_bytes': 'total_bytes',
        'replication_error': 'replication_error',
        'link': 'link'
    }

    def __init__(self, id=None, status=None, target_hostname=None, target_path=None, bytes_replicated=None, total_bytes=None, replication_error=None, link=None, _configuration=None):  # noqa: E501
        """FileReplicationInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._status = None
        self._target_hostname = None
        self._target_path = None
        self._bytes_replicated = None
        self._total_bytes = None
        self._replication_error = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.status = status
        self.target_hostname = target_hostname
        self.target_path = target_path
        self.bytes_replicated = bytes_replicated
        self.total_bytes = total_bytes
        self.replication_error = replication_error
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this FileReplicationInfo.  # noqa: E501


        :return: The id of this FileReplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileReplicationInfo.


        :param id: The id of this FileReplicationInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this FileReplicationInfo.  # noqa: E501


        :return: The status of this FileReplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FileReplicationInfo.


        :param status: The status of this FileReplicationInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def target_hostname(self):
        """Gets the target_hostname of this FileReplicationInfo.  # noqa: E501


        :return: The target_hostname of this FileReplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._target_hostname

    @target_hostname.setter
    def target_hostname(self, target_hostname):
        """Sets the target_hostname of this FileReplicationInfo.


        :param target_hostname: The target_hostname of this FileReplicationInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and target_hostname is None:
            raise ValueError("Invalid value for `target_hostname`, must not be `None`")  # noqa: E501

        self._target_hostname = target_hostname

    @property
    def target_path(self):
        """Gets the target_path of this FileReplicationInfo.  # noqa: E501


        :return: The target_path of this FileReplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._target_path

    @target_path.setter
    def target_path(self, target_path):
        """Sets the target_path of this FileReplicationInfo.


        :param target_path: The target_path of this FileReplicationInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and target_path is None:
            raise ValueError("Invalid value for `target_path`, must not be `None`")  # noqa: E501

        self._target_path = target_path

    @property
    def bytes_replicated(self):
        """Gets the bytes_replicated of this FileReplicationInfo.  # noqa: E501


        :return: The bytes_replicated of this FileReplicationInfo.  # noqa: E501
        :rtype: int
        """
        return self._bytes_replicated

    @bytes_replicated.setter
    def bytes_replicated(self, bytes_replicated):
        """Sets the bytes_replicated of this FileReplicationInfo.


        :param bytes_replicated: The bytes_replicated of this FileReplicationInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and bytes_replicated is None:
            raise ValueError("Invalid value for `bytes_replicated`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bytes_replicated is not None and bytes_replicated < 0):  # noqa: E501
            raise ValueError("Invalid value for `bytes_replicated`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bytes_replicated = bytes_replicated

    @property
    def total_bytes(self):
        """Gets the total_bytes of this FileReplicationInfo.  # noqa: E501


        :return: The total_bytes of this FileReplicationInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this FileReplicationInfo.


        :param total_bytes: The total_bytes of this FileReplicationInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_bytes is None:
            raise ValueError("Invalid value for `total_bytes`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                total_bytes is not None and total_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `total_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_bytes = total_bytes

    @property
    def replication_error(self):
        """Gets the replication_error of this FileReplicationInfo.  # noqa: E501


        :return: The replication_error of this FileReplicationInfo.  # noqa: E501
        :rtype: int
        """
        return self._replication_error

    @replication_error.setter
    def replication_error(self, replication_error):
        """Sets the replication_error of this FileReplicationInfo.


        :param replication_error: The replication_error of this FileReplicationInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and replication_error is None:
            raise ValueError("Invalid value for `replication_error`, must not be `None`")  # noqa: E501

        self._replication_error = replication_error

    @property
    def link(self):
        """Gets the link of this FileReplicationInfo.  # noqa: E501


        :return: The link of this FileReplicationInfo.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this FileReplicationInfo.


        :param link: The link of this FileReplicationInfo.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileReplicationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileReplicationInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileReplicationInfo):
            return True

        return self.to_dict() != other.to_dict()
