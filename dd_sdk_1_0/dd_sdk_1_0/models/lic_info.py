# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class LicInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'feature': 'str',
        'license_mode': 'LicMode',
        'time_left_secs': 'int',
        'total_capacity_byte': 'int',
        'link': 'RestLinkRep'
    }

    attribute_map = {
        'id': 'id',
        'feature': 'feature',
        'license_mode': 'license_mode',
        'time_left_secs': 'time_left_secs',
        'total_capacity_byte': 'total_capacity_byte',
        'link': 'link'
    }

    def __init__(self, id=None, feature=None, license_mode=None, time_left_secs=None, total_capacity_byte=None, link=None, _configuration=None):  # noqa: E501
        """LicInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._feature = None
        self._license_mode = None
        self._time_left_secs = None
        self._total_capacity_byte = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.feature = feature
        if license_mode is not None:
            self.license_mode = license_mode
        if time_left_secs is not None:
            self.time_left_secs = time_left_secs
        if total_capacity_byte is not None:
            self.total_capacity_byte = total_capacity_byte
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this LicInfo.  # noqa: E501

        urlencoded feature  # noqa: E501

        :return: The id of this LicInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LicInfo.

        urlencoded feature  # noqa: E501

        :param id: The id of this LicInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def feature(self):
        """Gets the feature of this LicInfo.  # noqa: E501


        :return: The feature of this LicInfo.  # noqa: E501
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this LicInfo.


        :param feature: The feature of this LicInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and feature is None:
            raise ValueError("Invalid value for `feature`, must not be `None`")  # noqa: E501

        self._feature = feature

    @property
    def license_mode(self):
        """Gets the license_mode of this LicInfo.  # noqa: E501


        :return: The license_mode of this LicInfo.  # noqa: E501
        :rtype: LicMode
        """
        return self._license_mode

    @license_mode.setter
    def license_mode(self, license_mode):
        """Sets the license_mode of this LicInfo.


        :param license_mode: The license_mode of this LicInfo.  # noqa: E501
        :type: LicMode
        """

        self._license_mode = license_mode

    @property
    def time_left_secs(self):
        """Gets the time_left_secs of this LicInfo.  # noqa: E501


        :return: The time_left_secs of this LicInfo.  # noqa: E501
        :rtype: int
        """
        return self._time_left_secs

    @time_left_secs.setter
    def time_left_secs(self, time_left_secs):
        """Sets the time_left_secs of this LicInfo.


        :param time_left_secs: The time_left_secs of this LicInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                time_left_secs is not None and time_left_secs < 0):  # noqa: E501
            raise ValueError("Invalid value for `time_left_secs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_left_secs = time_left_secs

    @property
    def total_capacity_byte(self):
        """Gets the total_capacity_byte of this LicInfo.  # noqa: E501


        :return: The total_capacity_byte of this LicInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_capacity_byte

    @total_capacity_byte.setter
    def total_capacity_byte(self, total_capacity_byte):
        """Sets the total_capacity_byte of this LicInfo.


        :param total_capacity_byte: The total_capacity_byte of this LicInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                total_capacity_byte is not None and total_capacity_byte < 0):  # noqa: E501
            raise ValueError("Invalid value for `total_capacity_byte`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_capacity_byte = total_capacity_byte

    @property
    def link(self):
        """Gets the link of this LicInfo.  # noqa: E501


        :return: The link of this LicInfo.  # noqa: E501
        :rtype: RestLinkRep
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this LicInfo.


        :param link: The link of this LicInfo.  # noqa: E501
        :type: RestLinkRep
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicInfo):
            return True

        return self.to_dict() != other.to_dict()
