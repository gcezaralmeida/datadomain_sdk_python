# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class NetworkThroughput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'send_bytes': 'float',
        'receive_bytes': 'float',
        'send_rate': 'float',
        'receive_rate': 'float'
    }

    attribute_map = {
        'name': 'name',
        'send_bytes': 'send_bytes',
        'receive_bytes': 'receive_bytes',
        'send_rate': 'send_rate',
        'receive_rate': 'receive_rate'
    }

    def __init__(self, name=None, send_bytes=None, receive_bytes=None, send_rate=None, receive_rate=None, _configuration=None):  # noqa: E501
        """NetworkThroughput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._send_bytes = None
        self._receive_bytes = None
        self._send_rate = None
        self._receive_rate = None
        self.discriminator = None

        self.name = name
        if send_bytes is not None:
            self.send_bytes = send_bytes
        if receive_bytes is not None:
            self.receive_bytes = receive_bytes
        if send_rate is not None:
            self.send_rate = send_rate
        if receive_rate is not None:
            self.receive_rate = receive_rate

    @property
    def name(self):
        """Gets the name of this NetworkThroughput.  # noqa: E501


        :return: The name of this NetworkThroughput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkThroughput.


        :param name: The name of this NetworkThroughput.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def send_bytes(self):
        """Gets the send_bytes of this NetworkThroughput.  # noqa: E501

        Unit is bytes.  # noqa: E501

        :return: The send_bytes of this NetworkThroughput.  # noqa: E501
        :rtype: float
        """
        return self._send_bytes

    @send_bytes.setter
    def send_bytes(self, send_bytes):
        """Sets the send_bytes of this NetworkThroughput.

        Unit is bytes.  # noqa: E501

        :param send_bytes: The send_bytes of this NetworkThroughput.  # noqa: E501
        :type: float
        """

        self._send_bytes = send_bytes

    @property
    def receive_bytes(self):
        """Gets the receive_bytes of this NetworkThroughput.  # noqa: E501

        Unit is bytes.  # noqa: E501

        :return: The receive_bytes of this NetworkThroughput.  # noqa: E501
        :rtype: float
        """
        return self._receive_bytes

    @receive_bytes.setter
    def receive_bytes(self, receive_bytes):
        """Sets the receive_bytes of this NetworkThroughput.

        Unit is bytes.  # noqa: E501

        :param receive_bytes: The receive_bytes of this NetworkThroughput.  # noqa: E501
        :type: float
        """

        self._receive_bytes = receive_bytes

    @property
    def send_rate(self):
        """Gets the send_rate of this NetworkThroughput.  # noqa: E501

        Unit is bytes per second.  # noqa: E501

        :return: The send_rate of this NetworkThroughput.  # noqa: E501
        :rtype: float
        """
        return self._send_rate

    @send_rate.setter
    def send_rate(self, send_rate):
        """Sets the send_rate of this NetworkThroughput.

        Unit is bytes per second.  # noqa: E501

        :param send_rate: The send_rate of this NetworkThroughput.  # noqa: E501
        :type: float
        """

        self._send_rate = send_rate

    @property
    def receive_rate(self):
        """Gets the receive_rate of this NetworkThroughput.  # noqa: E501

        Unit is bytes per second.  # noqa: E501

        :return: The receive_rate of this NetworkThroughput.  # noqa: E501
        :rtype: float
        """
        return self._receive_rate

    @receive_rate.setter
    def receive_rate(self, receive_rate):
        """Sets the receive_rate of this NetworkThroughput.

        Unit is bytes per second.  # noqa: E501

        :param receive_rate: The receive_rate of this NetworkThroughput.  # noqa: E501
        :type: float
        """

        self._receive_rate = receive_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkThroughput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkThroughput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkThroughput):
            return True

        return self.to_dict() != other.to_dict()
