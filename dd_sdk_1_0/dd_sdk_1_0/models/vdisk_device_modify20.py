# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class VdiskDeviceModify20(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation': 'VdiskDeviceModifyOps',
        'lock_request': 'VdiskDeviceSetLock',
        'unlock_request': 'VdiskDeviceClearLock',
        'inst_request': 'VdiskDeviceInstantiate',
        'uninst_request': 'VdiskDeviceUninstantiate',
        'kvm_set_clear_request': 'VdiskDeviceKvmSetClear',
        'rw_state_request': 'VdiskDeviceStateSet'
    }

    attribute_map = {
        'operation': 'operation',
        'lock_request': 'lock_request',
        'unlock_request': 'unlock_request',
        'inst_request': 'inst_request',
        'uninst_request': 'uninst_request',
        'kvm_set_clear_request': 'kvm_set_clear_request',
        'rw_state_request': 'rw_state_request'
    }

    def __init__(self, operation=None, lock_request=None, unlock_request=None, inst_request=None, uninst_request=None, kvm_set_clear_request=None, rw_state_request=None, _configuration=None):  # noqa: E501
        """VdiskDeviceModify20 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._operation = None
        self._lock_request = None
        self._unlock_request = None
        self._inst_request = None
        self._uninst_request = None
        self._kvm_set_clear_request = None
        self._rw_state_request = None
        self.discriminator = None

        self.operation = operation
        if lock_request is not None:
            self.lock_request = lock_request
        if unlock_request is not None:
            self.unlock_request = unlock_request
        if inst_request is not None:
            self.inst_request = inst_request
        if uninst_request is not None:
            self.uninst_request = uninst_request
        if kvm_set_clear_request is not None:
            self.kvm_set_clear_request = kvm_set_clear_request
        if rw_state_request is not None:
            self.rw_state_request = rw_state_request

    @property
    def operation(self):
        """Gets the operation of this VdiskDeviceModify20.  # noqa: E501


        :return: The operation of this VdiskDeviceModify20.  # noqa: E501
        :rtype: VdiskDeviceModifyOps
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this VdiskDeviceModify20.


        :param operation: The operation of this VdiskDeviceModify20.  # noqa: E501
        :type: VdiskDeviceModifyOps
        """
        if self._configuration.client_side_validation and operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def lock_request(self):
        """Gets the lock_request of this VdiskDeviceModify20.  # noqa: E501


        :return: The lock_request of this VdiskDeviceModify20.  # noqa: E501
        :rtype: VdiskDeviceSetLock
        """
        return self._lock_request

    @lock_request.setter
    def lock_request(self, lock_request):
        """Sets the lock_request of this VdiskDeviceModify20.


        :param lock_request: The lock_request of this VdiskDeviceModify20.  # noqa: E501
        :type: VdiskDeviceSetLock
        """

        self._lock_request = lock_request

    @property
    def unlock_request(self):
        """Gets the unlock_request of this VdiskDeviceModify20.  # noqa: E501


        :return: The unlock_request of this VdiskDeviceModify20.  # noqa: E501
        :rtype: VdiskDeviceClearLock
        """
        return self._unlock_request

    @unlock_request.setter
    def unlock_request(self, unlock_request):
        """Sets the unlock_request of this VdiskDeviceModify20.


        :param unlock_request: The unlock_request of this VdiskDeviceModify20.  # noqa: E501
        :type: VdiskDeviceClearLock
        """

        self._unlock_request = unlock_request

    @property
    def inst_request(self):
        """Gets the inst_request of this VdiskDeviceModify20.  # noqa: E501


        :return: The inst_request of this VdiskDeviceModify20.  # noqa: E501
        :rtype: VdiskDeviceInstantiate
        """
        return self._inst_request

    @inst_request.setter
    def inst_request(self, inst_request):
        """Sets the inst_request of this VdiskDeviceModify20.


        :param inst_request: The inst_request of this VdiskDeviceModify20.  # noqa: E501
        :type: VdiskDeviceInstantiate
        """

        self._inst_request = inst_request

    @property
    def uninst_request(self):
        """Gets the uninst_request of this VdiskDeviceModify20.  # noqa: E501


        :return: The uninst_request of this VdiskDeviceModify20.  # noqa: E501
        :rtype: VdiskDeviceUninstantiate
        """
        return self._uninst_request

    @uninst_request.setter
    def uninst_request(self, uninst_request):
        """Sets the uninst_request of this VdiskDeviceModify20.


        :param uninst_request: The uninst_request of this VdiskDeviceModify20.  # noqa: E501
        :type: VdiskDeviceUninstantiate
        """

        self._uninst_request = uninst_request

    @property
    def kvm_set_clear_request(self):
        """Gets the kvm_set_clear_request of this VdiskDeviceModify20.  # noqa: E501


        :return: The kvm_set_clear_request of this VdiskDeviceModify20.  # noqa: E501
        :rtype: VdiskDeviceKvmSetClear
        """
        return self._kvm_set_clear_request

    @kvm_set_clear_request.setter
    def kvm_set_clear_request(self, kvm_set_clear_request):
        """Sets the kvm_set_clear_request of this VdiskDeviceModify20.


        :param kvm_set_clear_request: The kvm_set_clear_request of this VdiskDeviceModify20.  # noqa: E501
        :type: VdiskDeviceKvmSetClear
        """

        self._kvm_set_clear_request = kvm_set_clear_request

    @property
    def rw_state_request(self):
        """Gets the rw_state_request of this VdiskDeviceModify20.  # noqa: E501


        :return: The rw_state_request of this VdiskDeviceModify20.  # noqa: E501
        :rtype: VdiskDeviceStateSet
        """
        return self._rw_state_request

    @rw_state_request.setter
    def rw_state_request(self, rw_state_request):
        """Sets the rw_state_request of this VdiskDeviceModify20.


        :param rw_state_request: The rw_state_request of this VdiskDeviceModify20.  # noqa: E501
        :type: VdiskDeviceStateSet
        """

        self._rw_state_request = rw_state_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VdiskDeviceModify20, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VdiskDeviceModify20):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VdiskDeviceModify20):
            return True

        return self.to_dict() != other.to_dict()
