# coding: utf-8

"""
    DataDomain Rest API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dd_sdk_1_0.configuration import Configuration


class TenantUnitDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'uuid': 'str',
        'tenant_name': 'str',
        'pre_comp_bytes': 'int',
        'hostname': 'str',
        'security_mode': 'SecurityMode',
        'data_ip': 'DataIP',
        'gateway_ip': 'str',
        'mtrees': 'list[TenantUnitMTree]',
        'ddboost_storage_units': 'list[TenantUnitStorageUnit]',
        'link': 'list[RestLinkRep]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'uuid': 'uuid',
        'tenant_name': 'tenant_name',
        'pre_comp_bytes': 'pre_comp_bytes',
        'hostname': 'hostname',
        'security_mode': 'security_mode',
        'data_ip': 'data_ip',
        'gateway_ip': 'gateway_ip',
        'mtrees': 'mtrees',
        'ddboost_storage_units': 'ddboost_storage_units',
        'link': 'link'
    }

    def __init__(self, id=None, name=None, uuid=None, tenant_name=None, pre_comp_bytes=None, hostname=None, security_mode=None, data_ip=None, gateway_ip=None, mtrees=None, ddboost_storage_units=None, link=None, _configuration=None):  # noqa: E501
        """TenantUnitDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._uuid = None
        self._tenant_name = None
        self._pre_comp_bytes = None
        self._hostname = None
        self._security_mode = None
        self._data_ip = None
        self._gateway_ip = None
        self._mtrees = None
        self._ddboost_storage_units = None
        self._link = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.uuid = uuid
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if pre_comp_bytes is not None:
            self.pre_comp_bytes = pre_comp_bytes
        if hostname is not None:
            self.hostname = hostname
        if security_mode is not None:
            self.security_mode = security_mode
        if data_ip is not None:
            self.data_ip = data_ip
        if gateway_ip is not None:
            self.gateway_ip = gateway_ip
        if mtrees is not None:
            self.mtrees = mtrees
        if ddboost_storage_units is not None:
            self.ddboost_storage_units = ddboost_storage_units
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this TenantUnitDetail.  # noqa: E501

        url-encoded name  # noqa: E501

        :return: The id of this TenantUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TenantUnitDetail.

        url-encoded name  # noqa: E501

        :param id: The id of this TenantUnitDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TenantUnitDetail.  # noqa: E501


        :return: The name of this TenantUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TenantUnitDetail.


        :param name: The name of this TenantUnitDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this TenantUnitDetail.  # noqa: E501


        :return: The uuid of this TenantUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TenantUnitDetail.


        :param uuid: The uuid of this TenantUnitDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def tenant_name(self):
        """Gets the tenant_name of this TenantUnitDetail.  # noqa: E501


        :return: The tenant_name of this TenantUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this TenantUnitDetail.


        :param tenant_name: The tenant_name of this TenantUnitDetail.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def pre_comp_bytes(self):
        """Gets the pre_comp_bytes of this TenantUnitDetail.  # noqa: E501


        :return: The pre_comp_bytes of this TenantUnitDetail.  # noqa: E501
        :rtype: int
        """
        return self._pre_comp_bytes

    @pre_comp_bytes.setter
    def pre_comp_bytes(self, pre_comp_bytes):
        """Sets the pre_comp_bytes of this TenantUnitDetail.


        :param pre_comp_bytes: The pre_comp_bytes of this TenantUnitDetail.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                pre_comp_bytes is not None and pre_comp_bytes < 0):  # noqa: E501
            raise ValueError("Invalid value for `pre_comp_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pre_comp_bytes = pre_comp_bytes

    @property
    def hostname(self):
        """Gets the hostname of this TenantUnitDetail.  # noqa: E501


        :return: The hostname of this TenantUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this TenantUnitDetail.


        :param hostname: The hostname of this TenantUnitDetail.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def security_mode(self):
        """Gets the security_mode of this TenantUnitDetail.  # noqa: E501


        :return: The security_mode of this TenantUnitDetail.  # noqa: E501
        :rtype: SecurityMode
        """
        return self._security_mode

    @security_mode.setter
    def security_mode(self, security_mode):
        """Sets the security_mode of this TenantUnitDetail.


        :param security_mode: The security_mode of this TenantUnitDetail.  # noqa: E501
        :type: SecurityMode
        """

        self._security_mode = security_mode

    @property
    def data_ip(self):
        """Gets the data_ip of this TenantUnitDetail.  # noqa: E501


        :return: The data_ip of this TenantUnitDetail.  # noqa: E501
        :rtype: DataIP
        """
        return self._data_ip

    @data_ip.setter
    def data_ip(self, data_ip):
        """Sets the data_ip of this TenantUnitDetail.


        :param data_ip: The data_ip of this TenantUnitDetail.  # noqa: E501
        :type: DataIP
        """

        self._data_ip = data_ip

    @property
    def gateway_ip(self):
        """Gets the gateway_ip of this TenantUnitDetail.  # noqa: E501


        :return: The gateway_ip of this TenantUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """Sets the gateway_ip of this TenantUnitDetail.


        :param gateway_ip: The gateway_ip of this TenantUnitDetail.  # noqa: E501
        :type: str
        """

        self._gateway_ip = gateway_ip

    @property
    def mtrees(self):
        """Gets the mtrees of this TenantUnitDetail.  # noqa: E501


        :return: The mtrees of this TenantUnitDetail.  # noqa: E501
        :rtype: list[TenantUnitMTree]
        """
        return self._mtrees

    @mtrees.setter
    def mtrees(self, mtrees):
        """Sets the mtrees of this TenantUnitDetail.


        :param mtrees: The mtrees of this TenantUnitDetail.  # noqa: E501
        :type: list[TenantUnitMTree]
        """

        self._mtrees = mtrees

    @property
    def ddboost_storage_units(self):
        """Gets the ddboost_storage_units of this TenantUnitDetail.  # noqa: E501


        :return: The ddboost_storage_units of this TenantUnitDetail.  # noqa: E501
        :rtype: list[TenantUnitStorageUnit]
        """
        return self._ddboost_storage_units

    @ddboost_storage_units.setter
    def ddboost_storage_units(self, ddboost_storage_units):
        """Sets the ddboost_storage_units of this TenantUnitDetail.


        :param ddboost_storage_units: The ddboost_storage_units of this TenantUnitDetail.  # noqa: E501
        :type: list[TenantUnitStorageUnit]
        """

        self._ddboost_storage_units = ddboost_storage_units

    @property
    def link(self):
        """Gets the link of this TenantUnitDetail.  # noqa: E501


        :return: The link of this TenantUnitDetail.  # noqa: E501
        :rtype: list[RestLinkRep]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this TenantUnitDetail.


        :param link: The link of this TenantUnitDetail.  # noqa: E501
        :type: list[RestLinkRep]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TenantUnitDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TenantUnitDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TenantUnitDetail):
            return True

        return self.to_dict() != other.to_dict()
